{"ast":null,"code":"var _jsxFileName = \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport Home from './pages/Home';\nimport ThreadPage from './pages/ThreadPage';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport NavBar from './components/NavBar';\nimport GlobalMessage from './components/GlobalMessage';\nimport MyThreads from './pages/MyThreads';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API = \"https://chitchat-4uee.onrender.com/\";\nconst theme = createTheme({\n  palette: {\n    primary: {\n      light: '#757ce8',\n      main: '#3f50b5',\n      dark: '#002884',\n      contrastText: '#fff'\n    },\n    secondary: {\n      light: '#ff7961',\n      main: '#f44336',\n      dark: '#ba000d',\n      contrastText: '#000'\n    }\n  }\n});\n\nconst App = () => {\n  _s();\n\n  const [globalMessage, setGlobalMessage] = useState([]);\n  const [severityGlobalMessage, setSeverityGlobalMessage] = useState(undefined);\n  const [openGlobalMessage, setOpenGlobalMessage] = useState(true);\n\n  const handleCloseGlobalMessage = () => {\n    setOpenGlobalMessage(false);\n    setSeverityGlobalMessage(undefined);\n    setGlobalMessage([]);\n  };\n\n  const handleOpenGlobalMessage = () => {\n    setOpenGlobalMessage(true);\n  };\n\n  const globalMessageState = {\n    setGlobalMessage: setGlobalMessage,\n    setSeverityGlobalMessage: setSeverityGlobalMessage,\n    handleOpenGlobalMessage: handleOpenGlobalMessage\n  };\n  const emptyCurrentUser = {\n    id: 0,\n    username: \"\",\n    password_digest: \"\",\n    created_at: \"\",\n    updated_at: \"\"\n  };\n  const [currentUser, setCurrentUser] = useState(emptyCurrentUser);\n  const currentUserState = {\n    currentUser: currentUser,\n    setCurrentUser: setCurrentUser,\n    emptyCurrentUser: emptyCurrentUser,\n    isLoggedIn: currentUser.id !== 0\n  };\n  useEffect(() => {\n    let new_message = [];\n    const token = localStorage.getItem(\"token\");\n\n    if (token) {\n      fetch(API + \"/login\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `${token}`\n        }\n      }).then(response => response.json()).then(data => {\n        if (data.error) {\n          setSeverityGlobalMessage('error');\n          data.error.map(error => new_message.push(error));\n          setGlobalMessage(new_message);\n        } else {\n          setCurrentUser(data);\n        }\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        API: API,\n        currentUserState: currentUserState,\n        globalMessageState: globalMessageState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GlobalMessage, {\n        globalMessage: globalMessage,\n        severityGlobalMessage: severityGlobalMessage,\n        openGlobalMessage: openGlobalMessage,\n        handleCloseGlobalMessage: handleCloseGlobalMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(BrowserRouter, {\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/thread/:threadID\",\n            element: /*#__PURE__*/_jsxDEV(ThreadPage, {\n              globalMessageState: globalMessageState,\n              currentUserState: currentUserState,\n              API: API\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 58\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(Home, {\n              globalMessageState: globalMessageState,\n              currentUserState: currentUserState,\n              API: API\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 42\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/mythreads\",\n            element: /*#__PURE__*/_jsxDEV(MyThreads, {\n              globalMessageState: globalMessageState,\n              currentUserState: currentUserState,\n              API: API\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 51\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"eoqF1wVJPsB3uAc8ze1WCZHwmbI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/App.tsx"],"names":["Home","ThreadPage","React","useEffect","useState","BrowserRouter","Route","Routes","createTheme","ThemeProvider","NavBar","GlobalMessage","MyThreads","API","theme","palette","primary","light","main","dark","contrastText","secondary","App","globalMessage","setGlobalMessage","severityGlobalMessage","setSeverityGlobalMessage","undefined","openGlobalMessage","setOpenGlobalMessage","handleCloseGlobalMessage","handleOpenGlobalMessage","globalMessageState","emptyCurrentUser","id","username","password_digest","created_at","updated_at","currentUser","setCurrentUser","currentUserState","isLoggedIn","new_message","token","localStorage","getItem","fetch","method","headers","Authorization","then","response","json","data","error","map","push"],"mappings":"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","sourcesContent":["import Home from './pages/Home';\nimport ThreadPage from './pages/ThreadPage';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport NavBar from './components/NavBar';\nimport CurrentUser from './types/CurrentUser';\nimport GlobalMessage from './components/GlobalMessage';\nimport { AlertColor } from '@mui/material/Alert';\nimport MyThreads from './pages/MyThreads';\n\nconst API: string = \"https://chitchat-4uee.onrender.com/\";\n\nconst theme = createTheme({\n    palette: {\n      primary: {\n        light: '#757ce8',\n        main: '#3f50b5',\n        dark: '#002884',\n        contrastText: '#fff',\n      },\n      secondary: {\n        light: '#ff7961',\n        main: '#f44336',\n        dark: '#ba000d',\n        contrastText: '#000',\n      },\n    },\n  });\n\nconst App: React.FC = () => {\n  const [globalMessage, setGlobalMessage] = useState<string[]>([]);\n  const [severityGlobalMessage, setSeverityGlobalMessage] = useState<AlertColor | undefined>(undefined);\n  const [openGlobalMessage, setOpenGlobalMessage] = useState<boolean>(true);\n  const handleCloseGlobalMessage = () => {\n      setOpenGlobalMessage(false);\n      setSeverityGlobalMessage(undefined);\n      setGlobalMessage([]);\n  }\n  const handleOpenGlobalMessage = () => {\n    setOpenGlobalMessage(true);\n  }\n  const globalMessageState = {\n    setGlobalMessage: setGlobalMessage,\n    setSeverityGlobalMessage: setSeverityGlobalMessage,\n    handleOpenGlobalMessage: handleOpenGlobalMessage,\n  }\n\n  const emptyCurrentUser = {\n    id: 0,\n    username: \"\",\n    password_digest: \"\",\n    created_at: \"\",\n    updated_at: \"\",\n  }\n  const [currentUser, setCurrentUser] = useState<CurrentUser>(emptyCurrentUser);\n  const currentUserState = {\n    currentUser: currentUser,\n    setCurrentUser: setCurrentUser,\n    emptyCurrentUser: emptyCurrentUser,\n    isLoggedIn: currentUser.id !== 0,\n  }\n\n  useEffect(() => {\n    let new_message: string[] = [];\n    const token = localStorage.getItem(\"token\")\n    if (token) {\n      fetch(API + \"/login\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `${token}`\n        }\n      })\n      .then(response => response.json())\n      .then(data => {\n        if (data.error) {\n          setSeverityGlobalMessage('error');\n          data.error.map((error: string) =>\n              new_message.push(error));\n          setGlobalMessage(new_message);\n        } else {\n          setCurrentUser(data);\n        }\n      })\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n          <NavBar API={API} currentUserState={currentUserState} globalMessageState={globalMessageState}/>\n          < GlobalMessage globalMessage={globalMessage} severityGlobalMessage={severityGlobalMessage} openGlobalMessage={openGlobalMessage} handleCloseGlobalMessage={handleCloseGlobalMessage}/>\n          <BrowserRouter>\n            <Routes>\n                <Route path=\"/thread/:threadID\" element={<ThreadPage globalMessageState={globalMessageState} currentUserState={currentUserState} API={API}/>} />\n                <Route path=\"/\" element={<Home globalMessageState={globalMessageState} currentUserState={currentUserState} API={API}/>} />\n                <Route path=\"/mythreads\" element={<MyThreads globalMessageState={globalMessageState} currentUserState={currentUserState} API={API}/>} />\n            </Routes>\n         </BrowserRouter>\n      </ThemeProvider>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}