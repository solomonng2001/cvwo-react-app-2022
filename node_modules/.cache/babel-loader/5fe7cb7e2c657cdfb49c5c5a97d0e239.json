{"ast":null,"code":"var _jsxFileName = \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/thread/ThreadView.tsx\",\n    _s = $RefreshSig$();\n\nimport { emptyThread } from '../../types/Thread';\nimport ThreadMainPost from '../ThreadMainPost';\nimport CommentList from '../CommentList';\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n// Page displaying individual thread and associated comments\nconst ThreadView = _ref => {\n  _s();\n\n  let {\n    threadID,\n    currentUserState,\n    API,\n    globalMessageState\n  } = _ref;\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [thread, setThread] = useState(emptyThread); // Fetch thread and associated comments when page loaded\n\n  useEffect(() => {\n    fetch(API + \"/thread_pages/\" + threadID, {\n      method: 'GET',\n      mode: 'cors'\n    }).then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setThread(result);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, [threadID, API]); // Display \"loading\" until response from backend, then display error or threads and comments\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 16\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ThreadMainPost, {\n        globalMessageState: globalMessageState,\n        API: API,\n        toOverflow: false,\n        thread: thread,\n        currentUserState: currentUserState\n      }, thread.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CommentList, {\n        API: API,\n        comments: thread.comments,\n        currentUserState: currentUserState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n};\n\n_s(ThreadView, \"6igoTehKxNQVBvRSb6U+zA47D1g=\");\n\n_c = ThreadView;\nexport default ThreadView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreadView\");","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/thread/ThreadView.tsx"],"names":["emptyThread","ThreadMainPost","CommentList","React","useEffect","useState","ThreadView","threadID","currentUserState","API","globalMessageState","error","setError","isLoaded","setIsLoaded","thread","setThread","fetch","method","mode","then","res","json","result","message","id","comments"],"mappings":";;;AAAA,SAAiBA,WAAjB,QAAoC,oBAApC;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AAIA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;AASA;AACA,MAAMC,UAA2B,GAAG,QAAkE;AAAA;;AAAA,MAAjE;AAACC,IAAAA,QAAD;AAAWC,IAAAA,gBAAX;AAA6BC,IAAAA,GAA7B;AAAkCC,IAAAA;AAAlC,GAAiE;AAClG,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAM,IAAN,CAAlC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAU,KAAV,CAAxC;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAASL,WAAT,CAApC,CAHkG,CAKlG;;AACAI,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,KAAK,CAACR,GAAG,GAAG,gBAAN,GAAyBF,QAA1B,EAAoC;AACrCW,MAAAA,MAAM,EAAE,KAD6B;AAErCC,MAAAA,IAAI,EAAE;AAF+B,KAApC,CAAL,CAIKC,IAJL,CAIUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJjB,EAKKF,IALL,CAMSG,MAAD,IAAY;AACRT,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,SAAS,CAACO,MAAD,CAAT;AACH,KATT,EAUQ;AACA;AACA;AACCZ,IAAAA,KAAD,IAAW;AACPG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,KAhBT;AAkBH,GAnBQ,EAmBN,CAACJ,QAAD,EAAWE,GAAX,CAnBM,CAAT,CANkG,CA2BlG;;AACA,MAAIE,KAAJ,EAAW;AACP,wBAAO;AAAA,4BAAaA,KAAK,CAACa,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFD,MAEO,IAAI,CAACX,QAAL,EAAe;AAClB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFM,MAEA;AACH,wBACI;AAAA,8BAEI,QAAC,cAAD;AAAgB,QAAA,kBAAkB,EAAEH,kBAApC;AAAwD,QAAA,GAAG,EAAED,GAA7D;AAAkE,QAAA,UAAU,EAAE,KAA9E;AAAqF,QAAA,MAAM,EAAEM,MAA7F;AAAqH,QAAA,gBAAgB,EAAEP;AAAvI,SAA0GO,MAAM,CAACU,EAAjH;AAAA;AAAA;AAAA;AAAA,cAFJ,eAII,QAAC,WAAD;AAAa,QAAA,GAAG,EAAEhB,GAAlB;AAAuB,QAAA,QAAQ,EAAEM,MAAM,CAACW,QAAxC;AAAkD,QAAA,gBAAgB,EAAElB;AAApE;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA,oBADJ;AAQH;AACJ,CA1CD;;GAAMF,U;;KAAAA,U;AA4CN,eAAeA,UAAf","sourcesContent":["import { Thread, emptyThread } from '../../types/Thread';\nimport ThreadMainPost from '../ThreadMainPost';\nimport CommentList from '../CommentList';\nimport CurrentUserState from '../../types/CurrentUserState';\nimport GlobalMessageState from '../../types/GlobalMessageState';\n\nimport React, { useEffect, useState } from 'react';\n\ntype Props = {\n    threadID: string | undefined;\n    currentUserState: CurrentUserState;\n    API: string,\n    globalMessageState: GlobalMessageState;\n}\n\n// Page displaying individual thread and associated comments\nconst ThreadView: React.FC<Props> = ({threadID, currentUserState, API, globalMessageState}: Props) => {\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [thread, setThread] = useState<Thread>(emptyThread);\n\n    // Fetch thread and associated comments when page loaded\n    useEffect(() => {\n        fetch(API + \"/thread_pages/\" + threadID, {\n            method: 'GET',\n            mode: 'cors'\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setThread(result);\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            )\n    }, [threadID, API])\n    \n    // Display \"loading\" until response from backend, then display error or threads and comments\n    if (error) {\n        return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div>Loading...</div>;\n    } else {\n        return (\n            <>\n                {/* Individual thread: title, body, user, tags, and button icons to edit, delete or comment */}\n                <ThreadMainPost globalMessageState={globalMessageState} API={API} toOverflow={false} thread={thread} key={thread.id} currentUserState={currentUserState}/>\n                {/* all associated comments */}\n                <CommentList API={API} comments={thread.comments} currentUserState={currentUserState}/>\n            </>\n        );\n    }\n};\n\nexport default ThreadView;\n"]},"metadata":{},"sourceType":"module"}