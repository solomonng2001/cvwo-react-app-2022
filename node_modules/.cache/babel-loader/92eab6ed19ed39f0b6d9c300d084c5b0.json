{"ast":null,"code":"var _jsxFileName = \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/pages/MyThreads.tsx\",\n    _s = $RefreshSig$();\n\nimport '../App.css';\nimport ThreadMainPost from '../components/ThreadMainPost';\nimport Stack from '@mui/material/Stack';\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyThreads = _ref => {\n  _s();\n\n  let {\n    threadResults\n  } = _ref;\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [threads, setThreads] = useState(threadResults);\n  useEffect(() => {\n    const user = fetch(\"http://localhost:3000/thread_pages\", {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user\n      })\n    }).then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setThreads(result);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, [threadResults]);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 16\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '50vw',\n        margin: 'auto',\n        textAlign: 'center',\n        paddingTop: \"30px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 2,\n        children: threads.map(thread => /*#__PURE__*/_jsxDEV(ThreadMainPost, {\n          toOverflow: true,\n          thread: thread\n        }, thread.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(MyThreads, \"vTm7AaQ8J5m0OS1MNbjP0KBWIVA=\");\n\n_c = MyThreads;\nexport default MyThreads;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyThreads\");","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/pages/MyThreads.tsx"],"names":["ThreadMainPost","Stack","React","useEffect","useState","MyThreads","threadResults","error","setError","isLoaded","setIsLoaded","threads","setThreads","user","fetch","method","mode","headers","body","JSON","stringify","then","res","json","result","message","width","margin","textAlign","paddingTop","map","thread","id"],"mappings":";;;AAAA,OAAO,YAAP;AACA,OAAOA,cAAP,MAA2B,8BAA3B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAGA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAMA,MAAMC,SAA0B,GAAG,QAA8B;AAAA;;AAAA,MAA7B;AAAEC,IAAAA;AAAF,GAA6B;AAE7D,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAM,IAAN,CAAlC;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAU,KAAV,CAAxC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAWE,aAAX,CAAtC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,IAAI,GACVC,KAAK,CAAC,oCAAD,EAAuC;AACxCC,MAAAA,MAAM,EAAE,MADgC;AAExCC,MAAAA,IAAI,EAAE,MAFkC;AAGxCC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAH+B;AAMxCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBP,QAAAA;AADiB,OAAf;AANkC,KAAvC,CAAL,CAUKQ,IAVL,CAUUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAVjB,EAWKF,IAXL,CAYSG,MAAD,IAAY;AACRd,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,UAAU,CAACY,MAAD,CAAV;AACH,KAfT,EAgBQ;AACA;AACA;AACCjB,IAAAA,KAAD,IAAW;AACPG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,KAtBT,CADA;AAyBH,GA1BQ,EA0BN,CAACD,aAAD,CA1BM,CAAT;;AA4BA,MAAIC,KAAJ,EAAW;AACP,wBAAO;AAAA,4BAAaA,KAAK,CAACkB,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFD,MAEO,IAAI,CAAChB,QAAL,EAAe;AAClB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFM,MAEA;AACH,wBACI;AAAK,MAAA,KAAK,EAAE;AAAEiB,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,MAAM,EAAE,MAAzB;AAAiCC,QAAAA,SAAS,EAAE,QAA5C;AAAsDC,QAAAA,UAAU,EAAE;AAAlE,OAAZ;AAAA,6BACI,QAAC,KAAD;AAAO,QAAA,OAAO,EAAE,CAAhB;AAAA,kBACMlB,OAAO,CAACmB,GAAR,CAAYC,MAAM,iBAChB,QAAC,cAAD;AAAgB,UAAA,UAAU,EAAE,IAA5B;AAAkC,UAAA,MAAM,EAAEA;AAA1C,WAAuDA,MAAM,CAACC,EAA9D;AAAA;AAAA;AAAA;AAAA,gBADF;AADN;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;AACJ,CAjDD;;GAAM3B,S;;KAAAA,S;AAmDN,eAAeA,SAAf","sourcesContent":["import '../App.css';\nimport ThreadMainPost from '../components/ThreadMainPost';\nimport Stack from '@mui/material/Stack';\nimport { Thread } from '../types/Thread';\n\nimport React, { useEffect, useState } from 'react';\n\ntype Props = {\n    threadResults: Thread[];\n}\n\nconst MyThreads: React.FC<Props> = ({ threadResults }: Props) => {\n\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [threads, setThreads] = useState<Thread[]>(threadResults);\n\n    useEffect(() => {\n        const user = \n        fetch(\"http://localhost:3000/thread_pages\", {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                user,\n            }),\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setThreads(result);\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            )\n    }, [threadResults]);\n    \n    if (error) {\n        return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div>Loading...</div>;\n    } else {\n        return (\n            <div style={{ width: '50vw', margin: 'auto', textAlign: 'center', paddingTop: \"30px\" }}>\n                <Stack spacing={2}>\n                    { threads.map(thread => (\n                        <ThreadMainPost toOverflow={true} thread={thread} key={thread.id}/>\n                    ))}\n                </Stack>\n            </div>\n        );\n    }\n};\n\nexport default MyThreads;\n"]},"metadata":{},"sourceType":"module"}