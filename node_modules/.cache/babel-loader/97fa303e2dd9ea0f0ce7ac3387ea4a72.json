{"ast":null,"code":"import _slicedToArray from \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"onChange\", \"maxRows\", \"minRows\", \"style\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { flushSync } from 'react-dom';\nimport { unstable_debounce as debounce, unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction getStyleValue(computedStyle, property) {\n  return parseInt(computedStyle[property], 10) || 0;\n}\n\nvar styles = {\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\n\nfunction isEmpty(obj) {\n  return obj === undefined || obj === null || Object.keys(obj).length === 0;\n}\n\nvar TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, ref) {\n  var onChange = props.onChange,\n      maxRows = props.maxRows,\n      _props$minRows = props.minRows,\n      minRows = _props$minRows === void 0 ? 1 : _props$minRows,\n      style = props.style,\n      value = props.value,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var _React$useRef = React.useRef(value != null),\n      isControlled = _React$useRef.current;\n\n  var inputRef = React.useRef(null);\n  var handleRef = useForkRef(ref, inputRef);\n  var shadowRef = React.useRef(null);\n  var renders = React.useRef(0);\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var getUpdatedState = React.useCallback(function () {\n    var input = inputRef.current;\n    var containerWindow = ownerWindow(input);\n    var computedStyle = containerWindow.getComputedStyle(input); // If input's width is shrunk and it's not visible, don't sync height.\n\n    if (computedStyle.width === '0px') {\n      return {};\n    }\n\n    var inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n\n    var boxSizing = computedStyle['box-sizing'];\n    var padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');\n    var border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width'); // The height of the inner content\n\n    var innerHeight = inputShallow.scrollHeight; // Measure height of a textarea with a single row\n\n    inputShallow.value = 'x';\n    var singleRowHeight = inputShallow.scrollHeight; // The height of the outer content\n\n    var outerHeight = innerHeight;\n\n    if (minRows) {\n      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);\n    }\n\n    if (maxRows) {\n      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);\n    }\n\n    outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.\n\n    var outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    var overflow = Math.abs(outerHeight - innerHeight) <= 1;\n    return {\n      outerHeightStyle: outerHeightStyle,\n      overflow: overflow\n    };\n  }, [maxRows, minRows, props.placeholder]);\n\n  var updateState = function updateState(prevState, newState) {\n    var outerHeightStyle = newState.outerHeightStyle,\n        overflow = newState.overflow; // Need a large enough difference to update the height.\n    // This prevents infinite rendering loop.\n\n    if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {\n      renders.current += 1;\n      return {\n        overflow: overflow,\n        outerHeightStyle: outerHeightStyle\n      };\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (renders.current === 20) {\n        console.error(['MUI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\\n'));\n      }\n    }\n\n    return prevState;\n  };\n\n  var syncHeight = React.useCallback(function () {\n    var newState = getUpdatedState();\n\n    if (isEmpty(newState)) {\n      return;\n    }\n\n    setState(function (prevState) {\n      return updateState(prevState, newState);\n    });\n  }, [getUpdatedState]);\n\n  var syncHeightWithFlushSycn = function syncHeightWithFlushSycn() {\n    var newState = getUpdatedState();\n\n    if (isEmpty(newState)) {\n      return;\n    } // In React 18, state updates in a ResizeObserver's callback are happening after the paint which causes flickering\n    // when doing some visual updates in it. Using flushSync ensures that the dom will be painted after the states updates happen\n    // Related issue - https://github.com/facebook/react/issues/24331\n\n\n    flushSync(function () {\n      setState(function (prevState) {\n        return updateState(prevState, newState);\n      });\n    });\n  };\n\n  React.useEffect(function () {\n    var handleResize = debounce(function () {\n      renders.current = 0; // If the TextareaAutosize component is replaced by Suspense with a fallback, the last\n      // ResizeObserver's handler that runs because of the change in the layout is trying to\n      // access a dom node that is no longer there (as the fallback component is being shown instead).\n      // See https://github.com/mui/material-ui/issues/32640\n\n      if (inputRef.current) {\n        syncHeightWithFlushSycn();\n      }\n    });\n    var containerWindow = ownerWindow(inputRef.current);\n    containerWindow.addEventListener('resize', handleResize);\n    var resizeObserver;\n\n    if (typeof ResizeObserver !== 'undefined') {\n      resizeObserver = new ResizeObserver(handleResize);\n      resizeObserver.observe(inputRef.current);\n    }\n\n    return function () {\n      handleResize.clear();\n      containerWindow.removeEventListener('resize', handleResize);\n\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  });\n  useEnhancedEffect(function () {\n    syncHeight();\n  });\n  React.useEffect(function () {\n    renders.current = 0;\n  }, [value]);\n\n  var handleChange = function handleChange(event) {\n    renders.current = 0;\n\n    if (!isControlled) {\n      syncHeight();\n    }\n\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"textarea\", _extends({\n      value: value,\n      onChange: handleChange,\n      ref: handleRef // Apply the rows prop to get a \"correct\" first SSR paint\n      ,\n      rows: minRows,\n      style: _extends({\n        height: state.outerHeightStyle,\n        // Need a large enough difference to allow scrolling.\n        // This prevents infinite rendering loop.\n        overflow: state.overflow ? 'hidden' : null\n      }, style)\n    }, other)), /*#__PURE__*/_jsx(\"textarea\", {\n      \"aria-hidden\": true,\n      className: props.className,\n      readOnly: true,\n      ref: shadowRef,\n      tabIndex: -1,\n      style: _extends({}, styles.shadow, style, {\n        padding: 0\n      })\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Maximum number of rows to display.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Minimum number of rows to display.\n   * @default 1\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])\n} : void 0;\nexport default TextareaAutosize;","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/node_modules/@mui/base/TextareaAutosize/TextareaAutosize.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","flushSync","unstable_debounce","debounce","unstable_useForkRef","useForkRef","unstable_useEnhancedEffect","useEnhancedEffect","unstable_ownerWindow","ownerWindow","jsx","_jsx","jsxs","_jsxs","getStyleValue","computedStyle","property","parseInt","styles","shadow","visibility","position","overflow","height","top","left","transform","isEmpty","obj","undefined","Object","keys","length","TextareaAutosize","forwardRef","props","ref","onChange","maxRows","minRows","style","value","other","useRef","isControlled","current","inputRef","handleRef","shadowRef","renders","useState","state","setState","getUpdatedState","useCallback","input","containerWindow","getComputedStyle","width","inputShallow","placeholder","slice","boxSizing","padding","border","innerHeight","scrollHeight","singleRowHeight","outerHeight","Math","max","Number","min","outerHeightStyle","abs","updateState","prevState","newState","process","env","NODE_ENV","console","error","join","syncHeight","syncHeightWithFlushSycn","useEffect","handleResize","addEventListener","resizeObserver","ResizeObserver","observe","clear","removeEventListener","disconnect","handleChange","event","Fragment","children","rows","className","readOnly","tabIndex","propTypes","string","oneOfType","number","func","object","arrayOf"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onChange\", \"maxRows\", \"minRows\", \"style\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { flushSync } from 'react-dom';\nimport { unstable_debounce as debounce, unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction getStyleValue(computedStyle, property) {\n  return parseInt(computedStyle[property], 10) || 0;\n}\nconst styles = {\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\nfunction isEmpty(obj) {\n  return obj === undefined || obj === null || Object.keys(obj).length === 0;\n}\nconst TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, ref) {\n  const {\n      onChange,\n      maxRows,\n      minRows = 1,\n      style,\n      value\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    current: isControlled\n  } = React.useRef(value != null);\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(ref, inputRef);\n  const shadowRef = React.useRef(null);\n  const renders = React.useRef(0);\n  const [state, setState] = React.useState({});\n  const getUpdatedState = React.useCallback(() => {\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    const computedStyle = containerWindow.getComputedStyle(input);\n\n    // If input's width is shrunk and it's not visible, don't sync height.\n    if (computedStyle.width === '0px') {\n      return {};\n    }\n    const inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n    const boxSizing = computedStyle['box-sizing'];\n    const padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');\n    const border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width');\n\n    // The height of the inner content\n    const innerHeight = inputShallow.scrollHeight;\n\n    // Measure height of a textarea with a single row\n    inputShallow.value = 'x';\n    const singleRowHeight = inputShallow.scrollHeight;\n\n    // The height of the outer content\n    let outerHeight = innerHeight;\n    if (minRows) {\n      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);\n    }\n    if (maxRows) {\n      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);\n    }\n    outerHeight = Math.max(outerHeight, singleRowHeight);\n\n    // Take the box sizing into account for applying this value as a style.\n    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    const overflow = Math.abs(outerHeight - innerHeight) <= 1;\n    return {\n      outerHeightStyle,\n      overflow\n    };\n  }, [maxRows, minRows, props.placeholder]);\n  const updateState = (prevState, newState) => {\n    const {\n      outerHeightStyle,\n      overflow\n    } = newState;\n    // Need a large enough difference to update the height.\n    // This prevents infinite rendering loop.\n    if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {\n      renders.current += 1;\n      return {\n        overflow,\n        outerHeightStyle\n      };\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (renders.current === 20) {\n        console.error(['MUI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\\n'));\n      }\n    }\n    return prevState;\n  };\n  const syncHeight = React.useCallback(() => {\n    const newState = getUpdatedState();\n    if (isEmpty(newState)) {\n      return;\n    }\n    setState(prevState => {\n      return updateState(prevState, newState);\n    });\n  }, [getUpdatedState]);\n  const syncHeightWithFlushSycn = () => {\n    const newState = getUpdatedState();\n    if (isEmpty(newState)) {\n      return;\n    }\n\n    // In React 18, state updates in a ResizeObserver's callback are happening after the paint which causes flickering\n    // when doing some visual updates in it. Using flushSync ensures that the dom will be painted after the states updates happen\n    // Related issue - https://github.com/facebook/react/issues/24331\n    flushSync(() => {\n      setState(prevState => {\n        return updateState(prevState, newState);\n      });\n    });\n  };\n  React.useEffect(() => {\n    const handleResize = debounce(() => {\n      renders.current = 0;\n\n      // If the TextareaAutosize component is replaced by Suspense with a fallback, the last\n      // ResizeObserver's handler that runs because of the change in the layout is trying to\n      // access a dom node that is no longer there (as the fallback component is being shown instead).\n      // See https://github.com/mui/material-ui/issues/32640\n      if (inputRef.current) {\n        syncHeightWithFlushSycn();\n      }\n    });\n    const containerWindow = ownerWindow(inputRef.current);\n    containerWindow.addEventListener('resize', handleResize);\n    let resizeObserver;\n    if (typeof ResizeObserver !== 'undefined') {\n      resizeObserver = new ResizeObserver(handleResize);\n      resizeObserver.observe(inputRef.current);\n    }\n    return () => {\n      handleResize.clear();\n      containerWindow.removeEventListener('resize', handleResize);\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  });\n  useEnhancedEffect(() => {\n    syncHeight();\n  });\n  React.useEffect(() => {\n    renders.current = 0;\n  }, [value]);\n  const handleChange = event => {\n    renders.current = 0;\n    if (!isControlled) {\n      syncHeight();\n    }\n    if (onChange) {\n      onChange(event);\n    }\n  };\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"textarea\", _extends({\n      value: value,\n      onChange: handleChange,\n      ref: handleRef\n      // Apply the rows prop to get a \"correct\" first SSR paint\n      ,\n      rows: minRows,\n      style: _extends({\n        height: state.outerHeightStyle,\n        // Need a large enough difference to allow scrolling.\n        // This prevents infinite rendering loop.\n        overflow: state.overflow ? 'hidden' : null\n      }, style)\n    }, other)), /*#__PURE__*/_jsx(\"textarea\", {\n      \"aria-hidden\": true,\n      className: props.className,\n      readOnly: true,\n      ref: shadowRef,\n      tabIndex: -1,\n      style: _extends({}, styles.shadow, style, {\n        padding: 0\n      })\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Maximum number of rows to display.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Minimum number of rows to display.\n   * @default 1\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])\n} : void 0;\nexport default TextareaAutosize;"]},"metadata":{},"sourceType":"module"}