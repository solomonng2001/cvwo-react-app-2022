{"ast":null,"code":"var _jsxFileName = \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/AvatarUserTimeTags.tsx\";\nimport React from 'react';\nimport { Grid, Chip, Typography } from '@material-ui/core';\nimport Avatar from '@mui/material/Avatar';\nimport moment from 'moment';\nimport Stack from '@mui/material/Stack';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// layout of user avatar, username, datae and time, and tags\nconst AvatarUserTimeTags = _ref => {\n  let {\n    tagged,\n    user,\n    time,\n    tags\n  } = _ref;\n\n  // if tags to be displayed (for threads)\n  if (tagged) {\n    // empty array if tags is empty (so that tags array will not display empty chip)\n    const tagsArray = tags === \"\" ? [] : tags.split(\",\");\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          direction: \"row\",\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Avatar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Stack, {\n            direction: \"column\",\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              align: \"left\",\n              variant: \"h5\",\n              children: user\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              align: \"left\",\n              variant: \"subtitle1\",\n              color: \"textSecondary\",\n              children: moment(time).fromNow()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        container: true,\n        xs: 6,\n        direction: \"row\",\n        spacing: 1,\n        justifyContent: \"flex-end\",\n        alignItems: \"flex-start\",\n        children: tagsArray.map((tag, index) => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Chip, {\n            label: tag\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this);\n  } // Without tags (for comments)\n\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        direction: \"row\",\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          direction: \"column\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            align: \"left\",\n            variant: \"h5\",\n            children: user\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            align: \"left\",\n            variant: \"subtitle1\",\n            color: \"textSecondary\",\n            children: moment(time).fromNow()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_c = AvatarUserTimeTags;\nexport default AvatarUserTimeTags;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvatarUserTimeTags\");","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/AvatarUserTimeTags.tsx"],"names":["React","Grid","Chip","Typography","Avatar","moment","Stack","AvatarUserTimeTags","tagged","user","time","tags","tagsArray","split","fromNow","map","tag","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Grid, Chip, Typography } from '@material-ui/core';\nimport Avatar from '@mui/material/Avatar';\nimport moment from 'moment';\nimport Stack from '@mui/material/Stack';\n\ntype Props = {\n    tagged: boolean;\n    user: string;\n    time: Date;\n    tags: string;\n};\n\n// layout of user avatar, username, datae and time, and tags\nconst AvatarUserTimeTags: React.FC<Props> = ({ tagged, user, time, tags }: Props) => {\n\n    // if tags to be displayed (for threads)\n    if (tagged) {\n        // empty array if tags is empty (so that tags array will not display empty chip)\n        const tagsArray = tags === \"\" ? [] : tags.split(\",\");\n        return (\n            <Grid container>\n                <Grid item xs={6}>\n                    <Stack direction='row' spacing={2}>\n                        <Avatar/>\n                        <Stack direction='column'>\n                            <Typography align='left' variant='h5'>{ user }</Typography>\n                            <Typography align='left' variant='subtitle1' color='textSecondary'>{moment(time).fromNow()}</Typography>\n                        </Stack>\n                    </Stack>\n                </Grid>\n                <Grid item container xs={6} direction='row' spacing={1} justifyContent='flex-end' alignItems='flex-start'>\n                    { tagsArray.map((tag, index) =>\n                        <Grid item key={index}>\n                            <Chip label={tag} />\n                        </Grid>\n                    )}\n                </Grid>\n            </Grid>\n        );\n    }\n\n    // Without tags (for comments)\n    return (\n        <Grid container>\n            <Grid item xs={6}>\n                <Stack direction='row' spacing={2}>\n                    <Avatar/>\n                    <Stack direction='column'>\n                        <Typography align='left' variant='h5'>{ user }</Typography>\n                        <Typography align='left' variant='subtitle1' color='textSecondary'>{moment(time).fromNow()}</Typography>\n                    </Stack>\n                </Stack>\n            </Grid>\n            <Grid item xs={6}>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default AvatarUserTimeTags;"]},"metadata":{},"sourceType":"module"}