{"ast":null,"code":"import _slicedToArray from \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"autoFocus\", \"children\", \"component\", \"defaultValue\", \"defaultListboxOpen\", \"disabled\", \"getSerializedValue\", \"listboxId\", \"listboxOpen\", \"name\", \"onChange\", \"onListboxOpenChange\", \"optionStringifier\", \"renderValue\", \"slotProps\", \"slots\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef, unstable_useControlled as useControlled } from '@mui/utils';\nimport { flattenOptionGroups, getOptionsFromChildren } from './utils';\nimport useSelect from './useSelect';\nimport { useSlotProps } from '../utils';\nimport PopperUnstyled from '../PopperUnstyled';\nimport { SelectUnstyledContext } from './SelectUnstyledContext';\nimport composeClasses from '../composeClasses';\nimport { getSelectUnstyledUtilityClass } from './selectUnstyledClasses';\nimport defaultOptionStringifier from './defaultOptionStringifier';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction defaultRenderSingleValue(selectedOption) {\n  var _selectedOption$label;\n\n  return (_selectedOption$label = selectedOption == null ? void 0 : selectedOption.label) != null ? _selectedOption$label : '';\n}\n\nfunction defaultFormValueProvider(selectedOption) {\n  if ((selectedOption == null ? void 0 : selectedOption.value) == null) {\n    return '';\n  }\n\n  if (typeof selectedOption.value === 'string' || typeof selectedOption.value === 'number') {\n    return selectedOption.value;\n  }\n\n  return JSON.stringify(selectedOption.value);\n}\n\nfunction useUtilityClasses(ownerState) {\n  var active = ownerState.active,\n      disabled = ownerState.disabled,\n      open = ownerState.open,\n      focusVisible = ownerState.focusVisible;\n  var slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active', open && 'expanded'],\n    listbox: ['listbox', disabled && 'disabled'],\n    popper: ['popper']\n  };\n  return composeClasses(slots, getSelectUnstyledUtilityClass, {});\n}\n/**\n * The foundation for building custom-styled select components.\n *\n * Demos:\n *\n * - [Unstyled Select](https://mui.com/base/react-select/)\n *\n * API:\n *\n * - [SelectUnstyled API](https://mui.com/base/api/select-unstyled/)\n */\n\n\nvar SelectUnstyled = /*#__PURE__*/React.forwardRef(function SelectUnstyled(props, forwardedRef) {\n  var _ref, _slots$listbox, _slots$popper;\n\n  var autoFocus = props.autoFocus,\n      children = props.children,\n      component = props.component,\n      defaultValue = props.defaultValue,\n      _props$defaultListbox = props.defaultListboxOpen,\n      defaultListboxOpen = _props$defaultListbox === void 0 ? false : _props$defaultListbox,\n      disabledProp = props.disabled,\n      _props$getSerializedV = props.getSerializedValue,\n      getSerializedValue = _props$getSerializedV === void 0 ? defaultFormValueProvider : _props$getSerializedV,\n      listboxId = props.listboxId,\n      listboxOpenProp = props.listboxOpen,\n      name = props.name,\n      onChange = props.onChange,\n      onListboxOpenChange = props.onListboxOpenChange,\n      _props$optionStringif = props.optionStringifier,\n      optionStringifier = _props$optionStringif === void 0 ? defaultOptionStringifier : _props$optionStringif,\n      renderValueProp = props.renderValue,\n      _props$slotProps = props.slotProps,\n      slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n      _props$slots = props.slots,\n      slots = _props$slots === void 0 ? {} : _props$slots,\n      valueProp = props.value,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var renderValue = renderValueProp != null ? renderValueProp : defaultRenderSingleValue;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      groupedOptions = _React$useState2[0],\n      setGroupedOptions = _React$useState2[1];\n\n  var options = React.useMemo(function () {\n    return flattenOptionGroups(groupedOptions);\n  }, [groupedOptions]);\n\n  var _useControlled = useControlled({\n    controlled: listboxOpenProp,\n    default: defaultListboxOpen,\n    name: 'SelectUnstyled',\n    state: 'listboxOpen'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      listboxOpen = _useControlled2[0],\n      setListboxOpen = _useControlled2[1];\n\n  React.useEffect(function () {\n    setGroupedOptions(getOptionsFromChildren(children));\n  }, [children]);\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      buttonDefined = _React$useState4[0],\n      setButtonDefined = _React$useState4[1];\n\n  var buttonRef = React.useRef(null);\n  var listboxRef = React.useRef(null);\n  var Button = (_ref = component != null ? component : slots.root) != null ? _ref : 'button';\n  var ListboxRoot = (_slots$listbox = slots.listbox) != null ? _slots$listbox : 'ul';\n  var Popper = (_slots$popper = slots.popper) != null ? _slots$popper : PopperUnstyled;\n  var handleButtonRefChange = React.useCallback(function (element) {\n    setButtonDefined(element != null);\n  }, []);\n  var handleButtonRef = useForkRef(forwardedRef, buttonRef, handleButtonRefChange);\n  React.useEffect(function () {\n    if (autoFocus) {\n      buttonRef.current.focus();\n    }\n  }, [autoFocus]);\n\n  var handleOpenChange = function handleOpenChange(isOpen) {\n    setListboxOpen(isOpen);\n    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);\n  };\n\n  var _useSelect = useSelect({\n    buttonRef: handleButtonRef,\n    defaultValue: defaultValue,\n    disabled: disabledProp,\n    listboxId: listboxId,\n    multiple: false,\n    onChange: onChange,\n    onOpenChange: handleOpenChange,\n    open: listboxOpen,\n    options: options,\n    optionStringifier: optionStringifier,\n    value: valueProp\n  }),\n      buttonActive = _useSelect.buttonActive,\n      buttonFocusVisible = _useSelect.buttonFocusVisible,\n      disabled = _useSelect.disabled,\n      getButtonProps = _useSelect.getButtonProps,\n      getListboxProps = _useSelect.getListboxProps,\n      getOptionProps = _useSelect.getOptionProps,\n      getOptionState = _useSelect.getOptionState,\n      value = _useSelect.value;\n\n  var ownerState = _extends({}, props, {\n    active: buttonActive,\n    defaultListboxOpen: defaultListboxOpen,\n    disabled: disabled,\n    focusVisible: buttonFocusVisible,\n    open: listboxOpen,\n    renderValue: renderValue,\n    value: value\n  });\n\n  var classes = useUtilityClasses(ownerState);\n  var selectedOption = React.useMemo(function () {\n    var _options$find;\n\n    return (_options$find = options.find(function (o) {\n      return value === o.value;\n    })) != null ? _options$find : null;\n  }, [options, value]);\n  var buttonProps = useSlotProps({\n    elementType: Button,\n    getSlotProps: getButtonProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    ownerState: ownerState,\n    className: classes.root\n  });\n  var listboxProps = useSlotProps({\n    elementType: ListboxRoot,\n    getSlotProps: getListboxProps,\n    externalSlotProps: slotProps.listbox,\n    additionalProps: {\n      ref: listboxRef\n    },\n    ownerState: ownerState,\n    className: classes.listbox\n  });\n  var popperProps = useSlotProps({\n    elementType: Popper,\n    externalSlotProps: slotProps.popper,\n    additionalProps: {\n      anchorEl: buttonRef.current,\n      disablePortal: true,\n      open: listboxOpen,\n      placement: 'bottom-start',\n      role: undefined\n    },\n    ownerState: ownerState,\n    className: classes.popper\n  });\n  var context = React.useMemo(function () {\n    return {\n      getOptionProps: getOptionProps,\n      getOptionState: getOptionState,\n      listboxRef: listboxRef\n    };\n  }, [getOptionProps, getOptionState]);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Button, _extends({}, buttonProps, {\n      children: renderValue(selectedOption)\n    })), buttonDefined && /*#__PURE__*/_jsx(Popper, _extends({}, popperProps, {\n      children: /*#__PURE__*/_jsx(ListboxRoot, _extends({}, listboxProps, {\n        children: /*#__PURE__*/_jsx(SelectUnstyledContext.Provider, {\n          value: context,\n          children: children\n        })\n      }))\n    })), name && /*#__PURE__*/_jsx(\"input\", {\n      type: \"hidden\",\n      name: name,\n      value: getSerializedValue(selectedOption)\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SelectUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the select element is focused during the first mount\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the select will be initially open.\n   * @default false\n   */\n  defaultListboxOpen: PropTypes.bool,\n\n  /**\n   * The default selected value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the select is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * A function to convert the currently selected value to a string.\n   * Used to set a value of a hidden input associated with the select,\n   * so that the selected value can be posted with a form.\n   */\n  getSerializedValue: PropTypes.func,\n\n  /**\n   * `id` attribute of the listbox element.\n   * Also used to derive the `id` attributes of options.\n   */\n  listboxId: PropTypes.string,\n\n  /**\n   * Controls the open state of the select's listbox.\n   * @default undefined\n   */\n  listboxOpen: PropTypes.bool,\n\n  /**\n   * Name of the element. For example used by the server to identify the fields in form submits.\n   * If the name is provided, the component will render a hidden input element that can be submitted to a server.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when an option is selected.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see listboxOpen).\n   */\n  onListboxOpenChange: PropTypes.func,\n\n  /**\n   * A function used to convert the option label to a string.\n   * It's useful when labels are elements and need to be converted to plain text\n   * to enable navigation using character keys on a keyboard.\n   *\n   * @default defaultOptionStringifier\n   */\n  optionStringifier: PropTypes.func,\n\n  /**\n   * Function that customizes the rendering of the selected value.\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * The props used for each slot inside the Input.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the Select.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    listbox: PropTypes.elementType,\n    popper: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n\n  /**\n   * The selected value.\n   * Set to `null` to deselect all options.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default SelectUnstyled;","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/node_modules/@mui/base/SelectUnstyled/SelectUnstyled.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","unstable_useForkRef","useForkRef","unstable_useControlled","useControlled","flattenOptionGroups","getOptionsFromChildren","useSelect","useSlotProps","PopperUnstyled","SelectUnstyledContext","composeClasses","getSelectUnstyledUtilityClass","defaultOptionStringifier","jsx","_jsx","jsxs","_jsxs","defaultRenderSingleValue","selectedOption","_selectedOption$label","label","defaultFormValueProvider","value","JSON","stringify","useUtilityClasses","ownerState","active","disabled","open","focusVisible","slots","root","listbox","popper","SelectUnstyled","forwardRef","props","forwardedRef","_ref","_slots$listbox","_slots$popper","autoFocus","children","component","defaultValue","defaultListboxOpen","disabledProp","getSerializedValue","listboxId","listboxOpenProp","listboxOpen","name","onChange","onListboxOpenChange","optionStringifier","renderValueProp","renderValue","slotProps","valueProp","other","useState","groupedOptions","setGroupedOptions","options","useMemo","controlled","default","state","setListboxOpen","useEffect","buttonDefined","setButtonDefined","buttonRef","useRef","listboxRef","Button","ListboxRoot","Popper","handleButtonRefChange","useCallback","element","handleButtonRef","current","focus","handleOpenChange","isOpen","multiple","onOpenChange","buttonActive","buttonFocusVisible","getButtonProps","getListboxProps","getOptionProps","getOptionState","classes","_options$find","find","o","buttonProps","elementType","getSlotProps","externalSlotProps","externalForwardedProps","className","listboxProps","additionalProps","ref","popperProps","anchorEl","disablePortal","placement","role","undefined","context","Fragment","Provider","type","process","env","NODE_ENV","propTypes","bool","node","any","func","string","shape","oneOfType","object"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,IAAMC,SAAS,GAAG,CAAC,WAAD,EAAc,UAAd,EAA0B,WAA1B,EAAuC,cAAvC,EAAuD,oBAAvD,EAA6E,UAA7E,EAAyF,oBAAzF,EAA+G,WAA/G,EAA4H,aAA5H,EAA2I,MAA3I,EAAmJ,UAAnJ,EAA+J,qBAA/J,EAAsL,mBAAtL,EAA2M,aAA3M,EAA0N,WAA1N,EAAuO,OAAvO,EAAgP,OAAhP,CAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,mBAAmB,IAAIC,UAAhC,EAA4CC,sBAAsB,IAAIC,aAAtE,QAA2F,YAA3F;AACA,SAASC,mBAAT,EAA8BC,sBAA9B,QAA4D,SAA5D;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,YAAT,QAA6B,UAA7B;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,SAASC,6BAAT,QAA8C,yBAA9C;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,SAASC,IAAI,IAAIC,KAAjB,QAA8B,mBAA9B;;AACA,SAASC,wBAAT,CAAkCC,cAAlC,EAAkD;AAChD,MAAIC,qBAAJ;;AACA,SAAO,CAACA,qBAAqB,GAAGD,cAAc,IAAI,IAAlB,GAAyB,KAAK,CAA9B,GAAkCA,cAAc,CAACE,KAA1E,KAAoF,IAApF,GAA2FD,qBAA3F,GAAmH,EAA1H;AACD;;AACD,SAASE,wBAAT,CAAkCH,cAAlC,EAAkD;AAChD,MAAI,CAACA,cAAc,IAAI,IAAlB,GAAyB,KAAK,CAA9B,GAAkCA,cAAc,CAACI,KAAlD,KAA4D,IAAhE,EAAsE;AACpE,WAAO,EAAP;AACD;;AACD,MAAI,OAAOJ,cAAc,CAACI,KAAtB,KAAgC,QAAhC,IAA4C,OAAOJ,cAAc,CAACI,KAAtB,KAAgC,QAAhF,EAA0F;AACxF,WAAOJ,cAAc,CAACI,KAAtB;AACD;;AACD,SAAOC,IAAI,CAACC,SAAL,CAAeN,cAAc,CAACI,KAA9B,CAAP;AACD;;AACD,SAASG,iBAAT,CAA2BC,UAA3B,EAAuC;AACrC,MACEC,MADF,GAKID,UALJ,CACEC,MADF;AAAA,MAEEC,QAFF,GAKIF,UALJ,CAEEE,QAFF;AAAA,MAGEC,IAHF,GAKIH,UALJ,CAGEG,IAHF;AAAA,MAIEC,YAJF,GAKIJ,UALJ,CAIEI,YAJF;AAMA,MAAMC,KAAK,GAAG;AACZC,IAAAA,IAAI,EAAE,CAAC,MAAD,EAASJ,QAAQ,IAAI,UAArB,EAAiCE,YAAY,IAAI,cAAjD,EAAiEH,MAAM,IAAI,QAA3E,EAAqFE,IAAI,IAAI,UAA7F,CADM;AAEZI,IAAAA,OAAO,EAAE,CAAC,SAAD,EAAYL,QAAQ,IAAI,UAAxB,CAFG;AAGZM,IAAAA,MAAM,EAAE,CAAC,QAAD;AAHI,GAAd;AAKA,SAAOxB,cAAc,CAACqB,KAAD,EAAQpB,6BAAR,EAAuC,EAAvC,CAArB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMwB,cAAc,GAAG,aAAarC,KAAK,CAACsC,UAAN,CAAiB,SAASD,cAAT,CAAwBE,KAAxB,EAA+BC,YAA/B,EAA6C;AAChG,MAAIC,IAAJ,EAAUC,cAAV,EAA0BC,aAA1B;;AACA,MACIC,SADJ,GAkBML,KAlBN,CACIK,SADJ;AAAA,MAEIC,QAFJ,GAkBMN,KAlBN,CAEIM,QAFJ;AAAA,MAGIC,SAHJ,GAkBMP,KAlBN,CAGIO,SAHJ;AAAA,MAIIC,YAJJ,GAkBMR,KAlBN,CAIIQ,YAJJ;AAAA,8BAkBMR,KAlBN,CAKIS,kBALJ;AAAA,MAKIA,kBALJ,sCAKyB,KALzB;AAAA,MAMcC,YANd,GAkBMV,KAlBN,CAMIT,QANJ;AAAA,8BAkBMS,KAlBN,CAOIW,kBAPJ;AAAA,MAOIA,kBAPJ,sCAOyB3B,wBAPzB;AAAA,MAQI4B,SARJ,GAkBMZ,KAlBN,CAQIY,SARJ;AAAA,MASiBC,eATjB,GAkBMb,KAlBN,CASIc,WATJ;AAAA,MAUIC,IAVJ,GAkBMf,KAlBN,CAUIe,IAVJ;AAAA,MAWIC,QAXJ,GAkBMhB,KAlBN,CAWIgB,QAXJ;AAAA,MAYIC,mBAZJ,GAkBMjB,KAlBN,CAYIiB,mBAZJ;AAAA,8BAkBMjB,KAlBN,CAaIkB,iBAbJ;AAAA,MAaIA,iBAbJ,sCAawB3C,wBAbxB;AAAA,MAciB4C,eAdjB,GAkBMnB,KAlBN,CAcIoB,WAdJ;AAAA,yBAkBMpB,KAlBN,CAeIqB,SAfJ;AAAA,MAeIA,SAfJ,iCAegB,EAfhB;AAAA,qBAkBMrB,KAlBN,CAgBIN,KAhBJ;AAAA,MAgBIA,KAhBJ,6BAgBY,EAhBZ;AAAA,MAiBW4B,SAjBX,GAkBMtB,KAlBN,CAiBIf,KAjBJ;AAAA,MAmBEsC,KAnBF,GAmBUhE,6BAA6B,CAACyC,KAAD,EAAQxC,SAAR,CAnBvC;;AAoBA,MAAM4D,WAAW,GAAGD,eAAe,IAAI,IAAnB,GAA0BA,eAA1B,GAA4CvC,wBAAhE;;AACA,wBAA4CnB,KAAK,CAAC+D,QAAN,CAAe,EAAf,CAA5C;AAAA;AAAA,MAAOC,cAAP;AAAA,MAAuBC,iBAAvB;;AACA,MAAMC,OAAO,GAAGlE,KAAK,CAACmE,OAAN,CAAc;AAAA,WAAM7D,mBAAmB,CAAC0D,cAAD,CAAzB;AAAA,GAAd,EAAyD,CAACA,cAAD,CAAzD,CAAhB;;AACA,uBAAsC3D,aAAa,CAAC;AAClD+D,IAAAA,UAAU,EAAEhB,eADsC;AAElDiB,IAAAA,OAAO,EAAErB,kBAFyC;AAGlDM,IAAAA,IAAI,EAAE,gBAH4C;AAIlDgB,IAAAA,KAAK,EAAE;AAJ2C,GAAD,CAAnD;AAAA;AAAA,MAAOjB,WAAP;AAAA,MAAoBkB,cAApB;;AAMAvE,EAAAA,KAAK,CAACwE,SAAN,CAAgB,YAAM;AACpBP,IAAAA,iBAAiB,CAAC1D,sBAAsB,CAACsC,QAAD,CAAvB,CAAjB;AACD,GAFD,EAEG,CAACA,QAAD,CAFH;;AAGA,yBAA0C7C,KAAK,CAAC+D,QAAN,CAAe,KAAf,CAA1C;AAAA;AAAA,MAAOU,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,MAAMC,SAAS,GAAG3E,KAAK,CAAC4E,MAAN,CAAa,IAAb,CAAlB;AACA,MAAMC,UAAU,GAAG7E,KAAK,CAAC4E,MAAN,CAAa,IAAb,CAAnB;AACA,MAAME,MAAM,GAAG,CAACrC,IAAI,GAAGK,SAAS,IAAI,IAAb,GAAoBA,SAApB,GAAgCb,KAAK,CAACC,IAA9C,KAAuD,IAAvD,GAA8DO,IAA9D,GAAqE,QAApF;AACA,MAAMsC,WAAW,GAAG,CAACrC,cAAc,GAAGT,KAAK,CAACE,OAAxB,KAAoC,IAApC,GAA2CO,cAA3C,GAA4D,IAAhF;AACA,MAAMsC,MAAM,GAAG,CAACrC,aAAa,GAAGV,KAAK,CAACG,MAAvB,KAAkC,IAAlC,GAAyCO,aAAzC,GAAyDjC,cAAxE;AACA,MAAMuE,qBAAqB,GAAGjF,KAAK,CAACkF,WAAN,CAAkB,UAAAC,OAAO,EAAI;AACzDT,IAAAA,gBAAgB,CAACS,OAAO,IAAI,IAAZ,CAAhB;AACD,GAF6B,EAE3B,EAF2B,CAA9B;AAGA,MAAMC,eAAe,GAAGjF,UAAU,CAACqC,YAAD,EAAemC,SAAf,EAA0BM,qBAA1B,CAAlC;AACAjF,EAAAA,KAAK,CAACwE,SAAN,CAAgB,YAAM;AACpB,QAAI5B,SAAJ,EAAe;AACb+B,MAAAA,SAAS,CAACU,OAAV,CAAkBC,KAAlB;AACD;AACF,GAJD,EAIG,CAAC1C,SAAD,CAJH;;AAKA,MAAM2C,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,MAAM,EAAI;AACjCjB,IAAAA,cAAc,CAACiB,MAAD,CAAd;AACAhC,IAAAA,mBAAmB,IAAI,IAAvB,GAA8B,KAAK,CAAnC,GAAuCA,mBAAmB,CAACgC,MAAD,CAA1D;AACD,GAHD;;AAIA,mBASIhF,SAAS,CAAC;AACZmE,IAAAA,SAAS,EAAES,eADC;AAEZrC,IAAAA,YAAY,EAAZA,YAFY;AAGZjB,IAAAA,QAAQ,EAAEmB,YAHE;AAIZE,IAAAA,SAAS,EAATA,SAJY;AAKZsC,IAAAA,QAAQ,EAAE,KALE;AAMZlC,IAAAA,QAAQ,EAARA,QANY;AAOZmC,IAAAA,YAAY,EAAEH,gBAPF;AAQZxD,IAAAA,IAAI,EAAEsB,WARM;AASZa,IAAAA,OAAO,EAAPA,OATY;AAUZT,IAAAA,iBAAiB,EAAjBA,iBAVY;AAWZjC,IAAAA,KAAK,EAAEqC;AAXK,GAAD,CATb;AAAA,MACE8B,YADF,cACEA,YADF;AAAA,MAEEC,kBAFF,cAEEA,kBAFF;AAAA,MAGE9D,QAHF,cAGEA,QAHF;AAAA,MAIE+D,cAJF,cAIEA,cAJF;AAAA,MAKEC,eALF,cAKEA,eALF;AAAA,MAMEC,cANF,cAMEA,cANF;AAAA,MAOEC,cAPF,cAOEA,cAPF;AAAA,MAQExE,KARF,cAQEA,KARF;;AAsBA,MAAMI,UAAU,GAAG/B,QAAQ,CAAC,EAAD,EAAK0C,KAAL,EAAY;AACrCV,IAAAA,MAAM,EAAE8D,YAD6B;AAErC3C,IAAAA,kBAAkB,EAAlBA,kBAFqC;AAGrClB,IAAAA,QAAQ,EAARA,QAHqC;AAIrCE,IAAAA,YAAY,EAAE4D,kBAJuB;AAKrC7D,IAAAA,IAAI,EAAEsB,WAL+B;AAMrCM,IAAAA,WAAW,EAAXA,WANqC;AAOrCnC,IAAAA,KAAK,EAALA;AAPqC,GAAZ,CAA3B;;AASA,MAAMyE,OAAO,GAAGtE,iBAAiB,CAACC,UAAD,CAAjC;AACA,MAAMR,cAAc,GAAGpB,KAAK,CAACmE,OAAN,CAAc,YAAM;AACzC,QAAI+B,aAAJ;;AACA,WAAO,CAACA,aAAa,GAAGhC,OAAO,CAACiC,IAAR,CAAa,UAAAC,CAAC;AAAA,aAAI5E,KAAK,KAAK4E,CAAC,CAAC5E,KAAhB;AAAA,KAAd,CAAjB,KAA0D,IAA1D,GAAiE0E,aAAjE,GAAiF,IAAxF;AACD,GAHsB,EAGpB,CAAChC,OAAD,EAAU1C,KAAV,CAHoB,CAAvB;AAIA,MAAM6E,WAAW,GAAG5F,YAAY,CAAC;AAC/B6F,IAAAA,WAAW,EAAExB,MADkB;AAE/ByB,IAAAA,YAAY,EAAEV,cAFiB;AAG/BW,IAAAA,iBAAiB,EAAE5C,SAAS,CAAC1B,IAHE;AAI/BuE,IAAAA,sBAAsB,EAAE3C,KAJO;AAK/BlC,IAAAA,UAAU,EAAVA,UAL+B;AAM/B8E,IAAAA,SAAS,EAAET,OAAO,CAAC/D;AANY,GAAD,CAAhC;AAQA,MAAMyE,YAAY,GAAGlG,YAAY,CAAC;AAChC6F,IAAAA,WAAW,EAAEvB,WADmB;AAEhCwB,IAAAA,YAAY,EAAET,eAFkB;AAGhCU,IAAAA,iBAAiB,EAAE5C,SAAS,CAACzB,OAHG;AAIhCyE,IAAAA,eAAe,EAAE;AACfC,MAAAA,GAAG,EAAEhC;AADU,KAJe;AAOhCjD,IAAAA,UAAU,EAAVA,UAPgC;AAQhC8E,IAAAA,SAAS,EAAET,OAAO,CAAC9D;AARa,GAAD,CAAjC;AAUA,MAAM2E,WAAW,GAAGrG,YAAY,CAAC;AAC/B6F,IAAAA,WAAW,EAAEtB,MADkB;AAE/BwB,IAAAA,iBAAiB,EAAE5C,SAAS,CAACxB,MAFE;AAG/BwE,IAAAA,eAAe,EAAE;AACfG,MAAAA,QAAQ,EAAEpC,SAAS,CAACU,OADL;AAEf2B,MAAAA,aAAa,EAAE,IAFA;AAGfjF,MAAAA,IAAI,EAAEsB,WAHS;AAIf4D,MAAAA,SAAS,EAAE,cAJI;AAKfC,MAAAA,IAAI,EAAEC;AALS,KAHc;AAU/BvF,IAAAA,UAAU,EAAVA,UAV+B;AAW/B8E,IAAAA,SAAS,EAAET,OAAO,CAAC7D;AAXY,GAAD,CAAhC;AAaA,MAAMgF,OAAO,GAAGpH,KAAK,CAACmE,OAAN,CAAc;AAAA,WAAO;AACnC4B,MAAAA,cAAc,EAAdA,cADmC;AAEnCC,MAAAA,cAAc,EAAdA,cAFmC;AAGnCnB,MAAAA,UAAU,EAAVA;AAHmC,KAAP;AAAA,GAAd,EAIZ,CAACkB,cAAD,EAAiBC,cAAjB,CAJY,CAAhB;AAKA,SAAO,aAAa9E,KAAK,CAAClB,KAAK,CAACqH,QAAP,EAAiB;AACxCxE,IAAAA,QAAQ,EAAE,CAAC,aAAa7B,IAAI,CAAC8D,MAAD,EAASjF,QAAQ,CAAC,EAAD,EAAKwG,WAAL,EAAkB;AAC7DxD,MAAAA,QAAQ,EAAEc,WAAW,CAACvC,cAAD;AADwC,KAAlB,CAAjB,CAAlB,EAELqD,aAAa,IAAI,aAAazD,IAAI,CAACgE,MAAD,EAASnF,QAAQ,CAAC,EAAD,EAAKiH,WAAL,EAAkB;AACxEjE,MAAAA,QAAQ,EAAE,aAAa7B,IAAI,CAAC+D,WAAD,EAAclF,QAAQ,CAAC,EAAD,EAAK8G,YAAL,EAAmB;AAClE9D,QAAAA,QAAQ,EAAE,aAAa7B,IAAI,CAACL,qBAAqB,CAAC2G,QAAvB,EAAiC;AAC1D9F,UAAAA,KAAK,EAAE4F,OADmD;AAE1DvE,UAAAA,QAAQ,EAAEA;AAFgD,SAAjC;AADuC,OAAnB,CAAtB;AAD6C,KAAlB,CAAjB,CAF7B,EASLS,IAAI,IAAI,aAAatC,IAAI,CAAC,OAAD,EAAU;AACtCuG,MAAAA,IAAI,EAAE,QADgC;AAEtCjE,MAAAA,IAAI,EAAEA,IAFgC;AAGtC9B,MAAAA,KAAK,EAAE0B,kBAAkB,CAAC9B,cAAD;AAHa,KAAV,CATpB;AAD8B,GAAjB,CAAzB;AAgBD,CA7ImC,CAApC;AA8IAoG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCrF,cAAc,CAACsF;AAAU;AAAzB,EAAkD;AACxF;AACA;AACA;AACA;;AACA;AACF;AACA;AACA;AACE/E,EAAAA,SAAS,EAAE3C,SAAS,CAAC2H,IATmE;;AAUxF;AACF;AACA;AACE/E,EAAAA,QAAQ,EAAE5C,SAAS,CAAC4H,IAboE;;AAcxF;AACF;AACA;AACA;AACE/E,EAAAA,SAAS,EAAE7C,SAAS,CAACqG,WAlBmE;;AAmBxF;AACF;AACA;AACA;AACEtD,EAAAA,kBAAkB,EAAE/C,SAAS,CAAC2H,IAvB0D;;AAwBxF;AACF;AACA;AACE7E,EAAAA,YAAY,EAAE9C,SAAS,CAAC6H,GA3BgE;;AA4BxF;AACF;AACA;AACA;AACEhG,EAAAA,QAAQ,EAAE7B,SAAS,CAAC2H,IAhCoE;;AAiCxF;AACF;AACA;AACA;AACA;AACE1E,EAAAA,kBAAkB,EAAEjD,SAAS,CAAC8H,IAtC0D;;AAuCxF;AACF;AACA;AACA;AACE5E,EAAAA,SAAS,EAAElD,SAAS,CAAC+H,MA3CmE;;AA4CxF;AACF;AACA;AACA;AACE3E,EAAAA,WAAW,EAAEpD,SAAS,CAAC2H,IAhDiE;;AAiDxF;AACF;AACA;AACA;AACEtE,EAAAA,IAAI,EAAErD,SAAS,CAAC+H,MArDwE;;AAsDxF;AACF;AACA;AACEzE,EAAAA,QAAQ,EAAEtD,SAAS,CAAC8H,IAzDoE;;AA0DxF;AACF;AACA;AACA;AACEvE,EAAAA,mBAAmB,EAAEvD,SAAS,CAAC8H,IA9DyD;;AA+DxF;AACF;AACA;AACA;AACA;AACA;AACA;AACEtE,EAAAA,iBAAiB,EAAExD,SAAS,CAAC8H,IAtE2D;;AAuExF;AACF;AACA;AACEpE,EAAAA,WAAW,EAAE1D,SAAS,CAAC8H,IA1EiE;;AA2ExF;AACF;AACA;AACA;AACEnE,EAAAA,SAAS,EAAE3D,SAAS,CAACgI,KAAV,CAAgB;AACzB9F,IAAAA,OAAO,EAAElC,SAAS,CAACiI,SAAV,CAAoB,CAACjI,SAAS,CAAC8H,IAAX,EAAiB9H,SAAS,CAACkI,MAA3B,CAApB,CADgB;AAEzB/F,IAAAA,MAAM,EAAEnC,SAAS,CAACiI,SAAV,CAAoB,CAACjI,SAAS,CAAC8H,IAAX,EAAiB9H,SAAS,CAACkI,MAA3B,CAApB,CAFiB;AAGzBjG,IAAAA,IAAI,EAAEjC,SAAS,CAACiI,SAAV,CAAoB,CAACjI,SAAS,CAAC8H,IAAX,EAAiB9H,SAAS,CAACkI,MAA3B,CAApB;AAHmB,GAAhB,CA/E6E;;AAoFxF;AACF;AACA;AACA;AACA;AACElG,EAAAA,KAAK,EAAEhC;AAAU;AAAD,GAAuCgI,KAAhD,CAAsD;AAC3D9F,IAAAA,OAAO,EAAElC,SAAS,CAACqG,WADwC;AAE3DlE,IAAAA,MAAM,EAAEnC,SAAS,CAACqG,WAFyC;AAG3DpE,IAAAA,IAAI,EAAEjC,SAAS,CAACqG;AAH2C,GAAtD,CAzFiF;;AA8FxF;AACF;AACA;AACA;AACE9E,EAAAA,KAAK,EAAEvB,SAAS,CAAC6H;AAlGuE,CAA1F,GAmGI,KAAK,CAnGT;AAoGA,eAAezF,cAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"autoFocus\", \"children\", \"component\", \"defaultValue\", \"defaultListboxOpen\", \"disabled\", \"getSerializedValue\", \"listboxId\", \"listboxOpen\", \"name\", \"onChange\", \"onListboxOpenChange\", \"optionStringifier\", \"renderValue\", \"slotProps\", \"slots\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef, unstable_useControlled as useControlled } from '@mui/utils';\nimport { flattenOptionGroups, getOptionsFromChildren } from './utils';\nimport useSelect from './useSelect';\nimport { useSlotProps } from '../utils';\nimport PopperUnstyled from '../PopperUnstyled';\nimport { SelectUnstyledContext } from './SelectUnstyledContext';\nimport composeClasses from '../composeClasses';\nimport { getSelectUnstyledUtilityClass } from './selectUnstyledClasses';\nimport defaultOptionStringifier from './defaultOptionStringifier';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction defaultRenderSingleValue(selectedOption) {\n  var _selectedOption$label;\n  return (_selectedOption$label = selectedOption == null ? void 0 : selectedOption.label) != null ? _selectedOption$label : '';\n}\nfunction defaultFormValueProvider(selectedOption) {\n  if ((selectedOption == null ? void 0 : selectedOption.value) == null) {\n    return '';\n  }\n  if (typeof selectedOption.value === 'string' || typeof selectedOption.value === 'number') {\n    return selectedOption.value;\n  }\n  return JSON.stringify(selectedOption.value);\n}\nfunction useUtilityClasses(ownerState) {\n  const {\n    active,\n    disabled,\n    open,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active', open && 'expanded'],\n    listbox: ['listbox', disabled && 'disabled'],\n    popper: ['popper']\n  };\n  return composeClasses(slots, getSelectUnstyledUtilityClass, {});\n}\n\n/**\n * The foundation for building custom-styled select components.\n *\n * Demos:\n *\n * - [Unstyled Select](https://mui.com/base/react-select/)\n *\n * API:\n *\n * - [SelectUnstyled API](https://mui.com/base/api/select-unstyled/)\n */\nconst SelectUnstyled = /*#__PURE__*/React.forwardRef(function SelectUnstyled(props, forwardedRef) {\n  var _ref, _slots$listbox, _slots$popper;\n  const {\n      autoFocus,\n      children,\n      component,\n      defaultValue,\n      defaultListboxOpen = false,\n      disabled: disabledProp,\n      getSerializedValue = defaultFormValueProvider,\n      listboxId,\n      listboxOpen: listboxOpenProp,\n      name,\n      onChange,\n      onListboxOpenChange,\n      optionStringifier = defaultOptionStringifier,\n      renderValue: renderValueProp,\n      slotProps = {},\n      slots = {},\n      value: valueProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const renderValue = renderValueProp != null ? renderValueProp : defaultRenderSingleValue;\n  const [groupedOptions, setGroupedOptions] = React.useState([]);\n  const options = React.useMemo(() => flattenOptionGroups(groupedOptions), [groupedOptions]);\n  const [listboxOpen, setListboxOpen] = useControlled({\n    controlled: listboxOpenProp,\n    default: defaultListboxOpen,\n    name: 'SelectUnstyled',\n    state: 'listboxOpen'\n  });\n  React.useEffect(() => {\n    setGroupedOptions(getOptionsFromChildren(children));\n  }, [children]);\n  const [buttonDefined, setButtonDefined] = React.useState(false);\n  const buttonRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const Button = (_ref = component != null ? component : slots.root) != null ? _ref : 'button';\n  const ListboxRoot = (_slots$listbox = slots.listbox) != null ? _slots$listbox : 'ul';\n  const Popper = (_slots$popper = slots.popper) != null ? _slots$popper : PopperUnstyled;\n  const handleButtonRefChange = React.useCallback(element => {\n    setButtonDefined(element != null);\n  }, []);\n  const handleButtonRef = useForkRef(forwardedRef, buttonRef, handleButtonRefChange);\n  React.useEffect(() => {\n    if (autoFocus) {\n      buttonRef.current.focus();\n    }\n  }, [autoFocus]);\n  const handleOpenChange = isOpen => {\n    setListboxOpen(isOpen);\n    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);\n  };\n  const {\n    buttonActive,\n    buttonFocusVisible,\n    disabled,\n    getButtonProps,\n    getListboxProps,\n    getOptionProps,\n    getOptionState,\n    value\n  } = useSelect({\n    buttonRef: handleButtonRef,\n    defaultValue,\n    disabled: disabledProp,\n    listboxId,\n    multiple: false,\n    onChange,\n    onOpenChange: handleOpenChange,\n    open: listboxOpen,\n    options,\n    optionStringifier,\n    value: valueProp\n  });\n  const ownerState = _extends({}, props, {\n    active: buttonActive,\n    defaultListboxOpen,\n    disabled,\n    focusVisible: buttonFocusVisible,\n    open: listboxOpen,\n    renderValue,\n    value\n  });\n  const classes = useUtilityClasses(ownerState);\n  const selectedOption = React.useMemo(() => {\n    var _options$find;\n    return (_options$find = options.find(o => value === o.value)) != null ? _options$find : null;\n  }, [options, value]);\n  const buttonProps = useSlotProps({\n    elementType: Button,\n    getSlotProps: getButtonProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    ownerState,\n    className: classes.root\n  });\n  const listboxProps = useSlotProps({\n    elementType: ListboxRoot,\n    getSlotProps: getListboxProps,\n    externalSlotProps: slotProps.listbox,\n    additionalProps: {\n      ref: listboxRef\n    },\n    ownerState,\n    className: classes.listbox\n  });\n  const popperProps = useSlotProps({\n    elementType: Popper,\n    externalSlotProps: slotProps.popper,\n    additionalProps: {\n      anchorEl: buttonRef.current,\n      disablePortal: true,\n      open: listboxOpen,\n      placement: 'bottom-start',\n      role: undefined\n    },\n    ownerState,\n    className: classes.popper\n  });\n  const context = React.useMemo(() => ({\n    getOptionProps,\n    getOptionState,\n    listboxRef\n  }), [getOptionProps, getOptionState]);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Button, _extends({}, buttonProps, {\n      children: renderValue(selectedOption)\n    })), buttonDefined && /*#__PURE__*/_jsx(Popper, _extends({}, popperProps, {\n      children: /*#__PURE__*/_jsx(ListboxRoot, _extends({}, listboxProps, {\n        children: /*#__PURE__*/_jsx(SelectUnstyledContext.Provider, {\n          value: context,\n          children: children\n        })\n      }))\n    })), name && /*#__PURE__*/_jsx(\"input\", {\n      type: \"hidden\",\n      name: name,\n      value: getSerializedValue(selectedOption)\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SelectUnstyled.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the select element is focused during the first mount\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the select will be initially open.\n   * @default false\n   */\n  defaultListboxOpen: PropTypes.bool,\n  /**\n   * The default selected value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the select is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * A function to convert the currently selected value to a string.\n   * Used to set a value of a hidden input associated with the select,\n   * so that the selected value can be posted with a form.\n   */\n  getSerializedValue: PropTypes.func,\n  /**\n   * `id` attribute of the listbox element.\n   * Also used to derive the `id` attributes of options.\n   */\n  listboxId: PropTypes.string,\n  /**\n   * Controls the open state of the select's listbox.\n   * @default undefined\n   */\n  listboxOpen: PropTypes.bool,\n  /**\n   * Name of the element. For example used by the server to identify the fields in form submits.\n   * If the name is provided, the component will render a hidden input element that can be submitted to a server.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when an option is selected.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see listboxOpen).\n   */\n  onListboxOpenChange: PropTypes.func,\n  /**\n   * A function used to convert the option label to a string.\n   * It's useful when labels are elements and need to be converted to plain text\n   * to enable navigation using character keys on a keyboard.\n   *\n   * @default defaultOptionStringifier\n   */\n  optionStringifier: PropTypes.func,\n  /**\n   * Function that customizes the rendering of the selected value.\n   */\n  renderValue: PropTypes.func,\n  /**\n   * The props used for each slot inside the Input.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Select.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    listbox: PropTypes.elementType,\n    popper: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\n   * The selected value.\n   * Set to `null` to deselect all options.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default SelectUnstyled;"]},"metadata":{},"sourceType":"module"}