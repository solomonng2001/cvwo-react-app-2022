{"ast":null,"code":"var _jsxFileName = \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/BodyAddHTML.tsx\";\nimport { Typography } from '@material-ui/core';\nimport Stack from '@mui/material/Stack';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst BodyAddHTML = _ref => {\n  let {\n    body,\n    toOverflow\n  } = _ref;\n  const body_array = body.split('\\n').filter(ele => ele !== \"\");\n\n  if (!toOverflow) {\n    return /*#__PURE__*/_jsxDEV(Stack, {\n      direction: \"column\",\n      spacing: 0,\n      children: body_array.map((line, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          align: \"left\",\n          variant: \"body1\",\n          children: line\n        }, index * 2, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, index * 2 + 1, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this);\n  }\n\n  const body_elipsis = body_array.join('...');\n  return /*#__PURE__*/_jsxDEV(Typography, {\n    noWrap: toOverflow,\n    align: \"left\",\n    variant: \"body1\",\n    children: body_elipsis\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n_c = BodyAddHTML;\nexport default BodyAddHTML;\n\nvar _c;\n\n$RefreshReg$(_c, \"BodyAddHTML\");","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/BodyAddHTML.tsx"],"names":["Typography","Stack","React","BodyAddHTML","body","toOverflow","body_array","split","filter","ele","map","line","index","body_elipsis","join"],"mappings":";AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAOA,MAAMC,WAA4B,GAAG,QAAiC;AAAA,MAAhC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAgC;AAClE,QAAMC,UAAoB,GAAGF,IAAI,CAACG,KAAL,CAAW,IAAX,EAAiBC,MAAjB,CAAwBC,GAAG,IAAIA,GAAG,KAAK,EAAvC,CAA7B;;AAEA,MAAI,CAACJ,UAAL,EAAiB;AACb,wBACI,QAAC,KAAD;AAAO,MAAA,SAAS,EAAC,QAAjB;AAA0B,MAAA,OAAO,EAAE,CAAnC;AAAA,gBACMC,UAAU,CAACI,GAAX,CAAe,CAACC,IAAD,EAAOC,KAAP,kBACb;AAAA,gCACI,QAAC,UAAD;AAAY,UAAA,KAAK,EAAC,MAAlB;AAAyB,UAAA,OAAO,EAAC,OAAjC;AAAA,oBACKD;AADL,WAA8CC,KAAK,GAAG,CAAtD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII,kBAASA,KAAK,GAAG,CAAR,GAAY,CAArB;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA,sBADF;AADN;AAAA;AAAA;AAAA;AAAA,YADJ;AAYH;;AAED,QAAMC,YAAY,GAAGP,UAAU,CAACQ,IAAX,CAAgB,KAAhB,CAArB;AACA,sBACI,QAAC,UAAD;AAAY,IAAA,MAAM,EAAET,UAApB;AAAgC,IAAA,KAAK,EAAC,MAAtC;AAA6C,IAAA,OAAO,EAAC,OAArD;AAAA,cACKQ;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAxBD;;KAAMV,W;AA0BN,eAAeA,WAAf","sourcesContent":["import { Typography } from '@material-ui/core';\nimport Stack from '@mui/material/Stack';\n\nimport React from 'react';\n\ntype Props = {\n    toOverflow: boolean;\n    body: string;\n}\n\nconst BodyAddHTML: React.FC<Props> = ({ body, toOverflow }: Props) => {\n    const body_array: string[] = body.split('\\n').filter(ele => ele !== \"\");\n\n    if (!toOverflow) {\n        return (\n            <Stack direction='column' spacing={0}>\n                { body_array.map((line, index) => (\n                    <>\n                        <Typography align='left' variant=\"body1\" key={index * 2}>\n                            {line}\n                        </Typography>\n                        <br key={index * 2 + 1}/>\n                    </>\n                ))}\n            </Stack>\n        );\n    }\n\n    const body_elipsis = body_array.join('...');\n    return (\n        <Typography noWrap={toOverflow} align='left' variant=\"body1\">\n            {body_elipsis}\n        </Typography>\n    );\n};\n\nexport default BodyAddHTML;"]},"metadata":{},"sourceType":"module"}