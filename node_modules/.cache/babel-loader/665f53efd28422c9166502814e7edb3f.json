{"ast":null,"code":"var _jsxFileName = \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/thread/DeleteThread.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle } from '@material-ui/core';\nimport AlertUser from '../AlertUser';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// Delete thread dialog page\nconst DeleteThread = _ref => {\n  _s();\n\n  let {\n    API,\n    openDeleteThread,\n    handleCloseDeleteThread,\n    thread_page_id\n  } = _ref;\n  const [severity, setSeverity] = useState(undefined);\n  const [message, setMessage] = useState([]); // On clicking submit button, delete thread in backend\n\n  const handleSubmitDeleteThread = () => {\n    let new_message = [];\n    fetch(API + \"/thread_pages/\" + thread_page_id.toString(), {\n      method: 'DELETE',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      if (response.ok) {\n        setSeverity('success');\n        new_message.push(\"You have deleted thread!\");\n        setMessage(new_message);\n        const url = window.location.href; // If page before opening dialog was individual threads page (ThreadView page), return to home, since thread deleted\n        // Else, return to page user was on\n\n        setTimeout(url.startsWith(window.location.protocol + \"//\" + window.location.host + \"/thread\") ? () => window.location.replace(window.location.protocol + \"//\" + window.location.host) : () => window.location.reload(), 1000);\n      } else {\n        setSeverity('error');\n        new_message.push(\"Some error occured\");\n        setMessage(new_message);\n      }\n    }).catch(error => console.log(error.message));\n  }; // Dialog page contains \"cancel\" and \"delete thread\" buttons\n\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: openDeleteThread,\n    onClose: handleCloseDeleteThread,\n    fullWidth: true,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: \"Are you sure you want to delete this thread?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: /*#__PURE__*/_jsxDEV(AlertUser, {\n        severity: severity,\n        message: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleCloseDeleteThread,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSubmitDeleteThread,\n        children: \"Delete Thread\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DeleteThread, \"pEr66OlwwUNh2zEF56GTfKAOO9Q=\");\n\n_c = DeleteThread;\nexport default DeleteThread;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeleteThread\");","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/thread/DeleteThread.tsx"],"names":["Button","Dialog","DialogActions","DialogContent","DialogTitle","AlertUser","React","useState","DeleteThread","API","openDeleteThread","handleCloseDeleteThread","thread_page_id","severity","setSeverity","undefined","message","setMessage","handleSubmitDeleteThread","new_message","fetch","toString","method","headers","then","response","ok","push","url","window","location","href","setTimeout","startsWith","protocol","host","replace","reload","catch","error","console","log"],"mappings":"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","sourcesContent":["import { Button, Dialog, DialogActions, DialogContent, \n    DialogTitle } from '@material-ui/core';\nimport AlertUser from '../AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\n\nimport React, { useState } from 'react';\n\ntype Props = {\n    openDeleteThread: boolean;\n    handleCloseDeleteThread: () => void;\n    thread_page_id: number;\n    API: string;\n}\n\n// Delete thread dialog page\nconst DeleteThread: React.FC<Props> = ({API, openDeleteThread, handleCloseDeleteThread, thread_page_id}: Props) => {\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n    \n    // On clicking submit button, delete thread in backend\n    const handleSubmitDeleteThread = () => {\n        let new_message: string[] = [];\n        fetch(API + \"/thread_pages/\" + thread_page_id.toString(), {\n            method: 'DELETE',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                },\n        })\n            .then((response) => {\n                if (response.ok) {\n                    setSeverity('success');\n                    new_message.push(\"You have deleted thread!\")\n                    setMessage(new_message);\n                    const url = window.location.href;\n\n                    // If page before opening dialog was individual threads page (ThreadView page), return to home, since thread deleted\n                    // Else, return to page user was on\n                    setTimeout(url.startsWith(window.location.protocol + \"//\" + window.location.host + \"/thread\")\n                        ? () => window.location.replace(window.location.protocol + \"//\" + window.location.host)\n                        : () => window.location.reload(), 1000);\n                } else {\n                    setSeverity('error');\n                    new_message.push(\"Some error occured\");\n                    setMessage(new_message);\n                }\n            })\n            .catch((error) => console.log(error.message));\n    }\n\n    // Dialog page contains \"cancel\" and \"delete thread\" buttons\n    return (\n        <Dialog open={openDeleteThread} onClose={handleCloseDeleteThread} fullWidth>\n            <DialogTitle>Are you sure you want to delete this thread?</DialogTitle>\n            {/* Display success / error messages */}\n            <DialogContent>\n                <AlertUser severity={severity} message={message}/>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseDeleteThread}>Cancel</Button>\n                <Button onClick={handleSubmitDeleteThread}>Delete Thread</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default DeleteThread;"]},"metadata":{},"sourceType":"module"}