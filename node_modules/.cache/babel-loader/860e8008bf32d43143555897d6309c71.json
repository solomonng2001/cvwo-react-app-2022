{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"elementType\", \"externalSlotProps\", \"ownerState\"];\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport appendOwnerState from './appendOwnerState';\nimport mergeSlotProps from './mergeSlotProps';\nimport resolveComponentProps from './resolveComponentProps';\n/**\n * Builds the props to be passed into the slot of an unstyled component.\n * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.\n * If the slot component is not a host component, it also merges in the `ownerState`.\n *\n * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.\n */\n\nexport default function useSlotProps(parameters) {\n  var _parameters$additiona;\n\n  var elementType = parameters.elementType,\n      externalSlotProps = parameters.externalSlotProps,\n      ownerState = parameters.ownerState,\n      rest = _objectWithoutPropertiesLoose(parameters, _excluded);\n\n  var resolvedComponentsProps = resolveComponentProps(externalSlotProps, ownerState);\n\n  var _mergeSlotProps = mergeSlotProps(_extends({}, rest, {\n    externalSlotProps: resolvedComponentsProps\n  })),\n      mergedProps = _mergeSlotProps.props,\n      internalRef = _mergeSlotProps.internalRef;\n\n  var ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);\n  var props = appendOwnerState(elementType, _extends({}, mergedProps, {\n    ref: ref\n  }), ownerState);\n  return props;\n}","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/node_modules/@mui/base/utils/useSlotProps.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","unstable_useForkRef","useForkRef","appendOwnerState","mergeSlotProps","resolveComponentProps","useSlotProps","parameters","_parameters$additiona","elementType","externalSlotProps","ownerState","rest","resolvedComponentsProps","mergedProps","props","internalRef","ref","additionalProps"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,IAAMC,SAAS,GAAG,CAAC,aAAD,EAAgB,mBAAhB,EAAqC,YAArC,CAAlB;AACA,SAASC,mBAAmB,IAAIC,UAAhC,QAAkD,YAAlD;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,YAAT,CAAsBC,UAAtB,EAAkC;AAC/C,MAAIC,qBAAJ;;AACA,MACIC,WADJ,GAIMF,UAJN,CACIE,WADJ;AAAA,MAEIC,iBAFJ,GAIMH,UAJN,CAEIG,iBAFJ;AAAA,MAGIC,UAHJ,GAIMJ,UAJN,CAGII,UAHJ;AAAA,MAKEC,IALF,GAKSb,6BAA6B,CAACQ,UAAD,EAAaP,SAAb,CALtC;;AAMA,MAAMa,uBAAuB,GAAGR,qBAAqB,CAACK,iBAAD,EAAoBC,UAApB,CAArD;;AACA,wBAGIP,cAAc,CAACN,QAAQ,CAAC,EAAD,EAAKc,IAAL,EAAW;AACpCF,IAAAA,iBAAiB,EAAEG;AADiB,GAAX,CAAT,CAHlB;AAAA,MACSC,WADT,mBACEC,KADF;AAAA,MAEEC,WAFF,mBAEEA,WAFF;;AAMA,MAAMC,GAAG,GAAGf,UAAU,CAACc,WAAD,EAAcH,uBAAuB,IAAI,IAA3B,GAAkC,KAAK,CAAvC,GAA2CA,uBAAuB,CAACI,GAAjF,EAAsF,CAACT,qBAAqB,GAAGD,UAAU,CAACW,eAApC,KAAwD,IAAxD,GAA+D,KAAK,CAApE,GAAwEV,qBAAqB,CAACS,GAApL,CAAtB;AACA,MAAMF,KAAK,GAAGZ,gBAAgB,CAACM,WAAD,EAAcX,QAAQ,CAAC,EAAD,EAAKgB,WAAL,EAAkB;AACpEG,IAAAA,GAAG,EAAHA;AADoE,GAAlB,CAAtB,EAE1BN,UAF0B,CAA9B;AAGA,SAAOI,KAAP;AACD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"elementType\", \"externalSlotProps\", \"ownerState\"];\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport appendOwnerState from './appendOwnerState';\nimport mergeSlotProps from './mergeSlotProps';\nimport resolveComponentProps from './resolveComponentProps';\n/**\n * Builds the props to be passed into the slot of an unstyled component.\n * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.\n * If the slot component is not a host component, it also merges in the `ownerState`.\n *\n * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.\n */\nexport default function useSlotProps(parameters) {\n  var _parameters$additiona;\n  const {\n      elementType,\n      externalSlotProps,\n      ownerState\n    } = parameters,\n    rest = _objectWithoutPropertiesLoose(parameters, _excluded);\n  const resolvedComponentsProps = resolveComponentProps(externalSlotProps, ownerState);\n  const {\n    props: mergedProps,\n    internalRef\n  } = mergeSlotProps(_extends({}, rest, {\n    externalSlotProps: resolvedComponentsProps\n  }));\n  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);\n  const props = appendOwnerState(elementType, _extends({}, mergedProps, {\n    ref\n  }), ownerState);\n  return props;\n}"]},"metadata":{},"sourceType":"module"}