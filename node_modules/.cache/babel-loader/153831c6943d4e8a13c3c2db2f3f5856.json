{"ast":null,"code":"var _jsxFileName = \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/ThreadView.tsx\",\n    _s = $RefreshSig$();\n\nimport ThreadMainPost from './ThreadMainPost';\nimport CommentList from './CommentList';\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ThreadView = _ref => {\n  _s();\n\n  let {\n    threadID\n  } = _ref;\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [thread, setThread] = useState({\n    id: 0,\n    title: '',\n    body: '',\n    user_id: 0,\n    created_at: '',\n    updated_at: '',\n    comments: [],\n    user: null\n  });\n  useEffect(() => {\n    fetch(\"http://localhost:3000/thread_pages/\" + threadID, {\n      method: 'GET',\n      mode: 'cors'\n    }).then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setThread(result);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 16\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ThreadMainPost, {\n        toOverflow: false,\n        thread: thread\n      }, thread.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CommentList, {\n        comments: thread.comments\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n};\n\n_s(ThreadView, \"agUSwc8V44E650K2snZcaDL4RRc=\");\n\n_c = ThreadView;\nexport default ThreadView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreadView\");","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/ThreadView.tsx"],"names":["ThreadMainPost","CommentList","React","useEffect","useState","ThreadView","threadID","error","setError","isLoaded","setIsLoaded","thread","setThread","id","title","body","user_id","created_at","updated_at","comments","user","fetch","method","mode","then","res","json","result","message"],"mappings":";;;AACA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;AAOA,MAAMC,UAA2B,GAAG,QAAuB;AAAA;;AAAA,MAAtB;AAACC,IAAAA;AAAD,GAAsB;AACvD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAM,IAAN,CAAlC;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAU,KAAV,CAAxC;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAS;AACzCS,IAAAA,EAAE,EAAE,CADqC;AAEzCC,IAAAA,KAAK,EAAE,EAFkC;AAGzCC,IAAAA,IAAI,EAAE,EAHmC;AAIzCC,IAAAA,OAAO,EAAE,CAJgC;AAKzCC,IAAAA,UAAU,EAAE,EAL6B;AAMzCC,IAAAA,UAAU,EAAE,EAN6B;AAOzCC,IAAAA,QAAQ,EAAE,EAP+B;AAQzCC,IAAAA,IAAI,EAAE;AARmC,GAAT,CAApC;AAWAjB,EAAAA,SAAS,CAAC,MAAM;AACZkB,IAAAA,KAAK,CAAC,wCAAwCf,QAAzC,EAAmD;AACpDgB,MAAAA,MAAM,EAAE,KAD4C;AAEpDC,MAAAA,IAAI,EAAE;AAF8C,KAAnD,CAAL,CAIKC,IAJL,CAIUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJjB,EAKKF,IALL,CAMSG,MAAD,IAAY;AACRjB,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,SAAS,CAACe,MAAD,CAAT;AACH,KATT,EAUQ;AACA;AACA;AACCpB,IAAAA,KAAD,IAAW;AACPG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,KAhBT;AAkBH,GAnBQ,EAmBN,EAnBM,CAAT;;AAqBA,MAAIA,KAAJ,EAAW;AACP,wBAAO;AAAA,4BAAaA,KAAK,CAACqB,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFD,MAEO,IAAI,CAACnB,QAAL,EAAe;AAClB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFM,MAEA;AACH,wBACI;AAAA,8BACI,QAAC,cAAD;AAAgB,QAAA,UAAU,EAAE,KAA5B;AAAmC,QAAA,MAAM,EAAEE;AAA3C,SAAwDA,MAAM,CAACE,EAA/D;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,WAAD;AAAa,QAAA,QAAQ,EAAEF,MAAM,CAACQ;AAA9B;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA,oBADJ;AAMH;AACJ,CA/CD;;GAAMd,U;;KAAAA,U;AAiDN,eAAeA,UAAf","sourcesContent":["import Thread from '../types/Thread';\nimport ThreadMainPost from './ThreadMainPost';\nimport CommentList from './CommentList';\n\nimport React, { useEffect, useState } from 'react';\nimport { CommentsDisabled } from '@mui/icons-material';\n\ntype Props = {\n    threadID: string | undefined;\n}\n\nconst ThreadView: React.FC<Props> = ({threadID}: Props) => {\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [thread, setThread] = useState<Thread>({\n        id: 0,\n        title: '',\n        body: '',\n        user_id: 0,\n        created_at: '',\n        updated_at: '',\n        comments: [],\n        user: null,\n    });\n\n    useEffect(() => {\n        fetch(\"http://localhost:3000/thread_pages/\" + threadID, {\n            method: 'GET',\n            mode: 'cors'\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setThread(result);\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            )\n    }, [])\n    \n    if (error) {\n        return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div>Loading...</div>;\n    } else {\n        return (\n            <>\n                <ThreadMainPost toOverflow={false} thread={thread} key={thread.id}/>\n                <CommentList comments={thread.comments}/>\n            </>\n        );\n    }\n};\n\nexport default ThreadView;\n"]},"metadata":{},"sourceType":"module"}