{"ast":null,"code":"import _slicedToArray from\"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Button,TextField,Dialog,DialogActions,DialogContent,DialogTitle}from'@material-ui/core';import AlertUser from'./AlertUser';import React,{useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var UpdateComment=function UpdateComment(_ref){var API=_ref.API,openUpdateComment=_ref.openUpdateComment,handleCloseUpdateComment=_ref.handleCloseUpdateComment,comment=_ref.comment;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),body=_useState2[0],setBody=_useState2[1];var _useState3=useState(undefined),_useState4=_slicedToArray(_useState3,2),severity=_useState4[0],setSeverity=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),message=_useState6[0],setMessage=_useState6[1];var resetUpdateComment=function resetUpdateComment(){setBody(\"\");};var handleSubmitUpdateComment=function handleSubmitUpdateComment(){var new_message=[];if(body===\"\"){new_message.push(\"Fill in all fields\");}if(new_message.length>0){setSeverity('error');setMessage(new_message);}else{fetch(API+\"/thread_pages/\"+comment.thread_page_id+\"/comments/\"+comment.id,{method:'PATCH',headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({body:body})}).then(function(response){if(response.ok){setSeverity('success');new_message.push(\"Changes saved!\");setMessage(new_message);resetUpdateComment();setTimeout(function(){return window.location.reload();},1000);}else{setSeverity('error');new_message.push(\"Some error occured\");setMessage(new_message);}}).catch(function(error){return console.log(error.message);});}};return/*#__PURE__*/_jsxs(Dialog,{open:openUpdateComment,onClose:handleCloseUpdateComment,fullWidth:true,children:[/*#__PURE__*/_jsx(DialogTitle,{children:\"What's on your mind?\"}),/*#__PURE__*/_jsxs(DialogContent,{children:[/*#__PURE__*/_jsx(AlertUser,{severity:severity,message:message}),/*#__PURE__*/_jsx(TextField,{value:body,type:\"text\",margin:\"normal\",label:\"Say something here...\",fullWidth:true,variant:\"standard\",multiline:true,onChange:function onChange(event){return setBody(event.target.value);}})]}),/*#__PURE__*/_jsxs(DialogActions,{children:[/*#__PURE__*/_jsx(Button,{onClick:handleCloseUpdateComment,children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{onClick:handleSubmitUpdateComment,children:\"Edit Comment\"})]})]});};export default UpdateComment;","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/UpdateComment.tsx"],"names":["Button","TextField","Dialog","DialogActions","DialogContent","DialogTitle","AlertUser","React","useState","UpdateComment","API","openUpdateComment","handleCloseUpdateComment","comment","body","setBody","undefined","severity","setSeverity","message","setMessage","resetUpdateComment","handleSubmitUpdateComment","new_message","push","length","fetch","thread_page_id","id","method","headers","JSON","stringify","then","response","ok","setTimeout","window","location","reload","catch","error","console","log","event","target","value"],"mappings":"oLAAA,OAASA,MAAT,CAAiBC,SAAjB,CAA4BC,MAA5B,CAAoCC,aAApC,CAAmDC,aAAnD,CACIC,WADJ,KACsB,mBADtB,CAEA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CAIA,MAAOC,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,C,wFASA,GAAMC,CAAAA,aAA8B,CAAG,QAAjCA,CAAAA,aAAiC,MAAwE,IAAtEC,CAAAA,GAAsE,MAAtEA,GAAsE,CAAjEC,iBAAiE,MAAjEA,iBAAiE,CAA9CC,wBAA8C,MAA9CA,wBAA8C,CAApBC,OAAoB,MAApBA,OAAoB,CAC3G,cAAwBL,QAAQ,CAAS,EAAT,CAAhC,wCAAOM,IAAP,eAAaC,OAAb,eACA,eAAgCP,QAAQ,CAAyBQ,SAAzB,CAAxC,yCAAOC,QAAP,eAAiBC,WAAjB,eACA,eAA8BV,QAAQ,CAAW,EAAX,CAAtC,yCAAOW,OAAP,eAAgBC,UAAhB,eAEA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAAM,CAC7BN,OAAO,CAAC,EAAD,CAAP,CACH,CAFD,CAIA,GAAMO,CAAAA,yBAAyB,CAAG,QAA5BA,CAAAA,yBAA4B,EAAM,CACpC,GAAIC,CAAAA,WAAqB,CAAG,EAA5B,CACA,GAAIT,IAAI,GAAK,EAAb,CAAiB,CACbS,WAAW,CAACC,IAAZ,CAAiB,oBAAjB,EACH,CACD,GAAID,WAAW,CAACE,MAAZ,CAAqB,CAAzB,CAA4B,CACxBP,WAAW,CAAC,OAAD,CAAX,CACAE,UAAU,CAACG,WAAD,CAAV,CACH,CAHD,IAGO,CACHG,KAAK,CAAChB,GAAG,CAAG,gBAAN,CAAyBG,OAAO,CAACc,cAAjC,CAAkD,YAAlD,CAAiEd,OAAO,CAACe,EAA1E,CAA8E,CAC/EC,MAAM,CAAE,OADuE,CAE/EC,OAAO,CAAE,CACL,eAAgB,kBADX,CAFsE,CAK/EhB,IAAI,CAAEiB,IAAI,CAACC,SAAL,CAAe,CACjBlB,IAAI,CAAJA,IADiB,CAAf,CALyE,CAA9E,CAAL,CASKmB,IATL,CASU,SAACC,QAAD,CAAc,CAChB,GAAIA,QAAQ,CAACC,EAAb,CAAiB,CACbjB,WAAW,CAAC,SAAD,CAAX,CACAK,WAAW,CAACC,IAAZ,CAAiB,gBAAjB,EACAJ,UAAU,CAACG,WAAD,CAAV,CACAF,kBAAkB,GAClBe,UAAU,CAAC,iBAAMC,CAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EAAN,EAAD,CAAiC,IAAjC,CAAV,CACH,CAND,IAMO,CACHrB,WAAW,CAAC,OAAD,CAAX,CACAK,WAAW,CAACC,IAAZ,CAAiB,oBAAjB,EACAJ,UAAU,CAACG,WAAD,CAAV,CACH,CACJ,CArBL,EAsBKiB,KAtBL,CAsBW,SAACC,KAAD,QAAWC,CAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACtB,OAAlB,CAAX,EAtBX,EAuBH,CACJ,CAjCD,CAmCA,mBACI,MAAC,MAAD,EAAQ,IAAI,CAAER,iBAAd,CAAiC,OAAO,CAAEC,wBAA1C,CAAoE,SAAS,KAA7E,wBACI,KAAC,WAAD,mCADJ,cAEI,MAAC,aAAD,yBACI,KAAC,SAAD,EAAW,QAAQ,CAAEK,QAArB,CAA+B,OAAO,CAAEE,OAAxC,EADJ,cAEI,KAAC,SAAD,EACI,KAAK,CAAEL,IADX,CAEI,IAAI,CAAC,MAFT,CAGI,MAAM,CAAC,QAHX,CAII,KAAK,CAAC,uBAJV,CAKI,SAAS,KALb,CAMI,OAAO,CAAC,UANZ,CAOI,SAAS,KAPb,CAQI,QAAQ,CAAE,kBAAA8B,KAAK,QAAI7B,CAAAA,OAAO,CAAC6B,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX,EARnB,EAFJ,GAFJ,cAeI,MAAC,aAAD,yBACI,KAAC,MAAD,EAAQ,OAAO,CAAElC,wBAAjB,oBADJ,cAEI,KAAC,MAAD,EAAQ,OAAO,CAAEU,yBAAjB,0BAFJ,GAfJ,GADJ,CAsBH,CAlED,CAoEA,cAAeb,CAAAA,aAAf","sourcesContent":["import { Button, TextField, Dialog, DialogActions, DialogContent, \n    DialogTitle} from '@material-ui/core';\nimport AlertUser from './AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\nimport Comment from '../types/Comment';\n\nimport React, { useState } from 'react';\n\ntype Props = {\n    openUpdateComment: boolean;\n    handleCloseUpdateComment: () => void;\n    comment: Comment;\n    API: string;\n}\n\nconst UpdateComment: React.FC<Props> = ({API, openUpdateComment, handleCloseUpdateComment, comment}: Props) => {\n    const [body, setBody] = useState<string>(\"\");\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n    \n    const resetUpdateComment = () => {\n        setBody(\"\");\n    }\n\n    const handleSubmitUpdateComment = () => {\n        let new_message: string[] = [];\n        if (body === \"\") {\n            new_message.push(\"Fill in all fields\");\n        }\n        if (new_message.length > 0) {\n            setSeverity('error');\n            setMessage(new_message);\n        } else {\n            fetch(API + \"/thread_pages/\" + comment.thread_page_id + \"/comments/\" + comment.id, {\n                method: 'PATCH',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                body: JSON.stringify({\n                    body,\n                }),\n            })\n                .then((response) => {\n                    if (response.ok) {\n                        setSeverity('success');\n                        new_message.push(\"Changes saved!\")\n                        setMessage(new_message);\n                        resetUpdateComment();\n                        setTimeout(() => window.location.reload(), 1000);\n                    } else {\n                        setSeverity('error');\n                        new_message.push(\"Some error occured\");\n                        setMessage(new_message);\n                    }\n                })\n                .catch((error) => console.log(error.message));\n        }\n    }\n\n    return (\n        <Dialog open={openUpdateComment} onClose={handleCloseUpdateComment} fullWidth>\n            <DialogTitle>What's on your mind?</DialogTitle>\n            <DialogContent>\n                <AlertUser severity={severity} message={message}/>\n                <TextField\n                    value={body}\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Say something here...\"\n                    fullWidth\n                    variant=\"standard\"\n                    multiline\n                    onChange={event => setBody(event.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseUpdateComment}>Cancel</Button>\n                <Button onClick={handleSubmitUpdateComment}>Edit Comment</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default UpdateComment;"]},"metadata":{},"sourceType":"module"}