{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport extractEventHandlers from '../utils/extractEventHandlers';\n/**\n * The basic building block for creating custom snackbar.\n *\n * Demos:\n *\n * - [Snackbar](https://mui.com/base/react-snackbar/)\n */\n\nexport default function useSnackbar(parameters) {\n  var _parameters$autoHideD = parameters.autoHideDuration,\n      autoHideDuration = _parameters$autoHideD === void 0 ? null : _parameters$autoHideD,\n      _parameters$disableWi = parameters.disableWindowBlurListener,\n      disableWindowBlurListener = _parameters$disableWi === void 0 ? false : _parameters$disableWi,\n      onClose = parameters.onClose,\n      open = parameters.open,\n      ref = parameters.ref,\n      resumeHideDuration = parameters.resumeHideDuration;\n  var timerAutoHide = React.useRef();\n  React.useEffect(function () {\n    if (!open) {\n      return undefined;\n    }\n    /**\n     * @param {KeyboardEvent} nativeEvent\n     */\n\n\n    function handleKeyDown(nativeEvent) {\n      if (!nativeEvent.defaultPrevented) {\n        // IE11, Edge (prior to using Blink?) use 'Esc'\n        if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') {\n          // not calling `preventDefault` since we don't know if people may ignore this event e.g. a permanently open snackbar\n          onClose == null ? void 0 : onClose(nativeEvent, 'escapeKeyDown');\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n    return function () {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [open, onClose]);\n  var handleClose = useEventCallback(function (event, reason) {\n    onClose == null ? void 0 : onClose(event, reason);\n  });\n  var setAutoHideTimer = useEventCallback(function (autoHideDurationParam) {\n    if (!onClose || autoHideDurationParam == null) {\n      return;\n    }\n\n    clearTimeout(timerAutoHide.current);\n    timerAutoHide.current = setTimeout(function () {\n      handleClose(null, 'timeout');\n    }, autoHideDurationParam);\n  });\n  React.useEffect(function () {\n    if (open) {\n      setAutoHideTimer(autoHideDuration);\n    }\n\n    return function () {\n      clearTimeout(timerAutoHide.current);\n    };\n  }, [open, autoHideDuration, setAutoHideTimer]);\n\n  var handleClickAway = function handleClickAway(event) {\n    onClose == null ? void 0 : onClose(event, 'clickaway');\n  }; // Pause the timer when the user is interacting with the Snackbar\n  // or when the user hide the window.\n\n\n  var handlePause = function handlePause() {\n    clearTimeout(timerAutoHide.current);\n  }; // Restart the timer when the user is no longer interacting with the Snackbar\n  // or when the window is shown back.\n\n\n  var handleResume = React.useCallback(function () {\n    if (autoHideDuration != null) {\n      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);\n    }\n  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);\n\n  var createHandleBlur = function createHandleBlur(otherHandlers) {\n    return function (event) {\n      var onBlurCallback = otherHandlers.onBlur;\n      onBlurCallback == null ? void 0 : onBlurCallback(event);\n      handleResume();\n    };\n  };\n\n  var createHandleFocus = function createHandleFocus(otherHandlers) {\n    return function (event) {\n      var onFocusCallback = otherHandlers.onFocus;\n      onFocusCallback == null ? void 0 : onFocusCallback(event);\n      handlePause();\n    };\n  };\n\n  var createMouseEnter = function createMouseEnter(otherHandlers) {\n    return function (event) {\n      var onMouseEnterCallback = otherHandlers.onMouseEnter;\n      onMouseEnterCallback == null ? void 0 : onMouseEnterCallback(event);\n      handlePause();\n    };\n  };\n\n  var createMouseLeave = function createMouseLeave(otherHandlers) {\n    return function (event) {\n      var onMouseLeaveCallback = otherHandlers.onMouseLeave;\n      onMouseLeaveCallback == null ? void 0 : onMouseLeaveCallback(event);\n      handleResume();\n    };\n  };\n\n  React.useEffect(function () {\n    // TODO: window global should be refactored here\n    if (!disableWindowBlurListener && open) {\n      window.addEventListener('focus', handleResume);\n      window.addEventListener('blur', handlePause);\n      return function () {\n        window.removeEventListener('focus', handleResume);\n        window.removeEventListener('blur', handlePause);\n      };\n    }\n\n    return undefined;\n  }, [disableWindowBlurListener, handleResume, open]);\n\n  var getRootProps = function getRootProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var propsEventHandlers = extractEventHandlers(parameters);\n\n    var externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers);\n\n    return _extends({\n      ref: ref,\n      // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.\n      // See https://github.com/mui/material-ui/issues/29080\n      role: 'presentation'\n    }, externalEventHandlers, {\n      onBlur: createHandleBlur(externalEventHandlers),\n      onFocus: createHandleFocus(externalEventHandlers),\n      onMouseEnter: createMouseEnter(externalEventHandlers),\n      onMouseLeave: createMouseLeave(externalEventHandlers)\n    });\n  };\n\n  return {\n    getRootProps: getRootProps,\n    onClickAway: handleClickAway\n  };\n}","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/node_modules/@mui/base/SnackbarUnstyled/useSnackbar.js"],"names":["_extends","React","unstable_useEventCallback","useEventCallback","extractEventHandlers","useSnackbar","parameters","autoHideDuration","disableWindowBlurListener","onClose","open","ref","resumeHideDuration","timerAutoHide","useRef","useEffect","undefined","handleKeyDown","nativeEvent","defaultPrevented","key","document","addEventListener","removeEventListener","handleClose","event","reason","setAutoHideTimer","autoHideDurationParam","clearTimeout","current","setTimeout","handleClickAway","handlePause","handleResume","useCallback","createHandleBlur","otherHandlers","onBlurCallback","onBlur","createHandleFocus","onFocusCallback","onFocus","createMouseEnter","onMouseEnterCallback","onMouseEnter","createMouseLeave","onMouseLeaveCallback","onMouseLeave","window","getRootProps","propsEventHandlers","externalEventHandlers","role","onClickAway"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport extractEventHandlers from '../utils/extractEventHandlers';\n\n/**\n * The basic building block for creating custom snackbar.\n *\n * Demos:\n *\n * - [Snackbar](https://mui.com/base/react-snackbar/)\n */\nexport default function useSnackbar(parameters) {\n  const {\n    autoHideDuration = null,\n    disableWindowBlurListener = false,\n    onClose,\n    open,\n    ref,\n    resumeHideDuration\n  } = parameters;\n  const timerAutoHide = React.useRef();\n  React.useEffect(() => {\n    if (!open) {\n      return undefined;\n    }\n\n    /**\n     * @param {KeyboardEvent} nativeEvent\n     */\n    function handleKeyDown(nativeEvent) {\n      if (!nativeEvent.defaultPrevented) {\n        // IE11, Edge (prior to using Blink?) use 'Esc'\n        if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') {\n          // not calling `preventDefault` since we don't know if people may ignore this event e.g. a permanently open snackbar\n          onClose == null ? void 0 : onClose(nativeEvent, 'escapeKeyDown');\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [open, onClose]);\n  const handleClose = useEventCallback((event, reason) => {\n    onClose == null ? void 0 : onClose(event, reason);\n  });\n  const setAutoHideTimer = useEventCallback(autoHideDurationParam => {\n    if (!onClose || autoHideDurationParam == null) {\n      return;\n    }\n    clearTimeout(timerAutoHide.current);\n    timerAutoHide.current = setTimeout(() => {\n      handleClose(null, 'timeout');\n    }, autoHideDurationParam);\n  });\n  React.useEffect(() => {\n    if (open) {\n      setAutoHideTimer(autoHideDuration);\n    }\n    return () => {\n      clearTimeout(timerAutoHide.current);\n    };\n  }, [open, autoHideDuration, setAutoHideTimer]);\n  const handleClickAway = event => {\n    onClose == null ? void 0 : onClose(event, 'clickaway');\n  };\n\n  // Pause the timer when the user is interacting with the Snackbar\n  // or when the user hide the window.\n  const handlePause = () => {\n    clearTimeout(timerAutoHide.current);\n  };\n\n  // Restart the timer when the user is no longer interacting with the Snackbar\n  // or when the window is shown back.\n  const handleResume = React.useCallback(() => {\n    if (autoHideDuration != null) {\n      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);\n    }\n  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);\n  const createHandleBlur = otherHandlers => event => {\n    const onBlurCallback = otherHandlers.onBlur;\n    onBlurCallback == null ? void 0 : onBlurCallback(event);\n    handleResume();\n  };\n  const createHandleFocus = otherHandlers => event => {\n    const onFocusCallback = otherHandlers.onFocus;\n    onFocusCallback == null ? void 0 : onFocusCallback(event);\n    handlePause();\n  };\n  const createMouseEnter = otherHandlers => event => {\n    const onMouseEnterCallback = otherHandlers.onMouseEnter;\n    onMouseEnterCallback == null ? void 0 : onMouseEnterCallback(event);\n    handlePause();\n  };\n  const createMouseLeave = otherHandlers => event => {\n    const onMouseLeaveCallback = otherHandlers.onMouseLeave;\n    onMouseLeaveCallback == null ? void 0 : onMouseLeaveCallback(event);\n    handleResume();\n  };\n  React.useEffect(() => {\n    // TODO: window global should be refactored here\n    if (!disableWindowBlurListener && open) {\n      window.addEventListener('focus', handleResume);\n      window.addEventListener('blur', handlePause);\n      return () => {\n        window.removeEventListener('focus', handleResume);\n        window.removeEventListener('blur', handlePause);\n      };\n    }\n    return undefined;\n  }, [disableWindowBlurListener, handleResume, open]);\n  const getRootProps = (otherHandlers = {}) => {\n    const propsEventHandlers = extractEventHandlers(parameters);\n    const externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers);\n    return _extends({\n      ref,\n      // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.\n      // See https://github.com/mui/material-ui/issues/29080\n      role: 'presentation'\n    }, externalEventHandlers, {\n      onBlur: createHandleBlur(externalEventHandlers),\n      onFocus: createHandleFocus(externalEventHandlers),\n      onMouseEnter: createMouseEnter(externalEventHandlers),\n      onMouseLeave: createMouseLeave(externalEventHandlers)\n    });\n  };\n  return {\n    getRootProps,\n    onClickAway: handleClickAway\n  };\n}"]},"metadata":{},"sourceType":"module"}