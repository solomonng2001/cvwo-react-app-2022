{"ast":null,"code":"var _jsxFileName = \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/pages/MyThreads.tsx\",\n    _s = $RefreshSig$();\n\nimport ThreadList from '../components/thread/ThreadList';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// MyThreads page: display threads created by current user (must be logged in)\nconst MyThreads = _ref => {\n  _s();\n\n  let {\n    currentUserState,\n    API,\n    globalMessageState\n  } = _ref;\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [threads, setThreads] = useState([]); // If current user is logged in, fetch user's created threads\n\n  useEffect(() => {\n    if (currentUserState.isLoggedIn) {\n      fetch(API + \"/mythreads/\" + currentUserState.currentUser.id, {\n        method: 'GET',\n        mode: 'cors'\n      }).then(res => res.json()).then(result => {\n        setIsLoaded(true);\n        setThreads(result);\n      }, error => {\n        setIsLoaded(true);\n        setError(error);\n      });\n    }\n  }, [currentUserState.isLoggedIn, currentUserState.currentUser.id, API]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '50vw',\n      margin: 'auto',\n      textAlign: 'center',\n      paddingTop: '30px'\n    },\n    children: /*#__PURE__*/_jsxDEV(ThreadList, {\n      globalMessageState: globalMessageState,\n      API: API,\n      threads: threads,\n      error: error,\n      isLoaded: isLoaded,\n      currentUserState: currentUserState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MyThreads, \"dMj0J//S5B6eE2SSHF5bLVZcQRI=\");\n\n_c = MyThreads;\nexport default MyThreads;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyThreads\");","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/pages/MyThreads.tsx"],"names":["ThreadList","React","useState","useEffect","MyThreads","currentUserState","API","globalMessageState","error","setError","isLoaded","setIsLoaded","threads","setThreads","isLoggedIn","fetch","currentUser","id","method","mode","then","res","json","result","width","margin","textAlign","paddingTop"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,iCAAvB;AAKA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;AAQA;AACA,MAAMC,SAA0B,GAAG,QAAyD;AAAA;;AAAA,MAAvD;AAACC,IAAAA,gBAAD;AAAmBC,IAAAA,GAAnB;AAAwBC,IAAAA;AAAxB,GAAuD;AACxF,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAM,IAAN,CAAlC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAU,KAAV,CAAxC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAW,EAAX,CAAtC,CAHwF,CAKxF;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIE,gBAAgB,CAACS,UAArB,EAAiC;AAC7BC,MAAAA,KAAK,CAACT,GAAG,GAAG,aAAN,GAAsBD,gBAAgB,CAACW,WAAjB,CAA6BC,EAApD,EAAwD;AACzDC,QAAAA,MAAM,EAAE,KADiD;AAEzDC,QAAAA,IAAI,EAAE;AAFmD,OAAxD,CAAL,CAIKC,IAJL,CAIUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJjB,EAKKF,IALL,CAMSG,MAAD,IAAY;AACRZ,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,QAAAA,UAAU,CAACU,MAAD,CAAV;AACH,OATT,EAUSf,KAAD,IAAW;AACPG,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,OAbT;AAeH;AACJ,GAlBQ,EAkBN,CAACH,gBAAgB,CAACS,UAAlB,EAA8BT,gBAAgB,CAACW,WAAjB,CAA6BC,EAA3D,EAA+DX,GAA/D,CAlBM,CAAT;AAoBA,sBACI;AAAK,IAAA,KAAK,EAAE;AAAEkB,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,MAAM,EAAE,MAAzB;AAAiCC,MAAAA,SAAS,EAAE,QAA5C;AAAsDC,MAAAA,UAAU,EAAE;AAAlE,KAAZ;AAAA,2BAEI,QAAC,UAAD;AAAY,MAAA,kBAAkB,EAAEpB,kBAAhC;AAAoD,MAAA,GAAG,EAAED,GAAzD;AAA8D,MAAA,OAAO,EAAEM,OAAvE;AAAgF,MAAA,KAAK,EAAEJ,KAAvF;AAA8F,MAAA,QAAQ,EAAEE,QAAxG;AAAkH,MAAA,gBAAgB,EAAEL;AAApI;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAhCD;;GAAMD,S;;KAAAA,S;AAkCN,eAAeA,SAAf","sourcesContent":["import ThreadList from '../components/thread/ThreadList';\nimport { Thread } from '../types/Thread';\nimport CurrentUserState from '../types/CurrentUserState';\nimport GlobalMessageState from '../types/GlobalMessageState';\n\nimport React, {useState, useEffect} from 'react';\n\ntype Props = {\n    currentUserState: CurrentUserState;\n    API: string;\n    globalMessageState: GlobalMessageState;\n}\n\n// MyThreads page: display threads created by current user (must be logged in)\nconst MyThreads: React.FC<Props> = ( {currentUserState, API, globalMessageState}: Props) => {\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [threads, setThreads] = useState<Thread[]>([]);\n\n    // If current user is logged in, fetch user's created threads\n    useEffect(() => {\n        if (currentUserState.isLoggedIn) {\n            fetch(API + \"/mythreads/\" + currentUserState.currentUser.id, {\n                method: 'GET',\n                mode: 'cors'\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setIsLoaded(true);\n                        setThreads(result);\n                    },\n                    (error) => {\n                        setIsLoaded(true);\n                        setError(error);\n                    }\n                )\n        }\n    }, [currentUserState.isLoggedIn, currentUserState.currentUser.id, API]);\n\n    return (\n        <div style={{ width: '50vw', margin: 'auto', textAlign: 'center', paddingTop: '30px'}}>\n            {/* List user's threads using ThreadList element (abtraction) */}\n            <ThreadList globalMessageState={globalMessageState} API={API} threads={threads} error={error} isLoaded={isLoaded} currentUserState={currentUserState}/>\n        </div>\n    );\n};\n\nexport default MyThreads;"]},"metadata":{},"sourceType":"module"}