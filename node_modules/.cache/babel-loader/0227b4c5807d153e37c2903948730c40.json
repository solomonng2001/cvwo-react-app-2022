{"ast":null,"code":"var _jsxFileName = \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/pages/Home.tsx\",\n    _s = $RefreshSig$();\n\nimport ThreadList from '../components/ThreadList';\nimport { Typography } from '@material-ui/core';\nimport Typewriter from 'typewriter-effect';\nimport SearchBar from '../components/SearchBar';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// Root path directs to homepage\nconst Home = _ref => {\n  _s();\n\n  let {\n    currentUserState,\n    API\n  } = _ref;\n  const [threadResults, setThreadResults] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [threads, setThreads] = useState(threadResults); // get json of latest threads from server\n\n  useEffect(() => {\n    if (threadResults.length > 0) {\n      setIsLoaded(true);\n      setThreads(threadResults);\n    } else {\n      fetch(API + \"/thread_pages\", {\n        method: 'GET',\n        mode: 'cors'\n      }).then(res => res.json()).then(result => {\n        setIsLoaded(true);\n        setThreads(result);\n      }, error => {\n        setIsLoaded(true);\n        setError(error);\n      });\n    }\n  }, [threadResults, API]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '50vw',\n      margin: 'auto',\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h3\",\n      style: {\n        paddingTop: '70px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Typewriter, {\n        onInit: typewriter => {\n          typewriter.changeDelay(80).typeString(\"ChitChat\").pauseFor(1000).start();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      setThreadResults: setThreadResults,\n      currentUserState: currentUserState,\n      API: API\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ThreadList, {\n      API: API,\n      threads: threads,\n      currentUserState: currentUserState,\n      error: error,\n      isLoaded: isLoaded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Home, \"Hb+O8OOZ0MzE7jwUrXgHf4Jn+4k=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/pages/Home.tsx"],"names":["ThreadList","Typography","Typewriter","SearchBar","React","useState","useEffect","Home","currentUserState","API","threadResults","setThreadResults","error","setError","isLoaded","setIsLoaded","threads","setThreads","length","fetch","method","mode","then","res","json","result","width","margin","textAlign","paddingTop","typewriter","changeDelay","typeString","pauseFor","start"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,0BAAvB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAIA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;AAOA;AACA,MAAMC,IAAqB,GAAG,QAAqC;AAAA;;AAAA,MAAnC;AAACC,IAAAA,gBAAD;AAAmBC,IAAAA;AAAnB,GAAmC;AAC/D,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAW,EAAX,CAAlD;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAM,IAAN,CAAlC;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAU,KAAV,CAAxC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAWK,aAAX,CAAtC,CAJ+D,CAM/D;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAII,aAAa,CAACQ,MAAd,GAAuB,CAA3B,EAA8B;AAC1BH,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,UAAU,CAACP,aAAD,CAAV;AACH,KAHD,MAGO;AACHS,MAAAA,KAAK,CAACV,GAAG,GAAG,eAAP,EAAwB;AACzBW,QAAAA,MAAM,EAAE,KADiB;AAEzBC,QAAAA,IAAI,EAAE;AAFmB,OAAxB,CAAL,CAIKC,IAJL,CAIUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJjB,EAKKF,IALL,CAMSG,MAAD,IAAY;AACRV,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,QAAAA,UAAU,CAACQ,MAAD,CAAV;AACH,OATT,EAUSb,KAAD,IAAW;AACPG,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,OAbT;AAeH;AACJ,GArBQ,EAqBN,CAACF,aAAD,EAAgBD,GAAhB,CArBM,CAAT;AAuBA,sBACI;AAAK,IAAA,KAAK,EAAE;AAAEiB,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,MAAM,EAAE,MAAzB;AAAiCC,MAAAA,SAAS,EAAE;AAA5C,KAAZ;AAAA,4BAGI,QAAC,UAAD;AAAY,MAAA,OAAO,EAAC,IAApB;AAAyB,MAAA,KAAK,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAAhC;AAAA,6BACI,QAAC,UAAD;AACI,QAAA,MAAM,EAAGC,UAAD,IAAgB;AACpBA,UAAAA,UAAU,CACLC,WADL,CACiB,EADjB,EAEKC,UAFL,CAEgB,UAFhB,EAGKC,QAHL,CAGc,IAHd,EAIKC,KAJL;AAKH;AAPL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAHJ,eAgBI,QAAC,SAAD;AAAW,MAAA,gBAAgB,EAAEvB,gBAA7B;AAA+C,MAAA,gBAAgB,EAAEH,gBAAjE;AAAmF,MAAA,GAAG,EAAEC;AAAxF;AAAA;AAAA;AAAA;AAAA,YAhBJ,eAmBI,QAAC,UAAD;AAAY,MAAA,GAAG,EAAEA,GAAjB;AAAsB,MAAA,OAAO,EAAEO,OAA/B;AAAwC,MAAA,gBAAgB,EAAER,gBAA1D;AACI,MAAA,KAAK,EAAEI,KADX;AACkB,MAAA,QAAQ,EAAEE;AAD5B;AAAA;AAAA;AAAA;AAAA,YAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBH,CAtDD;;GAAMP,I;;KAAAA,I;AAwDN,eAAeA,IAAf","sourcesContent":["import ThreadList from '../components/ThreadList';\nimport { Typography } from '@material-ui/core';\nimport Typewriter from 'typewriter-effect';\nimport SearchBar from '../components/SearchBar';\nimport { Thread } from '../types/Thread';\nimport CurrentUserState from '../types/CurrentUserState';\n\nimport React, {useState, useEffect} from 'react';\n\ntype Props = {\n    currentUserState: CurrentUserState;\n    API: string;\n}\n\n// Root path directs to homepage\nconst Home: React.FC<Props> = ( {currentUserState, API}: Props) => {\n    const [threadResults, setThreadResults] = useState<Thread[]>([]);\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [threads, setThreads] = useState<Thread[]>(threadResults);\n\n    // get json of latest threads from server\n    useEffect(() => {\n        if (threadResults.length > 0) {\n            setIsLoaded(true);\n            setThreads(threadResults);\n        } else {\n            fetch(API + \"/thread_pages\", {\n                method: 'GET',\n                mode: 'cors'\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setIsLoaded(true);\n                        setThreads(result);\n                    },\n                    (error) => {\n                        setIsLoaded(true);\n                        setError(error);\n                    }\n                )\n        }\n    }, [threadResults, API]);\n\n    return (\n        <div style={{ width: '50vw', margin: 'auto', textAlign: 'center'}}>\n\n            {/* ChitChat animiation */}\n            <Typography variant='h3' style={{ paddingTop: '70px'}}>\n                <Typewriter\n                    onInit={(typewriter) => {\n                        typewriter\n                            .changeDelay(80)\n                            .typeString(\"ChitChat\")\n                            .pauseFor(1000)\n                            .start();\n                    }}\n                /> \n            </Typography>\n\n            {/* Search Bar: search by tags or title */}\n            <SearchBar setThreadResults={setThreadResults} currentUserState={currentUserState} API={API}/>\n\n            {/* List of threads, starting from latest */}\n            <ThreadList API={API} threads={threads} currentUserState={currentUserState}\n                error={error} isLoaded={isLoaded}/>\n        </div>\n    );\n};\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}