{"ast":null,"code":"import{Typography}from'@material-ui/core';import Stack from'@mui/material/Stack';import React from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var BodyAddHTML=function BodyAddHTML(_ref){var body=_ref.body,toOverflow=_ref.toOverflow;// parse body string obtained from backend, and convert into array of tags string, with \"next line\" property handled\nvar body_array=body.split('\\n').filter(function(ele){return ele!==\"\";});// if text to be fully displayed (threads in individual ThreadView page)\nif(!toOverflow){return/*#__PURE__*/_jsx(Stack,{direction:\"column\",spacing:0,children:body_array.map(function(line,index){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Typography,{align:\"left\",variant:\"body1\",children:line}),/*#__PURE__*/_jsx(\"br\",{})]},index);})});}// if text-overflow: \"...\" to summarize text and keep text short (threads list view eg. homepage and mythreads page)\nvar body_elipsis=body_array.join('...');return/*#__PURE__*/_jsx(Typography,{noWrap:toOverflow,align:\"left\",variant:\"body1\",children:body_elipsis});};export default BodyAddHTML;","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/BodyAddHTML.tsx"],"names":["Typography","Stack","React","BodyAddHTML","body","toOverflow","body_array","split","filter","ele","map","line","index","body_elipsis","join"],"mappings":"AAAA,OAASA,UAAT,KAA2B,mBAA3B,CACA,MAAOC,CAAAA,KAAP,KAAkB,qBAAlB,CAEA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,C,wFAOA,GAAMC,CAAAA,WAA4B,CAAG,QAA/BA,CAAAA,WAA+B,MAAiC,IAA9BC,CAAAA,IAA8B,MAA9BA,IAA8B,CAAxBC,UAAwB,MAAxBA,UAAwB,CAElE;AACA,GAAMC,CAAAA,UAAoB,CAAGF,IAAI,CAACG,KAAL,CAAW,IAAX,EAAiBC,MAAjB,CAAwB,SAAAC,GAAG,QAAIA,CAAAA,GAAG,GAAK,EAAZ,EAA3B,CAA7B,CAEA;AACA,GAAI,CAACJ,UAAL,CAAiB,CACb,mBACI,KAAC,KAAD,EAAO,SAAS,CAAC,QAAjB,CAA0B,OAAO,CAAE,CAAnC,UACMC,UAAU,CAACI,GAAX,CAAe,SAACC,IAAD,CAAOC,KAAP,qBACb,oCACI,KAAC,UAAD,EAAY,KAAK,CAAC,MAAlB,CAAyB,OAAO,CAAC,OAAjC,UACKD,IADL,EADJ,cAII,aAJJ,GAAUC,KAAV,CADa,EAAf,CADN,EADJ,CAYH,CAED;AACA,GAAMC,CAAAA,YAAY,CAAGP,UAAU,CAACQ,IAAX,CAAgB,KAAhB,CAArB,CACA,mBACI,KAAC,UAAD,EAAY,MAAM,CAAET,UAApB,CAAgC,KAAK,CAAC,MAAtC,CAA6C,OAAO,CAAC,OAArD,UACKQ,YADL,EADJ,CAKH,CA5BD,CA8BA,cAAeV,CAAAA,WAAf","sourcesContent":["import { Typography } from '@material-ui/core';\nimport Stack from '@mui/material/Stack';\n\nimport React from 'react';\n\ntype Props = {\n    toOverflow: boolean;\n    body: string;\n}\n\nconst BodyAddHTML: React.FC<Props> = ({ body, toOverflow }: Props) => {\n    \n    // parse body string obtained from backend, and convert into array of tags string, with \"next line\" property handled\n    const body_array: string[] = body.split('\\n').filter(ele => ele !== \"\");\n\n    // if text to be fully displayed (threads in individual ThreadView page)\n    if (!toOverflow) {\n        return (\n            <Stack direction='column' spacing={0}>\n                { body_array.map((line, index) => (\n                    <div key={index}>\n                        <Typography align='left' variant=\"body1\">\n                            {line}\n                        </Typography>\n                        <br />\n                    </div>\n                ))}\n            </Stack>\n        );\n    }\n\n    // if text-overflow: \"...\" to summarize text and keep text short (threads list view eg. homepage and mythreads page)\n    const body_elipsis = body_array.join('...');\n    return (\n        <Typography noWrap={toOverflow} align='left' variant=\"body1\">\n            {body_elipsis}\n        </Typography>\n    );\n};\n\nexport default BodyAddHTML;"]},"metadata":{},"sourceType":"module"}