{"ast":null,"code":"import _slicedToArray from\"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{emptyThread}from'../../types/Thread';import ThreadMainPost from'./ThreadMainPost';import CommentList from'../comment/CommentList';import React,{useEffect,useState}from'react';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";// Page displaying individual thread and associated comments\nvar ThreadView=function ThreadView(_ref){var threadID=_ref.threadID,currentUserState=_ref.currentUserState,API=_ref.API,globalMessageState=_ref.globalMessageState;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),error=_useState2[0],setError=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isLoaded=_useState4[0],setIsLoaded=_useState4[1];var _useState5=useState(emptyThread),_useState6=_slicedToArray(_useState5,2),thread=_useState6[0],setThread=_useState6[1];// Fetch thread and associated comments when page loaded\nuseEffect(function(){fetch(API+\"/thread_pages/\"+threadID,{method:'GET',mode:'cors'}).then(function(res){return res.json();}).then(function(result){setIsLoaded(true);setThread(result);},// Note: it's important to handle errors here\n// instead of a catch() block so that we don't swallow\n// exceptions from actual bugs in components.\nfunction(error){setIsLoaded(true);setError(error);});},[threadID,API]);// Display \"loading\" until response from backend, then display error or threads and comments\nif(error){return/*#__PURE__*/_jsxs(\"div\",{children:[\"Error: \",error.message]});}else if(!isLoaded){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}else{return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(ThreadMainPost,{globalMessageState:globalMessageState,API:API,toOverflow:false,thread:thread,currentUserState:currentUserState},thread.id),/*#__PURE__*/_jsx(CommentList,{API:API,comments:thread.comments,currentUserState:currentUserState})]});}};export default ThreadView;","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/thread/ThreadView.tsx"],"names":["emptyThread","ThreadMainPost","CommentList","React","useEffect","useState","ThreadView","threadID","currentUserState","API","globalMessageState","error","setError","isLoaded","setIsLoaded","thread","setThread","fetch","method","mode","then","res","json","result","message","id","comments"],"mappings":"oLAAA,OAAiBA,WAAjB,KAAoC,oBAApC,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,CACA,MAAOC,CAAAA,WAAP,KAAwB,wBAAxB,CAIA,MAAOC,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,C,6IASA;AACA,GAAMC,CAAAA,UAA2B,CAAG,QAA9BA,CAAAA,UAA8B,MAAkE,IAAhEC,CAAAA,QAAgE,MAAhEA,QAAgE,CAAtDC,gBAAsD,MAAtDA,gBAAsD,CAApCC,GAAoC,MAApCA,GAAoC,CAA/BC,kBAA+B,MAA/BA,kBAA+B,CAClG,cAA0BL,QAAQ,CAAM,IAAN,CAAlC,wCAAOM,KAAP,eAAcC,QAAd,eACA,eAAgCP,QAAQ,CAAU,KAAV,CAAxC,yCAAOQ,QAAP,eAAiBC,WAAjB,eACA,eAA4BT,QAAQ,CAASL,WAAT,CAApC,yCAAOe,MAAP,eAAeC,SAAf,eAEA;AACAZ,SAAS,CAAC,UAAM,CACZa,KAAK,CAACR,GAAG,CAAG,gBAAN,CAAyBF,QAA1B,CAAoC,CACrCW,MAAM,CAAE,KAD6B,CAErCC,IAAI,CAAE,MAF+B,CAApC,CAAL,CAIKC,IAJL,CAIU,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EAJb,EAKKF,IALL,CAMQ,SAACG,MAAD,CAAY,CACRT,WAAW,CAAC,IAAD,CAAX,CACAE,SAAS,CAACO,MAAD,CAAT,CACH,CATT,CAUQ;AACA;AACA;AACA,SAACZ,KAAD,CAAW,CACPG,WAAW,CAAC,IAAD,CAAX,CACAF,QAAQ,CAACD,KAAD,CAAR,CACH,CAhBT,EAkBH,CAnBQ,CAmBN,CAACJ,QAAD,CAAWE,GAAX,CAnBM,CAAT,CAqBA;AACA,GAAIE,KAAJ,CAAW,CACP,mBAAO,iCAAaA,KAAK,CAACa,OAAnB,GAAP,CACH,CAFD,IAEO,IAAI,CAACX,QAAL,CAAe,CAClB,mBAAO,mCAAP,CACH,CAFM,IAEA,CACH,mBACI,wCAEI,KAAC,cAAD,EAAgB,kBAAkB,CAAEH,kBAApC,CAAwD,GAAG,CAAED,GAA7D,CAAkE,UAAU,CAAE,KAA9E,CAAqF,MAAM,CAAEM,MAA7F,CAAqH,gBAAgB,CAAEP,gBAAvI,EAA0GO,MAAM,CAACU,EAAjH,CAFJ,cAII,KAAC,WAAD,EAAa,GAAG,CAAEhB,GAAlB,CAAuB,QAAQ,CAAEM,MAAM,CAACW,QAAxC,CAAkD,gBAAgB,CAAElB,gBAApE,EAJJ,GADJ,CAQH,CACJ,CA1CD,CA4CA,cAAeF,CAAAA,UAAf","sourcesContent":["import { Thread, emptyThread } from '../../types/Thread';\nimport ThreadMainPost from './ThreadMainPost';\nimport CommentList from '../comment/CommentList';\nimport CurrentUserState from '../../types/CurrentUserState';\nimport GlobalMessageState from '../../types/GlobalMessageState';\n\nimport React, { useEffect, useState } from 'react';\n\ntype Props = {\n    threadID: string | undefined;\n    currentUserState: CurrentUserState;\n    API: string,\n    globalMessageState: GlobalMessageState;\n}\n\n// Page displaying individual thread and associated comments\nconst ThreadView: React.FC<Props> = ({threadID, currentUserState, API, globalMessageState}: Props) => {\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [thread, setThread] = useState<Thread>(emptyThread);\n\n    // Fetch thread and associated comments when page loaded\n    useEffect(() => {\n        fetch(API + \"/thread_pages/\" + threadID, {\n            method: 'GET',\n            mode: 'cors'\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setThread(result);\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            )\n    }, [threadID, API])\n    \n    // Display \"loading\" until response from backend, then display error or threads and comments\n    if (error) {\n        return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div>Loading...</div>;\n    } else {\n        return (\n            <>\n                {/* Individual thread: title, body, user, tags, and button icons to edit, delete or comment */}\n                <ThreadMainPost globalMessageState={globalMessageState} API={API} toOverflow={false} thread={thread} key={thread.id} currentUserState={currentUserState}/>\n                {/* all associated comments */}\n                <CommentList API={API} comments={thread.comments} currentUserState={currentUserState}/>\n            </>\n        );\n    }\n};\n\nexport default ThreadView;\n"]},"metadata":{},"sourceType":"module"}