{"ast":null,"code":"var _jsxFileName = \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/SearchBar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Paper from '@mui/material/Paper';\nimport InputBase from '@mui/material/InputBase';\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport SearchIcon from '@mui/icons-material/Search';\nimport LibraryAddIcon from '@mui/icons-material/LibraryAdd';\nimport CreateThread from './CreateThread';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchBar = () => {\n  _s();\n\n  const [openCreateThread, setOpenCreateThread] = React.useState(false);\n\n  const handleClickOpenCreateThread = () => {\n    setOpenCreateThread(true);\n  };\n\n  const handleCloseCreateThread = () => {\n    setOpenCreateThread(false);\n  };\n\n  const [search, setSearch] = useState(\"\");\n  const [results, setResults] = useState([]);\n  useEffect(() => {\n    const title = search;\n    fetch(\"http://localhost:3000/thread_pages/search/title\", {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        title\n      })\n    }).then(res => res.json()).then(result => {\n      setResults(result);\n    });\n  }, [search]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      paddingTop: '20px',\n      paddingBottom: '20px',\n      position: 'sticky',\n      top: '50px',\n      zIndex: '1100'\n    },\n    children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n      disablePortal: true,\n      id: \"combo-box-demo\",\n      options: top100Films,\n      sx: {\n        width: 300\n      },\n      renderInput: params => /*#__PURE__*/_jsxDEV(Paper, {\n        component: \"form\",\n        sx: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(InputBase, {\n          sx: {\n            ml: 1,\n            flex: 1\n          },\n          placeholder: \"Who's chatting about what?\",\n          value: search,\n          onChange: event => setSearch(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          sx: {\n            height: 28,\n            m: 0.5\n          },\n          orientation: \"vertical\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: handleClickOpenCreateThread,\n          children: /*#__PURE__*/_jsxDEV(LibraryAddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CreateThread, {\n          openCreateThread: openCreateThread,\n          handleCloseCreateThread: handleCloseCreateThread\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchBar, \"5Lbd45vWFai6KCBSXOz62QZMq2c=\");\n\n_c = SearchBar;\nexport default SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/SearchBar.tsx"],"names":["React","useEffect","useState","Paper","InputBase","Divider","IconButton","SearchIcon","LibraryAddIcon","CreateThread","Autocomplete","SearchBar","openCreateThread","setOpenCreateThread","handleClickOpenCreateThread","handleCloseCreateThread","search","setSearch","results","setResults","title","fetch","method","mode","headers","body","JSON","stringify","then","res","json","result","paddingTop","paddingBottom","position","top","zIndex","top100Films","width","params","display","alignItems","ml","flex","event","target","value","height","m"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAGA,OAAOC,YAAP,MAAyB,4BAAzB;;;AAEA,MAAMC,SAAmB,GAAG,MAAM;AAAA;;AAC9B,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0Cb,KAAK,CAACE,QAAN,CAAwB,KAAxB,CAAhD;;AAEA,QAAMY,2BAA2B,GAAG,MAAM;AACxCD,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD,GAFD;;AAIA,QAAME,uBAAuB,GAAG,MAAM;AACpCF,IAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD,GAFD;;AAIA,QAAM,CAACG,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAS,EAAT,CAApC;AACA,QAAM,CAACgB,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAiB,EAAjB,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMmB,KAAK,GAAGJ,MAAd;AACAK,IAAAA,KAAK,CAAC,iDAAD,EAAoD;AACrDC,MAAAA,MAAM,EAAE,MAD6C;AAErDC,MAAAA,IAAI,EAAE,MAF+C;AAGrDC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAH4C;AAMrDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBP,QAAAA;AADiB,OAAf;AAN+C,KAApD,CAAL,CAUKQ,IAVL,CAUUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAVjB,EAWKF,IAXL,CAYSG,MAAD,IAAY;AACRZ,MAAAA,UAAU,CAACY,MAAD,CAAV;AACH,KAdT;AAgBH,GAlBQ,EAkBN,CAACf,MAAD,CAlBM,CAAT;AAoBA,sBACI;AAAK,IAAA,KAAK,EAAE;AAACgB,MAAAA,UAAU,EAAE,MAAb;AAAqBC,MAAAA,aAAa,EAAE,MAApC;AAA4CC,MAAAA,QAAQ,EAAE,QAAtD;AAAgEC,MAAAA,GAAG,EAAE,MAArE;AAA6EC,MAAAA,MAAM,EAAE;AAArF,KAAZ;AAAA,2BACI,QAAC,YAAD;AACI,MAAA,aAAa,MADjB;AAEI,MAAA,EAAE,EAAC,gBAFP;AAGI,MAAA,OAAO,EAAEC,WAHb;AAII,MAAA,EAAE,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAJR;AAKI,MAAA,WAAW,EAAGC,MAAD,iBACT,QAAC,KAAD;AACA,QAAA,SAAS,EAAC,MADV;AAEA,QAAA,EAAE,EAAE;AAAEC,UAAAA,OAAO,EAAE,MAAX;AAAmBC,UAAAA,UAAU,EAAE;AAA/B,SAFJ;AAAA,gCAII,QAAC,SAAD;AACI,UAAA,EAAE,EAAE;AAAEC,YAAAA,EAAE,EAAE,CAAN;AAASC,YAAAA,IAAI,EAAE;AAAf,WADR;AAEI,UAAA,WAAW,EAAC,4BAFhB;AAGI,UAAA,KAAK,EAAE3B,MAHX;AAII,UAAA,QAAQ,EAAE4B,KAAK,IAAI3B,SAAS,CAAC2B,KAAK,CAACC,MAAN,CAAaC,KAAd;AAJhC;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAUI,QAAC,UAAD;AAAA,iCACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAVJ,eAaI,QAAC,OAAD;AAAS,UAAA,EAAE,EAAE;AAAEC,YAAAA,MAAM,EAAE,EAAV;AAAcC,YAAAA,CAAC,EAAE;AAAjB,WAAb;AAAqC,UAAA,WAAW,EAAC;AAAjD;AAAA;AAAA;AAAA;AAAA,gBAbJ,eAcI,QAAC,UAAD;AAAY,UAAA,OAAO,EAAElC,2BAArB;AAAA,iCACI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAdJ,eAiBI,QAAC,YAAD;AAAc,UAAA,gBAAgB,EAAEF,gBAAhC;AAAkD,UAAA,uBAAuB,EAAEG;AAA3E;AAAA;AAAA;AAAA;AAAA,gBAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AANR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAoCH,CAtED;;GAAMJ,S;;KAAAA,S;AAwEN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Paper from '@mui/material/Paper';\nimport InputBase from '@mui/material/InputBase';\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport SearchIcon from '@mui/icons-material/Search';\nimport LibraryAddIcon from '@mui/icons-material/LibraryAdd';\nimport CreateThread from './CreateThread';\nimport ThreadSearch from '../types/ThreadSearch';\nimport { Typography } from '@material-ui/core';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nconst SearchBar: React.FC = () => {\n    const [openCreateThread, setOpenCreateThread] = React.useState<boolean>(false);\n\n    const handleClickOpenCreateThread = () => {\n      setOpenCreateThread(true);\n    };\n  \n    const handleCloseCreateThread = () => {\n      setOpenCreateThread(false);\n    };\n\n    const [search, setSearch] = useState<string>(\"\");\n    const [results, setResults] = useState<ThreadSearch[]>([]);\n\n    useEffect(() => {\n        const title = search;\n        fetch(\"http://localhost:3000/thread_pages/search/title\", {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                title,\n            }),\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setResults(result);\n                }\n            )\n    }, [search]);\n\n    return (\n        <div style={{paddingTop: '20px', paddingBottom: '20px', position: 'sticky', top: '50px', zIndex: '1100'}}>\n            <Autocomplete\n                disablePortal\n                id=\"combo-box-demo\"\n                options={top100Films}\n                sx={{ width: 300 }}\n                renderInput={(params) => \n                    <Paper\n                    component=\"form\" \n                    sx={{ display: 'flex', alignItems: 'center' }}\n                    >\n                        <InputBase\n                            sx={{ ml: 1, flex: 1 }}\n                            placeholder=\"Who's chatting about what?\"\n                            value={search}\n                            onChange={event => setSearch(event.target.value)}\n                        />\n                        <IconButton>\n                            <SearchIcon />\n                        </IconButton>\n                        <Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" />\n                        <IconButton onClick={handleClickOpenCreateThread}>\n                            <LibraryAddIcon />\n                        </IconButton>\n                        <CreateThread openCreateThread={openCreateThread} handleCloseCreateThread={handleCloseCreateThread} />\n                    </Paper>\n                }\n            />\n            {/* <Paper sx={{flex: 1, justifyItems: \"left\"}}>\n                { results.map(result =>\n                    <Typography key={result.id}>{result.title}</Typography>\n                )}\n            </Paper> */}\n        </div>\n    );\n};\n\nexport default SearchBar;"]},"metadata":{},"sourceType":"module"}