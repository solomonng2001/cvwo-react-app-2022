{"ast":null,"code":"var _jsxFileName = \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/pages/MyThreads.tsx\",\n    _s = $RefreshSig$();\n\nimport Stack from '@mui/material/Stack';\nimport ThreadMainPost from './ThreadMainPost';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyThreads = _ref => {\n  _s();\n\n  let {\n    currentUserState\n  } = _ref;\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [threads, setThreads] = useState([]);\n  useEffect(() => {\n    fetch(\"http://localhost:3000/thread_pages\", {\n      method: 'GET',\n      mode: 'cors'\n    }).then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setThreads(result);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 16\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '50vw',\n        margin: 'auto',\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 2,\n        children: threads.map(thread => /*#__PURE__*/_jsxDEV(ThreadMainPost, {\n          toOverflow: true,\n          thread: thread,\n          currentUserState: currentUserState\n        }, thread.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(MyThreads, \"dMj0J//S5B6eE2SSHF5bLVZcQRI=\");\n\n_c = MyThreads;\nexport default MyThreads;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyThreads\");","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/pages/MyThreads.tsx"],"names":["Stack","ThreadMainPost","React","useState","useEffect","MyThreads","currentUserState","error","setError","isLoaded","setIsLoaded","threads","setThreads","fetch","method","mode","then","res","json","result","message","width","margin","textAlign","map","thread","id"],"mappings":";;;AAEA,OAAOA,KAAP,MAAkB,qBAAlB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;AAMA,MAAMC,SAA0B,GAAG,QAAgC;AAAA;;AAAA,MAA9B;AAACC,IAAAA;AAAD,GAA8B;AAC/D,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAM,IAAN,CAAlC;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAU,KAAV,CAAxC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAW,EAAX,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,KAAK,CAAC,oCAAD,EAAuC;AACxCC,MAAAA,MAAM,EAAE,KADgC;AAExCC,MAAAA,IAAI,EAAE;AAFkC,KAAvC,CAAL,CAIKC,IAJL,CAIUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJjB,EAKKF,IALL,CAMSG,MAAD,IAAY;AACRT,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,UAAU,CAACO,MAAD,CAAV;AACH,KATT,EAUQ;AACA;AACA;AACCZ,IAAAA,KAAD,IAAW;AACPG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,KAhBT;AAkBH,GAnBQ,EAmBN,EAnBM,CAAT;;AAqBA,MAAIA,KAAJ,EAAW;AACP,wBAAO;AAAA,4BAAaA,KAAK,CAACa,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFD,MAEO,IAAI,CAACX,QAAL,EAAe;AAClB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFM,MAEA;AACH,wBACI;AAAK,MAAA,KAAK,EAAE;AAAEY,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,MAAM,EAAE,MAAzB;AAAiCC,QAAAA,SAAS,EAAE;AAA5C,OAAZ;AAAA,6BACI,QAAC,KAAD;AAAO,QAAA,OAAO,EAAE,CAAhB;AAAA,kBACMZ,OAAO,CAACa,GAAR,CAAYC,MAAM,iBAChB,QAAC,cAAD;AAAgB,UAAA,UAAU,EAAE,IAA5B;AAAkC,UAAA,MAAM,EAAEA,MAA1C;AAAkE,UAAA,gBAAgB,EAAEnB;AAApF,WAAuDmB,MAAM,CAACC,EAA9D;AAAA;AAAA;AAAA;AAAA,gBADF;AADN;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;AACJ,CAzCD;;GAAMrB,S;;KAAAA,S;AA2CN,eAAeA,SAAf","sourcesContent":["import { Thread } from '../types/Thread';\nimport CurrentUserState from '../types/CurrentUserState';\nimport Stack from '@mui/material/Stack';\nimport ThreadMainPost from './ThreadMainPost';\n\nimport React, {useState, useEffect} from 'react';\n\ntype Props = {\n    currentUserState: CurrentUserState;\n}\n\nconst MyThreads: React.FC<Props> = ( {currentUserState}: Props) => {\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [threads, setThreads] = useState<Thread[]>([]);\n\n    useEffect(() => {\n        fetch(\"http://localhost:3000/thread_pages\", {\n            method: 'GET',\n            mode: 'cors'\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setThreads(result);\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            )\n    }, []);\n    \n    if (error) {\n        return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div>Loading...</div>;\n    } else {\n        return (\n            <div style={{ width: '50vw', margin: 'auto', textAlign: 'center' }}>\n                <Stack spacing={2}>\n                    { threads.map(thread => (\n                        <ThreadMainPost toOverflow={true} thread={thread} key={thread.id} currentUserState={currentUserState}/>\n                    ))}\n                </Stack>\n            </div>\n        );\n    }\n};\n\nexport default MyThreads;"]},"metadata":{},"sourceType":"module"}