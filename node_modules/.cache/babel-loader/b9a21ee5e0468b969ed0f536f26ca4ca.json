{"ast":null,"code":"import _slicedToArray from\"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import{IconButton}from'@material-ui/core';import DeleteIcon from'@mui/icons-material/Delete';import EditIcon from'@mui/icons-material/Edit';import Stack from'@mui/material/Stack';import CommentIcon from'@mui/icons-material/Comment';import CreateComment from'../comment/CreateComment';import DeleteThread from'./DeleteThread';import UpdateThread from'./UpdateThread';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";// row of delete, edit and comment buttons on thread card\nvar DeleteEditCommentOnThread=function DeleteEditCommentOnThread(_ref){var API=_ref.API,currentUserState=_ref.currentUserState,thread=_ref.thread,globalMessageState=_ref.globalMessageState;// toggle open/close \"create comment\" dialog page\n// allow user to create comment only if logged in (user info required)\nvar _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),openCreateComment=_React$useState2[0],setOpenCreateComment=_React$useState2[1];var handleClickOpenCreateComment=function handleClickOpenCreateComment(){if(currentUserState.isLoggedIn){setOpenCreateComment(true);}else{globalMessageState.setSeverityGlobalMessage(\"error\");globalMessageState.setGlobalMessage([\"Please login to comment\"]);globalMessageState.handleOpenGlobalMessage();}};var handleCloseCreateComment=function handleCloseCreateComment(){setOpenCreateComment(false);};// toggle open/close \"delete thread\" dialog page\nvar _React$useState3=React.useState(false),_React$useState4=_slicedToArray(_React$useState3,2),openDeleteThread=_React$useState4[0],setOpenDeleteThread=_React$useState4[1];var handleClickOpenDeleteThread=function handleClickOpenDeleteThread(){setOpenDeleteThread(true);};var handleCloseDeleteThread=function handleCloseDeleteThread(){setOpenDeleteThread(false);};// toggle open/close \"update/edit thread\" dialog pagae\nvar _React$useState5=React.useState(false),_React$useState6=_slicedToArray(_React$useState5,2),openUpdateThread=_React$useState6[0],setOpenUpdateThread=_React$useState6[1];var handleClickOpenUpdateThread=function handleClickOpenUpdateThread(){setOpenUpdateThread(true);};var handleCloseUpdateThread=function handleCloseUpdateThread(){setOpenUpdateThread(false);};// open \"create comment\" / \"update thread\" / \"delete thread\" dialog pages on clicking respectively buttons\n// display \"update thread\" and \"delete thread\" buttons only for creators that are logged in\nreturn/*#__PURE__*/_jsxs(Stack,{direction:\"row\",justifyContent:\"flex-end\",alignItems:\"center\",spacing:1,children:[/*#__PURE__*/_jsx(IconButton,{onClick:handleClickOpenCreateComment,children:/*#__PURE__*/_jsx(CommentIcon,{})}),/*#__PURE__*/_jsx(CreateComment,{API:API,thread_page_id:thread.id,openCreateComment:openCreateComment,handleCloseCreateComment:handleCloseCreateComment,currentUserState:currentUserState}),thread.user_id===currentUserState.currentUser.id&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(IconButton,{onClick:handleClickOpenUpdateThread,children:/*#__PURE__*/_jsx(EditIcon,{})}),/*#__PURE__*/_jsx(UpdateThread,{API:API,thread_page_id:thread.id,openUpdateThread:openUpdateThread,handleCloseUpdateThread:handleCloseUpdateThread})]}),thread.user_id===currentUserState.currentUser.id&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(IconButton,{onClick:handleClickOpenDeleteThread,children:/*#__PURE__*/_jsx(DeleteIcon,{})}),/*#__PURE__*/_jsx(DeleteThread,{API:API,thread_page_id:thread.id,openDeleteThread:openDeleteThread,handleCloseDeleteThread:handleCloseDeleteThread})]})]});};export default DeleteEditCommentOnThread;","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/thread/DeleteEditCommentOnThread.tsx"],"names":["React","IconButton","DeleteIcon","EditIcon","Stack","CommentIcon","CreateComment","DeleteThread","UpdateThread","DeleteEditCommentOnThread","API","currentUserState","thread","globalMessageState","useState","openCreateComment","setOpenCreateComment","handleClickOpenCreateComment","isLoggedIn","setSeverityGlobalMessage","setGlobalMessage","handleOpenGlobalMessage","handleCloseCreateComment","openDeleteThread","setOpenDeleteThread","handleClickOpenDeleteThread","handleCloseDeleteThread","openUpdateThread","setOpenUpdateThread","handleClickOpenUpdateThread","handleCloseUpdateThread","id","user_id","currentUser"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport Stack from '@mui/material/Stack';\nimport CommentIcon from '@mui/icons-material/Comment';\nimport CreateComment from '../comment/CreateComment';\nimport DeleteThread from './DeleteThread';\nimport UpdateThread from './UpdateThread';\nimport CurrentUserState from '../../types/CurrentUserState';\nimport {Thread} from '../../types/Thread';\nimport GlobalMessageState from '../../types/GlobalMessageState';\n\ntype Props = {\n    commentable: boolean;\n    thread: Thread;\n    currentUserState: CurrentUserState;\n    API: string;\n    globalMessageState: GlobalMessageState;\n};\n\n// row of delete, edit and comment buttons on thread card\nconst DeleteEditCommentOnThread: React.FC<Props> = ({ API, currentUserState, thread, globalMessageState }: Props) => {\n\n    // toggle open/close \"create comment\" dialog page\n    // allow user to create comment only if logged in (user info required)\n    const [openCreateComment, setOpenCreateComment] = React.useState<boolean>(false);\n    const handleClickOpenCreateComment = () => {\n      if (currentUserState.isLoggedIn) {\n        setOpenCreateComment(true);\n      } else {\n        globalMessageState.setSeverityGlobalMessage(\"error\");\n        globalMessageState.setGlobalMessage([\"Please login to comment\"]);\n        globalMessageState.handleOpenGlobalMessage();\n      }\n    };\n    const handleCloseCreateComment = () => {\n      setOpenCreateComment(false);\n    };\n\n    // toggle open/close \"delete thread\" dialog page\n    const [openDeleteThread, setOpenDeleteThread] = React.useState<boolean>(false);\n    const handleClickOpenDeleteThread = () => {\n      setOpenDeleteThread(true);\n    };\n    const handleCloseDeleteThread = () => {\n      setOpenDeleteThread(false);\n    };\n\n    // toggle open/close \"update/edit thread\" dialog pagae\n    const [openUpdateThread, setOpenUpdateThread] = React.useState<boolean>(false);\n    const handleClickOpenUpdateThread = () => {\n      setOpenUpdateThread(true);\n    };\n    const handleCloseUpdateThread = () => {\n      setOpenUpdateThread(false);\n    };\n    \n    // open \"create comment\" / \"update thread\" / \"delete thread\" dialog pages on clicking respectively buttons\n    // display \"update thread\" and \"delete thread\" buttons only for creators that are logged in\n    return (\n        <Stack direction=\"row\" justifyContent='flex-end' alignItems=\"center\" spacing={1}>\n            <IconButton onClick={handleClickOpenCreateComment}>\n                <CommentIcon />\n            </IconButton>\n            <CreateComment API={API} thread_page_id={thread.id} openCreateComment={openCreateComment} handleCloseCreateComment={handleCloseCreateComment} currentUserState={currentUserState}/>\n            { thread.user_id === currentUserState.currentUser.id &&\n              <>\n                <IconButton onClick={handleClickOpenUpdateThread}>\n                  <EditIcon />\n                </IconButton>\n                <UpdateThread API={API} thread_page_id={thread.id} openUpdateThread={openUpdateThread} handleCloseUpdateThread={handleCloseUpdateThread} />\n              </>\n            }\n            { thread.user_id === currentUserState.currentUser.id &&\n              <>\n                <IconButton onClick={handleClickOpenDeleteThread}>\n                  <DeleteIcon />\n                </IconButton>\n                <DeleteThread API={API} thread_page_id={thread.id} openDeleteThread={openDeleteThread} handleCloseDeleteThread={handleCloseDeleteThread} />\n              </>\n            }\n        </Stack>\n    );\n};\n\nexport default DeleteEditCommentOnThread;"]},"metadata":{},"sourceType":"module"}