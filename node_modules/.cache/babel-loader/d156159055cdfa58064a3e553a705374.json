{"ast":null,"code":"var _jsxFileName = \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/DeleteEditCommentOnThread.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport Stack from '@mui/material/Stack';\nimport CommentIcon from '@mui/icons-material/Comment';\nimport CreateComment from './CreateComment';\nimport DeleteThread from './DeleteThread';\nimport UpdateThread from './UpdateThread';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n// row of delete, edit and comment buttons on thread card\nconst DeleteEditCommentOnThread = _ref => {\n  _s();\n\n  let {\n    API,\n    currentUserState,\n    thread,\n    globalMessageState\n  } = _ref;\n  // toggle open/close \"create comment\" dialog page\n  // allow user to create comment only if logged in (user info required)\n  const [openCreateComment, setOpenCreateComment] = React.useState(false);\n\n  const handleClickOpenCreateComment = () => {\n    if (currentUserState.isLoggedIn) {\n      setOpenCreateComment(true);\n    } else {\n      globalMessageState.setSeverityGlobalMessage(\"info\");\n      globalMessageState.setGlobalMessage([\"Please login to comment\"]);\n      globalMessageState.handleOpenGlobalMessage();\n    }\n  };\n\n  const handleCloseCreateComment = () => {\n    setOpenCreateComment(false);\n  }; // toggle open/close \"delete thread\" dialog page\n\n\n  const [openDeleteThread, setOpenDeleteThread] = React.useState(false);\n\n  const handleClickOpenDeleteThread = () => {\n    setOpenDeleteThread(true);\n  };\n\n  const handleCloseDeleteThread = () => {\n    setOpenDeleteThread(false);\n  }; // toggle open/close \"update/edit thread\" dialog pagae\n\n\n  const [openUpdateThread, setOpenUpdateThread] = React.useState(false);\n\n  const handleClickOpenUpdateThread = () => {\n    setOpenUpdateThread(true);\n  };\n\n  const handleCloseUpdateThread = () => {\n    setOpenUpdateThread(false);\n  }; // open \"create comment\" / \"update thread\" / \"delete thread\" dialog pages on clicking respectively buttons\n  // display \"update thread\" and \"delete thread\" buttons only for creators that are logged in\n\n\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    direction: \"row\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n    spacing: 1,\n    children: [/*#__PURE__*/_jsxDEV(IconButton, {\n      onClick: handleClickOpenCreateComment,\n      children: /*#__PURE__*/_jsxDEV(CommentIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CreateComment, {\n      API: API,\n      thread_page_id: thread.id,\n      openCreateComment: openCreateComment,\n      handleCloseCreateComment: handleCloseCreateComment,\n      currentUserState: currentUserState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), thread.user_id === currentUserState.currentUser.id && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: handleClickOpenUpdateThread,\n        children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(UpdateThread, {\n        API: API,\n        thread_page_id: thread.id,\n        openUpdateThread: openUpdateThread,\n        handleCloseUpdateThread: handleCloseUpdateThread\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true), thread.user_id === currentUserState.currentUser.id && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: handleClickOpenDeleteThread,\n        children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DeleteThread, {\n        API: API,\n        thread_page_id: thread.id,\n        openDeleteThread: openDeleteThread,\n        handleCloseDeleteThread: handleCloseDeleteThread\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DeleteEditCommentOnThread, \"G91caCq6uG2qzFUKQzj/EiUREc8=\");\n\n_c = DeleteEditCommentOnThread;\nexport default DeleteEditCommentOnThread;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeleteEditCommentOnThread\");","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/DeleteEditCommentOnThread.tsx"],"names":["React","IconButton","DeleteIcon","EditIcon","Stack","CommentIcon","CreateComment","DeleteThread","UpdateThread","DeleteEditCommentOnThread","API","currentUserState","thread","globalMessageState","openCreateComment","setOpenCreateComment","useState","handleClickOpenCreateComment","isLoggedIn","setSeverityGlobalMessage","setGlobalMessage","handleOpenGlobalMessage","handleCloseCreateComment","openDeleteThread","setOpenDeleteThread","handleClickOpenDeleteThread","handleCloseDeleteThread","openUpdateThread","setOpenUpdateThread","handleClickOpenUpdateThread","handleCloseUpdateThread","id","user_id","currentUser"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport Stack from '@mui/material/Stack';\nimport CommentIcon from '@mui/icons-material/Comment';\nimport CreateComment from './CreateComment';\nimport DeleteThread from './DeleteThread';\nimport UpdateThread from './UpdateThread';\nimport CurrentUserState from '../types/CurrentUserState';\nimport {Thread} from '../types/Thread';\nimport GlobalMessageState from '../types/GlobalMessageState';\n\ntype Props = {\n    commentable: boolean;\n    thread: Thread;\n    currentUserState: CurrentUserState;\n    API: string;\n    globalMessageState: GlobalMessageState;\n};\n\n// row of delete, edit and comment buttons on thread card\nconst DeleteEditCommentOnThread: React.FC<Props> = ({ API, currentUserState, thread, globalMessageState }: Props) => {\n\n    // toggle open/close \"create comment\" dialog page\n    // allow user to create comment only if logged in (user info required)\n    const [openCreateComment, setOpenCreateComment] = React.useState<boolean>(false);\n    const handleClickOpenCreateComment = () => {\n      if (currentUserState.isLoggedIn) {\n        setOpenCreateComment(true);\n      } else {\n        globalMessageState.setSeverityGlobalMessage(\"info\");\n        globalMessageState.setGlobalMessage([\"Please login to comment\"]);\n        globalMessageState.handleOpenGlobalMessage();\n      }\n    };\n    const handleCloseCreateComment = () => {\n      setOpenCreateComment(false);\n    };\n\n    // toggle open/close \"delete thread\" dialog page\n    const [openDeleteThread, setOpenDeleteThread] = React.useState<boolean>(false);\n    const handleClickOpenDeleteThread = () => {\n      setOpenDeleteThread(true);\n    };\n    const handleCloseDeleteThread = () => {\n      setOpenDeleteThread(false);\n    };\n\n    // toggle open/close \"update/edit thread\" dialog pagae\n    const [openUpdateThread, setOpenUpdateThread] = React.useState<boolean>(false);\n    const handleClickOpenUpdateThread = () => {\n      setOpenUpdateThread(true);\n    };\n    const handleCloseUpdateThread = () => {\n      setOpenUpdateThread(false);\n    };\n    \n    // open \"create comment\" / \"update thread\" / \"delete thread\" dialog pages on clicking respectively buttons\n    // display \"update thread\" and \"delete thread\" buttons only for creators that are logged in\n    return (\n        <Stack direction=\"row\" justifyContent='flex-end' alignItems=\"center\" spacing={1}>\n            <IconButton onClick={handleClickOpenCreateComment}>\n                <CommentIcon />\n            </IconButton>\n            <CreateComment API={API} thread_page_id={thread.id} openCreateComment={openCreateComment} handleCloseCreateComment={handleCloseCreateComment} currentUserState={currentUserState}/>\n            { thread.user_id === currentUserState.currentUser.id &&\n              <>\n                <IconButton onClick={handleClickOpenUpdateThread}>\n                  <EditIcon />\n                </IconButton>\n                <UpdateThread API={API} thread_page_id={thread.id} openUpdateThread={openUpdateThread} handleCloseUpdateThread={handleCloseUpdateThread} />\n              </>\n            }\n            { thread.user_id === currentUserState.currentUser.id &&\n              <>\n                <IconButton onClick={handleClickOpenDeleteThread}>\n                  <DeleteIcon />\n                </IconButton>\n                <DeleteThread API={API} thread_page_id={thread.id} openDeleteThread={openDeleteThread} handleCloseDeleteThread={handleCloseDeleteThread} />\n              </>\n            }\n        </Stack>\n    );\n};\n\nexport default DeleteEditCommentOnThread;"]},"metadata":{},"sourceType":"module"}