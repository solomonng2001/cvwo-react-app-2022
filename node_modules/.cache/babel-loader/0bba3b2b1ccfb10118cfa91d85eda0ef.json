{"ast":null,"code":"var _jsxFileName = \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/ThreadList.tsx\",\n    _s = $RefreshSig$();\n\nimport '../App.css';\nimport ThreadMainPost from './ThreadMainPost';\nimport Stack from '@mui/material/Stack';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ThreadList = () => {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]); // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n\n  useEffect(() => {\n    fetch(\"https://api.example.com/items\").then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setItems(result);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 14\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 14\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '50vw',\n        margin: 'auto',\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(ThreadMainPost, {\n          toOverflow: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ThreadMainPost, {\n          toOverflow: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ThreadMainPost, {\n          toOverflow: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ThreadMainPost, {\n          toOverflow: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ThreadMainPost, {\n          toOverflow: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ThreadMainPost, {\n          toOverflow: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ThreadMainPost, {\n          toOverflow: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ThreadMainPost, {\n          toOverflow: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ThreadMainPost, {\n          toOverflow: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ThreadMainPost, {\n          toOverflow: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(ThreadList, \"m9AscAN57M/MODoTwSsNC5AuztA=\");\n\n_c = ThreadList;\nexport default ThreadList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreadList\");","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/ThreadList.tsx"],"names":["ThreadMainPost","Stack","React","useState","useEffect","ThreadList","error","setError","isLoaded","setIsLoaded","items","setItems","fetch","then","res","json","result","width","margin","textAlign"],"mappings":";;;AAAA,OAAO,YAAP;AACA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAEA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,MAAMC,UAAoB,GAAG,MAAM;AAAA;;AAC/B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC,CAH+B,CAK/B;AACA;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,KAAK,CAAC,+BAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGOG,MAAD,IAAY;AACZP,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,QAAQ,CAACK,MAAD,CAAR;AACC,KANP,EAOM;AACA;AACA;AACCV,IAAAA,KAAD,IAAW;AACXG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACC,KAbP;AAeD,GAhBQ,EAgBN,EAhBM,CAAT;;AAkBA,MAAIA,KAAJ,EAAW;AACT,wBAAO;AAAA,4BAAaA,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO,IAAI,CAACE,QAAL,EAAe;AACpB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFM,MAEA;AACH,wBACI;AAAK,MAAA,KAAK,EAAE;AAAES,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,MAAM,EAAE,MAAzB;AAAiCC,QAAAA,SAAS,EAAE;AAA5C,OAAZ;AAAA,6BACI,QAAC,KAAD;AAAO,QAAA,OAAO,EAAE,CAAhB;AAAA,gCACI,QAAC,cAAD;AAAgB,UAAA,UAAU,EAAE;AAA5B;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,cAAD;AAAgB,UAAA,UAAU,EAAE;AAA5B;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,cAAD;AAAgB,UAAA,UAAU,EAAE;AAA5B;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII,QAAC,cAAD;AAAgB,UAAA,UAAU,EAAE;AAA5B;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI,QAAC,cAAD;AAAgB,UAAA,UAAU,EAAE;AAA5B;AAAA;AAAA;AAAA;AAAA,gBALJ,eAMI,QAAC,cAAD;AAAgB,UAAA,UAAU,EAAE;AAA5B;AAAA;AAAA;AAAA;AAAA,gBANJ,eAOI,QAAC,cAAD;AAAgB,UAAA,UAAU,EAAE;AAA5B;AAAA;AAAA;AAAA;AAAA,gBAPJ,eAQI,QAAC,cAAD;AAAgB,UAAA,UAAU,EAAE;AAA5B;AAAA;AAAA;AAAA;AAAA,gBARJ,eASI,QAAC,cAAD;AAAgB,UAAA,UAAU,EAAE;AAA5B;AAAA;AAAA;AAAA;AAAA,gBATJ,eAUI,QAAC,cAAD;AAAgB,UAAA,UAAU,EAAE;AAA5B;AAAA;AAAA;AAAA;AAAA,gBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAgBH;AACJ,CAhDD;;GAAMd,U;;KAAAA,U;AAkDN,eAAeA,UAAf","sourcesContent":["import '../App.css';\nimport ThreadMainPost from './ThreadMainPost';\nimport Stack from '@mui/material/Stack';\n\nimport React, { useState, useEffect } from 'react';\n\nconst ThreadList: React.FC = () => {\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [items, setItems] = useState([]);\n  \n    // Note: the empty deps array [] means\n    // this useEffect will run once\n    // similar to componentDidMount()\n    useEffect(() => {\n      fetch(\"https://api.example.com/items\")\n        .then(res => res.json())\n        .then(\n            (result) => {\n            setIsLoaded(true);\n            setItems(result);\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n            setIsLoaded(true);\n            setError(error);\n            }\n        )\n    }, [])\n  \n    if (error) {\n      return <div>Error: {error}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n        return (\n            <div style={{ width: '50vw', margin: 'auto', textAlign: 'center' }}>\n                <Stack spacing={2}>\n                    <ThreadMainPost toOverflow={true} />\n                    <ThreadMainPost toOverflow={true} />\n                    <ThreadMainPost toOverflow={true} />\n                    <ThreadMainPost toOverflow={true} />\n                    <ThreadMainPost toOverflow={true} />\n                    <ThreadMainPost toOverflow={true} />\n                    <ThreadMainPost toOverflow={true} />\n                    <ThreadMainPost toOverflow={true} />\n                    <ThreadMainPost toOverflow={true} />\n                    <ThreadMainPost toOverflow={true} />\n                </Stack>\n            </div>\n        );\n    }\n};\n\nexport default ThreadList;\n"]},"metadata":{},"sourceType":"module"}