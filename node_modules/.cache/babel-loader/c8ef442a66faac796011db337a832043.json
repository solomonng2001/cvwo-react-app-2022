{"ast":null,"code":"var _jsxFileName = \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/SearchBar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Paper from '@mui/material/Paper';\nimport InputBase from '@mui/material/InputBase';\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport SearchIcon from '@mui/icons-material/Search';\nimport LibraryAddIcon from '@mui/icons-material/LibraryAdd';\nimport CreateThread from './CreateThread';\nimport { Typography, CardActionArea } from '@material-ui/core';\nimport Stack from '@mui/material/Stack';\nimport TagIcon from '@mui/icons-material/Tag';\nimport { strToArray } from '../actions/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// Searchbar: search by both title and tags\nconst SearchBar = _ref => {\n  _s();\n\n  let {\n    setThreadResults,\n    currentUserState,\n    API,\n    globalMessageState\n  } = _ref;\n\n  const handleRedirectToThreadPage = threadID => {\n    window.location.replace(window.location.protocol + \"//\" + window.location.host + '/thread/' + threadID.toString());\n  };\n\n  const [openCreateThread, setOpenCreateThread] = React.useState(false);\n\n  const handleClickOpenCreateThread = () => {\n    if (currentUserState.isLoggedIn) {\n      setOpenCreateThread(true);\n    } else {\n      globalMessageState.setSeverityGlobalMessage(\"info\");\n      globalMessageState.setGlobalMessage([\"Please login to create thread\"]);\n      globalMessageState.handleOpenGlobalMessage();\n    }\n  };\n\n  const handleCloseCreateThread = () => {\n    setOpenCreateThread(false);\n  };\n\n  const [searchByTags, setSearchByTags] = useState(false);\n  const [search, setSearch] = useState(\"\");\n  const [results, setResults] = useState([]); // On clicking search button, POST to backend and set list of threads to search results\n  // Toggle: search by tags pr search by title\n\n  const handleClickSearch = () => {\n    if (search === \"\") {\n      return;\n    } else if (searchByTags) {\n      const tagsArray = strToArray(search);\n      fetch(API + \"/thread_pages/search/tags\", {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          tagsArray\n        })\n      }).then(res => res.json()).then(result => {\n        setThreadResults(result);\n      });\n    } else {\n      const title = search;\n      fetch(API + \"/thread_pages/search/title\", {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title\n        })\n      }).then(res => res.json()).then(result => {\n        setThreadResults(result);\n      });\n    }\n  }; // On change in search bar, post to backend, update results in dropdown menu\n  // Toggle: dropdown displays tags or titles\n\n\n  useEffect(() => {\n    if (search === \"\") {\n      setResults([]);\n    } else if (searchByTags) {\n      const tagsArray = strToArray(search);\n      console.log(tagsArray);\n      fetch(API + \"/thread_pages/search/tags/autocomplete\", {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          tagsArray\n        })\n      }).then(res => res.json()).then(result => {\n        setResults(result);\n      });\n    } else {\n      const title = search;\n      fetch(API + \"/thread_pages/search/title/autocomplete\", {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title\n        })\n      }).then(res => res.json()).then(result => {\n        setResults(result);\n      });\n    }\n  }, [search, searchByTags, API]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      paddingTop: '20px',\n      paddingBottom: '20px',\n      position: 'sticky',\n      top: '50px',\n      zIndex: '1100'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      component: \"form\",\n      sx: {\n        display: 'flex',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(InputBase, {\n        sx: {\n          ml: 1,\n          flex: 1\n        },\n        placeholder: searchByTags ? \"Search by Tags: #HawkerFood #Travel # School\" : \"Search by Title\",\n        value: search,\n        onChange: event => setSearch(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: handleClickSearch,\n        children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: () => setSearchByTags(!searchByTags),\n        children: /*#__PURE__*/_jsxDEV(TagIcon, {\n          color: searchByTags ? 'primary' : \"disabled\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        sx: {\n          height: 28,\n          m: 0.5\n        },\n        orientation: \"vertical\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: handleClickOpenCreateThread,\n        children: /*#__PURE__*/_jsxDEV(LibraryAddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CreateThread, {\n        API: API,\n        openCreateThread: openCreateThread,\n        handleCloseCreateThread: handleCloseCreateThread,\n        currentUserState: currentUserState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), results.length > 0 && /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        justifyItems: \"flex-start\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        direction: \"column\",\n        alignItems: \"flex-start\",\n        children: results.map(result => /*#__PURE__*/_jsxDEV(CardActionArea, {\n          style: {\n            paddingTop: 3,\n            paddingBottom: 3,\n            paddingLeft: 8\n          },\n          onClick: () => handleRedirectToThreadPage(result.id),\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            align: \"left\",\n            children: result.title\n          }, result.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchBar, \"IQh8Nv0zcmbZfc41xAK9zfDCm74=\");\n\n_c = SearchBar;\nexport default SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/SearchBar.tsx"],"names":["React","useEffect","useState","Paper","InputBase","Divider","IconButton","SearchIcon","LibraryAddIcon","CreateThread","Typography","CardActionArea","Stack","TagIcon","strToArray","SearchBar","setThreadResults","currentUserState","API","globalMessageState","handleRedirectToThreadPage","threadID","window","location","replace","protocol","host","toString","openCreateThread","setOpenCreateThread","handleClickOpenCreateThread","isLoggedIn","setSeverityGlobalMessage","setGlobalMessage","handleOpenGlobalMessage","handleCloseCreateThread","searchByTags","setSearchByTags","search","setSearch","results","setResults","handleClickSearch","tagsArray","fetch","method","mode","headers","body","JSON","stringify","then","res","json","result","title","console","log","paddingTop","paddingBottom","position","top","zIndex","display","alignItems","ml","flex","event","target","value","height","m","length","justifyItems","map","paddingLeft","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Paper from '@mui/material/Paper';\nimport InputBase from '@mui/material/InputBase';\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport SearchIcon from '@mui/icons-material/Search';\nimport LibraryAddIcon from '@mui/icons-material/LibraryAdd';\nimport CreateThread from './CreateThread';\nimport ThreadSearch from '../types/ThreadSearch';\nimport { Typography, CardActionArea } from '@material-ui/core';\nimport Stack from '@mui/material/Stack';\nimport TagIcon from '@mui/icons-material/Tag';\nimport { strToArray } from '../actions/actions';\nimport { Thread } from '../types/Thread';\nimport CurrentUserState from '../types/CurrentUserState';\nimport GlobalMessageState from '../types/GlobalMessageState';\n\ntype Props = {\n    setThreadResults: React.Dispatch<React.SetStateAction<Thread[]>>;\n    currentUserState: CurrentUserState;\n    API: string;\n    globalMessageState: GlobalMessageState;\n}\n\n// Searchbar: search by both title and tags\nconst SearchBar: React.FC<Props> = ({setThreadResults, currentUserState, API, globalMessageState}: Props) => {\n    const handleRedirectToThreadPage = (threadID: number) => {\n        window.location.replace(\n            window.location.protocol + \"//\" + window.location.host + '/thread/' + threadID.toString()\n        );\n    }\n\n    const [openCreateThread, setOpenCreateThread] = React.useState<boolean>(false);\n\n    const handleClickOpenCreateThread = () => {\n        if (currentUserState.isLoggedIn) {\n            setOpenCreateThread(true);\n        } else {\n            globalMessageState.setSeverityGlobalMessage(\"info\");\n            globalMessageState.setGlobalMessage([\"Please login to create thread\"]);\n            globalMessageState.handleOpenGlobalMessage();\n        }\n    };\n  \n    const handleCloseCreateThread = () => {\n      setOpenCreateThread(false);\n    };\n\n    const [searchByTags, setSearchByTags] = useState<Boolean>(false);\n    const [search, setSearch] = useState<string>(\"\");\n    const [results, setResults] = useState<ThreadSearch[]>([]);\n\n    // On clicking search button, POST to backend and set list of threads to search results\n    // Toggle: search by tags pr search by title\n    const handleClickSearch = () => {\n        if (search === \"\") {\n            return;\n        } else if (searchByTags) {\n            const tagsArray = strToArray(search);\n            fetch(API + \"/thread_pages/search/tags\", {\n                method: 'POST',\n                mode: 'cors',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    tagsArray,\n                }),\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setThreadResults(result);\n                    }\n                )\n        } else {\n            const title = search;\n            fetch(API + \"/thread_pages/search/title\", {\n                method: 'POST',\n                mode: 'cors',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    title,\n                }),\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setThreadResults(result);\n                    }\n                )\n        }\n    }\n\n    // On change in search bar, post to backend, update results in dropdown menu\n    // Toggle: dropdown displays tags or titles\n    useEffect(() => {\n        if (search === \"\") {\n            setResults([]);\n        }\n        else if (searchByTags) {\n            const tagsArray = strToArray(search);\n            console.log(tagsArray);\n            fetch(API + \"/thread_pages/search/tags/autocomplete\", {\n                method: 'POST',\n                mode: 'cors',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    tagsArray,\n                }),\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setResults(result);\n                    }\n                )\n        } else {\n            const title = search;\n            fetch(API + \"/thread_pages/search/title/autocomplete\", {\n                method: 'POST',\n                mode: 'cors',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    title,\n                }),\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setResults(result);\n                    }\n                )\n        }\n    }, [search, searchByTags, API]);\n\n    return (\n        <div style={{paddingTop: '20px', paddingBottom: '20px', position: 'sticky', top: '50px', zIndex: '1100'}}>\n            <Paper\n            component=\"form\" \n            sx={{ display: 'flex', alignItems: 'center' }}\n            >\n                {/* Search input area: let's user know if in tags or title mode using placeholders */}\n                <InputBase\n                    sx={{ ml: 1, flex: 1 }}\n                    placeholder={\n                        searchByTags ? \"Search by Tags: #HawkerFood #Travel # School\" : \"Search by Title\"}\n                    value={search}\n                    onChange={event => setSearch(event.target.value)}\n                />\n                {/* Search and refresh threads list in home page to display new search results */}\n                <IconButton onClick={handleClickSearch}>\n                    <SearchIcon />\n                </IconButton>\n                {/* Toggle \"search by tags\" button (search by tags when on, search by title when off) */}\n                <IconButton onClick={() => setSearchByTags(!searchByTags)}>\n                    <TagIcon color={searchByTags ? 'primary' : \"disabled\"}/>\n                </IconButton>\n                <Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" />\n                <IconButton onClick={handleClickOpenCreateThread}>\n                    <LibraryAddIcon />\n                </IconButton>\n                <CreateThread API={API} openCreateThread={openCreateThread} handleCloseCreateThread={handleCloseCreateThread} currentUserState={currentUserState}/>\n            </Paper>\n            { results.length > 0 &&\n                <Paper sx={{justifyItems: \"flex-start\"}}>\n                    <Stack direction=\"column\" alignItems=\"flex-start\">\n                        { results.map(result =>\n                                <CardActionArea style={{paddingTop: 3, paddingBottom: 3, paddingLeft: 8}} \n                                    onClick={() => handleRedirectToThreadPage(result.id)}\n                                >\n                                    <Typography key={result.id} align=\"left\">{result.title}</Typography>\n                                </CardActionArea>\n                        )}\n                    </Stack>\n                </Paper>\n            }\n        </div>\n    );\n};\n\nexport default SearchBar;"]},"metadata":{},"sourceType":"module"}