{"ast":null,"code":"import _slicedToArray from \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"autoFocus\", \"children\", \"component\", \"defaultListboxOpen\", \"defaultValue\", \"disabled\", \"getSerializedValue\", \"listboxId\", \"listboxOpen\", \"name\", \"onChange\", \"onListboxOpenChange\", \"optionStringifier\", \"renderValue\", \"slotProps\", \"slots\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef, unstable_useControlled as useControlled } from '@mui/utils';\nimport { flattenOptionGroups, getOptionsFromChildren } from '../SelectUnstyled/utils';\nimport useSelect from '../SelectUnstyled/useSelect';\nimport { useSlotProps } from '../utils';\nimport PopperUnstyled from '../PopperUnstyled';\nimport { SelectUnstyledContext } from '../SelectUnstyled/SelectUnstyledContext';\nimport composeClasses from '../composeClasses';\nimport { getSelectUnstyledUtilityClass } from '../SelectUnstyled/selectUnstyledClasses';\nimport defaultOptionStringifier from '../SelectUnstyled/defaultOptionStringifier';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction defaultRenderMultipleValues(selectedOptions) {\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: selectedOptions.map(function (o) {\n      return o.label;\n    }).join(', ')\n  });\n}\n\nfunction defaultFormValueProvider(selectedOptions) {\n  if (selectedOptions.length === 0) {\n    return '';\n  }\n\n  if (selectedOptions.every(function (o) {\n    return typeof o.value === 'string' || typeof o.value === 'number' || typeof o.value === 'boolean';\n  })) {\n    return selectedOptions.map(function (o) {\n      return String(o.value);\n    });\n  }\n\n  return JSON.stringify(selectedOptions.map(function (o) {\n    return o.value;\n  }));\n}\n\nfunction useUtilityClasses(ownerState) {\n  var active = ownerState.active,\n      disabled = ownerState.disabled,\n      open = ownerState.open,\n      focusVisible = ownerState.focusVisible;\n  var slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active', open && 'expanded'],\n    listbox: ['listbox', disabled && 'disabled'],\n    popper: ['popper']\n  };\n  return composeClasses(slots, getSelectUnstyledUtilityClass, {});\n}\n/**\n * The foundation for building custom-styled multi-selection select components.\n *\n * Demos:\n *\n * - [Unstyled Select](https://mui.com/base/react-select/)\n *\n * API:\n *\n * - [MultiSelectUnstyled API](https://mui.com/base/api/multi-select-unstyled/)\n */\n\n\nvar MultiSelectUnstyled = /*#__PURE__*/React.forwardRef(function MultiSelectUnstyled(props, forwardedRef) {\n  var _ref, _slots$listbox, _slots$popper;\n\n  var autoFocus = props.autoFocus,\n      children = props.children,\n      component = props.component,\n      _props$defaultListbox = props.defaultListboxOpen,\n      defaultListboxOpen = _props$defaultListbox === void 0 ? false : _props$defaultListbox,\n      _props$defaultValue = props.defaultValue,\n      defaultValue = _props$defaultValue === void 0 ? [] : _props$defaultValue,\n      disabledProp = props.disabled,\n      _props$getSerializedV = props.getSerializedValue,\n      getSerializedValue = _props$getSerializedV === void 0 ? defaultFormValueProvider : _props$getSerializedV,\n      listboxId = props.listboxId,\n      listboxOpenProp = props.listboxOpen,\n      name = props.name,\n      onChange = props.onChange,\n      onListboxOpenChange = props.onListboxOpenChange,\n      _props$optionStringif = props.optionStringifier,\n      optionStringifier = _props$optionStringif === void 0 ? defaultOptionStringifier : _props$optionStringif,\n      renderValueProp = props.renderValue,\n      _props$slotProps = props.slotProps,\n      slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n      _props$slots = props.slots,\n      slots = _props$slots === void 0 ? {} : _props$slots,\n      valueProp = props.value,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var renderValue = renderValueProp != null ? renderValueProp : defaultRenderMultipleValues;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      groupedOptions = _React$useState2[0],\n      setGroupedOptions = _React$useState2[1];\n\n  var options = React.useMemo(function () {\n    return flattenOptionGroups(groupedOptions);\n  }, [groupedOptions]);\n\n  var _useControlled = useControlled({\n    controlled: listboxOpenProp,\n    default: defaultListboxOpen,\n    name: 'MultiSelectUnstyled',\n    state: 'listboxOpen'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      listboxOpen = _useControlled2[0],\n      setListboxOpen = _useControlled2[1];\n\n  React.useEffect(function () {\n    setGroupedOptions(getOptionsFromChildren(children));\n  }, [children]);\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      buttonDefined = _React$useState4[0],\n      setButtonDefined = _React$useState4[1];\n\n  var buttonRef = React.useRef(null);\n  var listboxRef = React.useRef(null);\n  var Button = (_ref = component != null ? component : slots.root) != null ? _ref : 'button';\n  var ListboxRoot = (_slots$listbox = slots.listbox) != null ? _slots$listbox : 'ul';\n  var Popper = (_slots$popper = slots.popper) != null ? _slots$popper : PopperUnstyled;\n  var handleButtonRefChange = React.useCallback(function (element) {\n    setButtonDefined(element != null);\n  }, []);\n  var handleButtonRef = useForkRef(forwardedRef, buttonRef, handleButtonRefChange);\n  React.useEffect(function () {\n    if (autoFocus) {\n      buttonRef.current.focus();\n    }\n  }, [autoFocus]);\n\n  var handleOpenChange = function handleOpenChange(isOpen) {\n    setListboxOpen(isOpen);\n    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);\n  };\n\n  var _useSelect = useSelect({\n    buttonRef: handleButtonRef,\n    defaultValue: defaultValue,\n    disabled: disabledProp,\n    listboxId: listboxId,\n    multiple: true,\n    onChange: onChange,\n    onOpenChange: handleOpenChange,\n    open: listboxOpen,\n    options: options,\n    optionStringifier: optionStringifier,\n    value: valueProp\n  }),\n      buttonActive = _useSelect.buttonActive,\n      buttonFocusVisible = _useSelect.buttonFocusVisible,\n      disabled = _useSelect.disabled,\n      getButtonProps = _useSelect.getButtonProps,\n      getListboxProps = _useSelect.getListboxProps,\n      getOptionProps = _useSelect.getOptionProps,\n      getOptionState = _useSelect.getOptionState,\n      value = _useSelect.value;\n\n  var ownerState = _extends({}, props, {\n    active: buttonActive,\n    defaultListboxOpen: defaultListboxOpen,\n    disabled: disabled,\n    focusVisible: buttonFocusVisible,\n    open: listboxOpen,\n    renderValue: renderValue,\n    value: value\n  });\n\n  var classes = useUtilityClasses(ownerState);\n  var selectedOptions = React.useMemo(function () {\n    if (value == null) {\n      return [];\n    }\n\n    return options.filter(function (o) {\n      return value.includes(o.value);\n    });\n  }, [options, value]);\n  var buttonProps = useSlotProps({\n    elementType: Button,\n    getSlotProps: getButtonProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    ownerState: ownerState,\n    className: classes.root\n  });\n  var listboxProps = useSlotProps({\n    elementType: ListboxRoot,\n    getSlotProps: getListboxProps,\n    externalSlotProps: slotProps.listbox,\n    additionalProps: {\n      ref: listboxRef\n    },\n    ownerState: ownerState,\n    className: classes.listbox\n  });\n  var popperProps = useSlotProps({\n    elementType: Popper,\n    externalSlotProps: slotProps.popper,\n    additionalProps: {\n      anchorEl: buttonRef.current,\n      disablePortal: true,\n      open: listboxOpen,\n      placement: 'bottom-start',\n      role: undefined\n    },\n    ownerState: ownerState,\n    className: classes.popper\n  });\n  var context = React.useMemo(function () {\n    return {\n      getOptionProps: getOptionProps,\n      getOptionState: getOptionState,\n      listboxRef: listboxRef\n    };\n  }, [getOptionProps, getOptionState]);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Button, _extends({}, buttonProps, {\n      children: renderValue(selectedOptions)\n    })), buttonDefined && /*#__PURE__*/_jsx(Popper, _extends({}, popperProps, {\n      children: /*#__PURE__*/_jsx(ListboxRoot, _extends({}, listboxProps, {\n        children: /*#__PURE__*/_jsx(SelectUnstyledContext.Provider, {\n          value: context,\n          children: children\n        })\n      }))\n    })), name && /*#__PURE__*/_jsx(\"input\", {\n      type: \"hidden\",\n      name: name,\n      value: getSerializedValue(selectedOptions)\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? MultiSelectUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the select element is focused during the first mount\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the select will be initially open.\n   * @default false\n   */\n  defaultListboxOpen: PropTypes.bool,\n\n  /**\n   * The default selected values. Use when the component is not controlled.\n   * @default []\n   */\n  defaultValue: PropTypes.array,\n\n  /**\n   * If `true`, the select is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * A function to convert the currently selected values to a type accepted by HTML input.\n   * Used to set a value of a hidden input associated with the select,\n   * so that the selected values can be posted with a form.\n   */\n  getSerializedValue: PropTypes.func,\n\n  /**\n   * `id` attribute of the listbox element.\n   * Also used to derive the `id` attributes of options.\n   */\n  listboxId: PropTypes.string,\n\n  /**\n   * Controls the open state of the select's listbox.\n   * @default undefined\n   */\n  listboxOpen: PropTypes.bool,\n\n  /**\n   * Name of the element. For example used by the server to identify the fields in form submits.\n   * If the name is provided, the component will render a hidden input element that can be submitted to a server.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when an option is selected.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see listboxOpen).\n   */\n  onListboxOpenChange: PropTypes.func,\n\n  /**\n   * A function used to convert the option label to a string.\n   * It's useful when labels are elements and need to be converted to plain text\n   * to enable navigation using character keys on a keyboard.\n   *\n   * @default defaultOptionStringifier\n   */\n  optionStringifier: PropTypes.func,\n\n  /**\n   * Function that customizes the rendering of the selected values.\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * The props used for each slot inside the MultiSelect.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the MultiSelect.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    listbox: PropTypes.elementType,\n    popper: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n\n  /**\n   * The selected values.\n   * Set to an empty array to deselect all options.\n   */\n  value: PropTypes.array\n} : void 0;\nexport default MultiSelectUnstyled;","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/node_modules/@mui/base/MultiSelectUnstyled/MultiSelectUnstyled.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","unstable_useForkRef","useForkRef","unstable_useControlled","useControlled","flattenOptionGroups","getOptionsFromChildren","useSelect","useSlotProps","PopperUnstyled","SelectUnstyledContext","composeClasses","getSelectUnstyledUtilityClass","defaultOptionStringifier","jsx","_jsx","jsxs","_jsxs","defaultRenderMultipleValues","selectedOptions","Fragment","children","map","o","label","join","defaultFormValueProvider","length","every","value","String","JSON","stringify","useUtilityClasses","ownerState","active","disabled","open","focusVisible","slots","root","listbox","popper","MultiSelectUnstyled","forwardRef","props","forwardedRef","_ref","_slots$listbox","_slots$popper","autoFocus","component","defaultListboxOpen","defaultValue","disabledProp","getSerializedValue","listboxId","listboxOpenProp","listboxOpen","name","onChange","onListboxOpenChange","optionStringifier","renderValueProp","renderValue","slotProps","valueProp","other","useState","groupedOptions","setGroupedOptions","options","useMemo","controlled","default","state","setListboxOpen","useEffect","buttonDefined","setButtonDefined","buttonRef","useRef","listboxRef","Button","ListboxRoot","Popper","handleButtonRefChange","useCallback","element","handleButtonRef","current","focus","handleOpenChange","isOpen","multiple","onOpenChange","buttonActive","buttonFocusVisible","getButtonProps","getListboxProps","getOptionProps","getOptionState","classes","filter","includes","buttonProps","elementType","getSlotProps","externalSlotProps","externalForwardedProps","className","listboxProps","additionalProps","ref","popperProps","anchorEl","disablePortal","placement","role","undefined","context","Provider","type","process","env","NODE_ENV","propTypes","bool","node","array","func","string","shape","oneOfType","object"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"autoFocus\", \"children\", \"component\", \"defaultListboxOpen\", \"defaultValue\", \"disabled\", \"getSerializedValue\", \"listboxId\", \"listboxOpen\", \"name\", \"onChange\", \"onListboxOpenChange\", \"optionStringifier\", \"renderValue\", \"slotProps\", \"slots\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef, unstable_useControlled as useControlled } from '@mui/utils';\nimport { flattenOptionGroups, getOptionsFromChildren } from '../SelectUnstyled/utils';\nimport useSelect from '../SelectUnstyled/useSelect';\nimport { useSlotProps } from '../utils';\nimport PopperUnstyled from '../PopperUnstyled';\nimport { SelectUnstyledContext } from '../SelectUnstyled/SelectUnstyledContext';\nimport composeClasses from '../composeClasses';\nimport { getSelectUnstyledUtilityClass } from '../SelectUnstyled/selectUnstyledClasses';\nimport defaultOptionStringifier from '../SelectUnstyled/defaultOptionStringifier';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction defaultRenderMultipleValues(selectedOptions) {\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: selectedOptions.map(o => o.label).join(', ')\n  });\n}\nfunction defaultFormValueProvider(selectedOptions) {\n  if (selectedOptions.length === 0) {\n    return '';\n  }\n  if (selectedOptions.every(o => typeof o.value === 'string' || typeof o.value === 'number' || typeof o.value === 'boolean')) {\n    return selectedOptions.map(o => String(o.value));\n  }\n  return JSON.stringify(selectedOptions.map(o => o.value));\n}\nfunction useUtilityClasses(ownerState) {\n  const {\n    active,\n    disabled,\n    open,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active', open && 'expanded'],\n    listbox: ['listbox', disabled && 'disabled'],\n    popper: ['popper']\n  };\n  return composeClasses(slots, getSelectUnstyledUtilityClass, {});\n}\n\n/**\n * The foundation for building custom-styled multi-selection select components.\n *\n * Demos:\n *\n * - [Unstyled Select](https://mui.com/base/react-select/)\n *\n * API:\n *\n * - [MultiSelectUnstyled API](https://mui.com/base/api/multi-select-unstyled/)\n */\nconst MultiSelectUnstyled = /*#__PURE__*/React.forwardRef(function MultiSelectUnstyled(props, forwardedRef) {\n  var _ref, _slots$listbox, _slots$popper;\n  const {\n      autoFocus,\n      children,\n      component,\n      defaultListboxOpen = false,\n      defaultValue = [],\n      disabled: disabledProp,\n      getSerializedValue = defaultFormValueProvider,\n      listboxId,\n      listboxOpen: listboxOpenProp,\n      name,\n      onChange,\n      onListboxOpenChange,\n      optionStringifier = defaultOptionStringifier,\n      renderValue: renderValueProp,\n      slotProps = {},\n      slots = {},\n      value: valueProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const renderValue = renderValueProp != null ? renderValueProp : defaultRenderMultipleValues;\n  const [groupedOptions, setGroupedOptions] = React.useState([]);\n  const options = React.useMemo(() => flattenOptionGroups(groupedOptions), [groupedOptions]);\n  const [listboxOpen, setListboxOpen] = useControlled({\n    controlled: listboxOpenProp,\n    default: defaultListboxOpen,\n    name: 'MultiSelectUnstyled',\n    state: 'listboxOpen'\n  });\n  React.useEffect(() => {\n    setGroupedOptions(getOptionsFromChildren(children));\n  }, [children]);\n  const [buttonDefined, setButtonDefined] = React.useState(false);\n  const buttonRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const Button = (_ref = component != null ? component : slots.root) != null ? _ref : 'button';\n  const ListboxRoot = (_slots$listbox = slots.listbox) != null ? _slots$listbox : 'ul';\n  const Popper = (_slots$popper = slots.popper) != null ? _slots$popper : PopperUnstyled;\n  const handleButtonRefChange = React.useCallback(element => {\n    setButtonDefined(element != null);\n  }, []);\n  const handleButtonRef = useForkRef(forwardedRef, buttonRef, handleButtonRefChange);\n  React.useEffect(() => {\n    if (autoFocus) {\n      buttonRef.current.focus();\n    }\n  }, [autoFocus]);\n  const handleOpenChange = isOpen => {\n    setListboxOpen(isOpen);\n    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);\n  };\n  const {\n    buttonActive,\n    buttonFocusVisible,\n    disabled,\n    getButtonProps,\n    getListboxProps,\n    getOptionProps,\n    getOptionState,\n    value\n  } = useSelect({\n    buttonRef: handleButtonRef,\n    defaultValue,\n    disabled: disabledProp,\n    listboxId,\n    multiple: true,\n    onChange,\n    onOpenChange: handleOpenChange,\n    open: listboxOpen,\n    options,\n    optionStringifier,\n    value: valueProp\n  });\n  const ownerState = _extends({}, props, {\n    active: buttonActive,\n    defaultListboxOpen,\n    disabled,\n    focusVisible: buttonFocusVisible,\n    open: listboxOpen,\n    renderValue,\n    value\n  });\n  const classes = useUtilityClasses(ownerState);\n  const selectedOptions = React.useMemo(() => {\n    if (value == null) {\n      return [];\n    }\n    return options.filter(o => value.includes(o.value));\n  }, [options, value]);\n  const buttonProps = useSlotProps({\n    elementType: Button,\n    getSlotProps: getButtonProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    ownerState,\n    className: classes.root\n  });\n  const listboxProps = useSlotProps({\n    elementType: ListboxRoot,\n    getSlotProps: getListboxProps,\n    externalSlotProps: slotProps.listbox,\n    additionalProps: {\n      ref: listboxRef\n    },\n    ownerState,\n    className: classes.listbox\n  });\n  const popperProps = useSlotProps({\n    elementType: Popper,\n    externalSlotProps: slotProps.popper,\n    additionalProps: {\n      anchorEl: buttonRef.current,\n      disablePortal: true,\n      open: listboxOpen,\n      placement: 'bottom-start',\n      role: undefined\n    },\n    ownerState,\n    className: classes.popper\n  });\n  const context = React.useMemo(() => ({\n    getOptionProps,\n    getOptionState,\n    listboxRef\n  }), [getOptionProps, getOptionState]);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Button, _extends({}, buttonProps, {\n      children: renderValue(selectedOptions)\n    })), buttonDefined && /*#__PURE__*/_jsx(Popper, _extends({}, popperProps, {\n      children: /*#__PURE__*/_jsx(ListboxRoot, _extends({}, listboxProps, {\n        children: /*#__PURE__*/_jsx(SelectUnstyledContext.Provider, {\n          value: context,\n          children: children\n        })\n      }))\n    })), name && /*#__PURE__*/_jsx(\"input\", {\n      type: \"hidden\",\n      name: name,\n      value: getSerializedValue(selectedOptions)\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? MultiSelectUnstyled.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the select element is focused during the first mount\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the select will be initially open.\n   * @default false\n   */\n  defaultListboxOpen: PropTypes.bool,\n  /**\n   * The default selected values. Use when the component is not controlled.\n   * @default []\n   */\n  defaultValue: PropTypes.array,\n  /**\n   * If `true`, the select is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * A function to convert the currently selected values to a type accepted by HTML input.\n   * Used to set a value of a hidden input associated with the select,\n   * so that the selected values can be posted with a form.\n   */\n  getSerializedValue: PropTypes.func,\n  /**\n   * `id` attribute of the listbox element.\n   * Also used to derive the `id` attributes of options.\n   */\n  listboxId: PropTypes.string,\n  /**\n   * Controls the open state of the select's listbox.\n   * @default undefined\n   */\n  listboxOpen: PropTypes.bool,\n  /**\n   * Name of the element. For example used by the server to identify the fields in form submits.\n   * If the name is provided, the component will render a hidden input element that can be submitted to a server.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when an option is selected.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see listboxOpen).\n   */\n  onListboxOpenChange: PropTypes.func,\n  /**\n   * A function used to convert the option label to a string.\n   * It's useful when labels are elements and need to be converted to plain text\n   * to enable navigation using character keys on a keyboard.\n   *\n   * @default defaultOptionStringifier\n   */\n  optionStringifier: PropTypes.func,\n  /**\n   * Function that customizes the rendering of the selected values.\n   */\n  renderValue: PropTypes.func,\n  /**\n   * The props used for each slot inside the MultiSelect.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the MultiSelect.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    listbox: PropTypes.elementType,\n    popper: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\n   * The selected values.\n   * Set to an empty array to deselect all options.\n   */\n  value: PropTypes.array\n} : void 0;\nexport default MultiSelectUnstyled;"]},"metadata":{},"sourceType":"module"}