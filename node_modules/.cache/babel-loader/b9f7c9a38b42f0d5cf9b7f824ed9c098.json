{"ast":null,"code":"import _slicedToArray from\"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import Paper from'@mui/material/Paper';import InputBase from'@mui/material/InputBase';import Divider from'@mui/material/Divider';import IconButton from'@mui/material/IconButton';import SearchIcon from'@mui/icons-material/Search';import LibraryAddIcon from'@mui/icons-material/LibraryAdd';import CreateThread from'./thread/CreateThread';import{Typography,CardActionArea}from'@material-ui/core';import Stack from'@mui/material/Stack';import TagIcon from'@mui/icons-material/Tag';import{strToArray}from'../actions/actions';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";// Searchbar: search by both title and tags\nvar SearchBar=function SearchBar(_ref){var setThreadResults=_ref.setThreadResults,currentUserState=_ref.currentUserState,API=_ref.API,globalMessageState=_ref.globalMessageState;var handleRedirectToThreadPage=function handleRedirectToThreadPage(threadID){window.location.replace(window.location.protocol+\"//\"+window.location.host+'/thread/'+threadID.toString());};// toggle close/open create thread dialog page\nvar _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),openCreateThread=_React$useState2[0],setOpenCreateThread=_React$useState2[1];var handleClickOpenCreateThread=function handleClickOpenCreateThread(){// only allow logged in users to create thread\nif(currentUserState.isLoggedIn){setOpenCreateThread(true);}else{globalMessageState.setSeverityGlobalMessage(\"error\");globalMessageState.setGlobalMessage([\"Please login to create thread\"]);globalMessageState.handleOpenGlobalMessage();}};var handleCloseCreateThread=function handleCloseCreateThread(){setOpenCreateThread(false);};var _useState=useState(false),_useState2=_slicedToArray(_useState,2),searchByTags=_useState2[0],setSearchByTags=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),search=_useState4[0],setSearch=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),results=_useState6[0],setResults=_useState6[1];// On clicking search button, POST to backend and set list of threads to search results\n// Toggle: search by tags pr search by title\nvar handleClickSearch=function handleClickSearch(){if(search===\"\"){return;}else if(searchByTags){var tagsArray=strToArray(search);fetch(API+\"/thread_pages/search/tags\",{method:'POST',mode:'cors',headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({tagsArray:tagsArray})}).then(function(res){return res.json();}).then(function(result){setThreadResults(result);});}else{var title=search;fetch(API+\"/thread_pages/search/title\",{method:'POST',mode:'cors',headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({title:title})}).then(function(res){return res.json();}).then(function(result){setThreadResults(result);});}};// On change in search bar, post to backend, update results in dropdown menu\n// Toggle: dropdown displays tags or titles\nuseEffect(function(){if(search===\"\"){setResults([]);}else if(searchByTags){var tagsArray=strToArray(search);console.log(tagsArray);fetch(API+\"/thread_pages/search/tags/autocomplete\",{method:'POST',mode:'cors',headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({tagsArray:tagsArray})}).then(function(res){return res.json();}).then(function(result){setResults(result);});}else{var title=search;fetch(API+\"/thread_pages/search/title/autocomplete\",{method:'POST',mode:'cors',headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({title:title})}).then(function(res){return res.json();}).then(function(result){setResults(result);});}},[search,searchByTags,API]);return/*#__PURE__*/_jsxs(\"div\",{style:{paddingTop:'20px',paddingBottom:'20px',position:'sticky',top:'50px',zIndex:'1100'},children:[/*#__PURE__*/_jsxs(Paper,{component:\"form\",sx:{display:'flex',alignItems:'center'},children:[/*#__PURE__*/_jsx(InputBase,{sx:{ml:1,flex:1},placeholder:searchByTags?\"Search by Tags: #HawkerFood #Travel # School\":\"Search by Title\",value:search,onChange:function onChange(event){return setSearch(event.target.value);}}),/*#__PURE__*/_jsx(IconButton,{onClick:handleClickSearch,children:/*#__PURE__*/_jsx(SearchIcon,{})}),/*#__PURE__*/_jsx(IconButton,{onClick:function onClick(){return setSearchByTags(!searchByTags);},children:/*#__PURE__*/_jsx(TagIcon,{color:searchByTags?'primary':\"disabled\"})}),/*#__PURE__*/_jsx(Divider,{sx:{height:28,m:0.5},orientation:\"vertical\"}),/*#__PURE__*/_jsx(IconButton,{onClick:handleClickOpenCreateThread,children:/*#__PURE__*/_jsx(LibraryAddIcon,{})}),/*#__PURE__*/_jsx(CreateThread,{API:API,openCreateThread:openCreateThread,handleCloseCreateThread:handleCloseCreateThread,currentUserState:currentUserState})]}),results.length>0&&/*#__PURE__*/_jsx(Paper,{sx:{justifyItems:\"flex-start\"},children:/*#__PURE__*/_jsx(Stack,{direction:\"column\",alignItems:\"flex-start\",children:results.map(function(result){return/*#__PURE__*/_jsx(CardActionArea,{style:{paddingTop:3,paddingBottom:3,paddingLeft:8},onClick:function onClick(){return handleRedirectToThreadPage(result.id);},children:/*#__PURE__*/_jsx(Typography,{align:\"left\",children:result.title},result.id)});})})})]});};export default SearchBar;","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/SearchBar.tsx"],"names":["React","useEffect","useState","Paper","InputBase","Divider","IconButton","SearchIcon","LibraryAddIcon","CreateThread","Typography","CardActionArea","Stack","TagIcon","strToArray","SearchBar","setThreadResults","currentUserState","API","globalMessageState","handleRedirectToThreadPage","threadID","window","location","replace","protocol","host","toString","openCreateThread","setOpenCreateThread","handleClickOpenCreateThread","isLoggedIn","setSeverityGlobalMessage","setGlobalMessage","handleOpenGlobalMessage","handleCloseCreateThread","searchByTags","setSearchByTags","search","setSearch","results","setResults","handleClickSearch","tagsArray","fetch","method","mode","headers","body","JSON","stringify","then","res","json","result","title","console","log","paddingTop","paddingBottom","position","top","zIndex","display","alignItems","ml","flex","event","target","value","height","m","length","justifyItems","map","paddingLeft","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Paper from '@mui/material/Paper';\nimport InputBase from '@mui/material/InputBase';\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport SearchIcon from '@mui/icons-material/Search';\nimport LibraryAddIcon from '@mui/icons-material/LibraryAdd';\nimport CreateThread from './thread/CreateThread';\nimport ThreadSearch from '../types/ThreadSearch';\nimport { Typography, CardActionArea } from '@material-ui/core';\nimport Stack from '@mui/material/Stack';\nimport TagIcon from '@mui/icons-material/Tag';\nimport { strToArray } from '../actions/actions';\nimport { Thread } from '../types/Thread';\nimport CurrentUserState from '../types/CurrentUserState';\nimport GlobalMessageState from '../types/GlobalMessageState';\n\ntype Props = {\n    setThreadResults: React.Dispatch<React.SetStateAction<Thread[]>>;\n    currentUserState: CurrentUserState;\n    API: string;\n    globalMessageState: GlobalMessageState;\n}\n\n// Searchbar: search by both title and tags\nconst SearchBar: React.FC<Props> = ({setThreadResults, currentUserState, API, globalMessageState}: Props) => {\n    const handleRedirectToThreadPage = (threadID: number) => {\n        window.location.replace(\n            window.location.protocol + \"//\" + window.location.host + '/thread/' + threadID.toString()\n        );\n    }\n\n    // toggle close/open create thread dialog page\n    const [openCreateThread, setOpenCreateThread] = React.useState<boolean>(false);\n    const handleClickOpenCreateThread = () => {\n        // only allow logged in users to create thread\n        if (currentUserState.isLoggedIn) {\n            setOpenCreateThread(true);\n        } else {\n            globalMessageState.setSeverityGlobalMessage(\"error\");\n            globalMessageState.setGlobalMessage([\"Please login to create thread\"]);\n            globalMessageState.handleOpenGlobalMessage();\n        }\n    };\n    const handleCloseCreateThread = () => {\n      setOpenCreateThread(false);\n    };\n\n    const [searchByTags, setSearchByTags] = useState<Boolean>(false);\n    const [search, setSearch] = useState<string>(\"\");\n    const [results, setResults] = useState<ThreadSearch[]>([]);\n\n    // On clicking search button, POST to backend and set list of threads to search results\n    // Toggle: search by tags pr search by title\n    const handleClickSearch = () => {\n        if (search === \"\") {\n            return;\n        } else if (searchByTags) {\n            const tagsArray = strToArray(search);\n            fetch(API + \"/thread_pages/search/tags\", {\n                method: 'POST',\n                mode: 'cors',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    tagsArray,\n                }),\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setThreadResults(result);\n                    }\n                )\n        } else {\n            const title = search;\n            fetch(API + \"/thread_pages/search/title\", {\n                method: 'POST',\n                mode: 'cors',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    title,\n                }),\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setThreadResults(result);\n                    }\n                )\n        }\n    }\n\n    // On change in search bar, post to backend, update results in dropdown menu\n    // Toggle: dropdown displays tags or titles\n    useEffect(() => {\n        if (search === \"\") {\n            setResults([]);\n        }\n        else if (searchByTags) {\n            const tagsArray = strToArray(search);\n            console.log(tagsArray);\n            fetch(API + \"/thread_pages/search/tags/autocomplete\", {\n                method: 'POST',\n                mode: 'cors',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    tagsArray,\n                }),\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setResults(result);\n                    }\n                )\n        } else {\n            const title = search;\n            fetch(API + \"/thread_pages/search/title/autocomplete\", {\n                method: 'POST',\n                mode: 'cors',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    title,\n                }),\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setResults(result);\n                    }\n                )\n        }\n    }, [search, searchByTags, API]);\n\n    return (\n        <div style={{paddingTop: '20px', paddingBottom: '20px', position: 'sticky', top: '50px', zIndex: '1100'}}>\n            <Paper\n            component=\"form\" \n            sx={{ display: 'flex', alignItems: 'center' }}\n            >\n                {/* Search input area: let's user know if in tags or title mode using placeholders */}\n                <InputBase\n                    sx={{ ml: 1, flex: 1 }}\n                    placeholder={\n                        searchByTags ? \"Search by Tags: #HawkerFood #Travel # School\" : \"Search by Title\"}\n                    value={search}\n                    onChange={event => setSearch(event.target.value)}\n                />\n                {/* Search and refresh threads list in home page to display new search results */}\n                <IconButton onClick={handleClickSearch}>\n                    <SearchIcon />\n                </IconButton>\n                {/* Toggle \"search by tags\" button (search by tags when on, search by title when off) */}\n                <IconButton onClick={() => setSearchByTags(!searchByTags)}>\n                    <TagIcon color={searchByTags ? 'primary' : \"disabled\"}/>\n                </IconButton>\n                <Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" />\n                {/* Create thread icon: opens create thread dialog page */}\n                <IconButton onClick={handleClickOpenCreateThread}>\n                    <LibraryAddIcon />\n                </IconButton>\n                <CreateThread API={API} openCreateThread={openCreateThread} handleCloseCreateThread={handleCloseCreateThread} currentUserState={currentUserState}/>\n            </Paper>\n            {/* Dropdown menu containing tags or titles based on user inputin search bar */}\n            { results.length > 0 &&\n                <Paper sx={{justifyItems: \"flex-start\"}}>\n                    <Stack direction=\"column\" alignItems=\"flex-start\">\n                        { results.map(result =>\n                                <CardActionArea style={{paddingTop: 3, paddingBottom: 3, paddingLeft: 8}} \n                                    onClick={() => handleRedirectToThreadPage(result.id)}\n                                >\n                                    <Typography key={result.id} align=\"left\">{result.title}</Typography>\n                                </CardActionArea>\n                        )}\n                    </Stack>\n                </Paper>\n            }\n        </div>\n    );\n};\n\nexport default SearchBar;"]},"metadata":{},"sourceType":"module"}