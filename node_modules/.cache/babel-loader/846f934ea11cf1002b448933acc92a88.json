{"ast":null,"code":"import'../../App.css';import ThreadMainPost from'./ThreadMainPost';import Stack from'@mui/material/Stack';import React from'react';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";// Display sequence of threads (overflowed body-text)\nvar ThreadList=function ThreadList(_ref){var API=_ref.API,threads=_ref.threads,error=_ref.error,isLoaded=_ref.isLoaded,currentUserState=_ref.currentUserState,globalMessageState=_ref.globalMessageState;// Display \"loading\" until response received, then display error or threads\nif(error){return/*#__PURE__*/_jsxs(\"div\",{children:[\"Error: \",error.message]});}else if(!isLoaded){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}else{return/*#__PURE__*/_jsx(\"div\",{style:{width:'50vw',margin:'auto',textAlign:'center'},children:/*#__PURE__*/_jsx(Stack,{spacing:2,children:threads.map(function(thread){return/*#__PURE__*/ (// List of threads: title, body, user, tags, and button icons to edit, delete or comment\n_jsx(ThreadMainPost,{globalMessageState:globalMessageState,API:API,toOverflow:true,thread:thread,currentUserState:currentUserState},thread.id));})})});}};export default ThreadList;","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/thread/ThreadList.tsx"],"names":["ThreadMainPost","Stack","React","ThreadList","API","threads","error","isLoaded","currentUserState","globalMessageState","message","width","margin","textAlign","map","thread","id"],"mappings":"AAAA,MAAO,eAAP,CACA,MAAOA,CAAAA,cAAP,KAA2B,kBAA3B,CACA,MAAOC,CAAAA,KAAP,KAAkB,qBAAlB,CAKA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,C,wFAWA;AACA,GAAMC,CAAAA,UAA2B,CAAG,QAA9BA,CAAAA,UAA8B,MAAoF,IAAjFC,CAAAA,GAAiF,MAAjFA,GAAiF,CAA5EC,OAA4E,MAA5EA,OAA4E,CAAnEC,KAAmE,MAAnEA,KAAmE,CAA5DC,QAA4D,MAA5DA,QAA4D,CAAlDC,gBAAkD,MAAlDA,gBAAkD,CAAhCC,kBAAgC,MAAhCA,kBAAgC,CAEpH;AACA,GAAIH,KAAJ,CAAW,CACP,mBAAO,iCAAaA,KAAK,CAACI,OAAnB,GAAP,CACH,CAFD,IAEO,IAAI,CAACH,QAAL,CAAe,CAClB,mBAAO,mCAAP,CACH,CAFM,IAEA,CACH,mBACI,YAAK,KAAK,CAAE,CAAEI,KAAK,CAAE,MAAT,CAAiBC,MAAM,CAAE,MAAzB,CAAiCC,SAAS,CAAE,QAA5C,CAAZ,uBACI,KAAC,KAAD,EAAO,OAAO,CAAE,CAAhB,UACMR,OAAO,CAACS,GAAR,CAAY,SAAAC,MAAM,sBAChB;AACA,KAAC,cAAD,EAAgB,kBAAkB,CAAEN,kBAApC,CAAwD,GAAG,CAAEL,GAA7D,CAAkE,UAAU,CAAE,IAA9E,CAAoF,MAAM,CAAEW,MAA5F,CAAoH,gBAAgB,CAAEP,gBAAtI,EAAyGO,MAAM,CAACC,EAAhH,CAFgB,GAAlB,CADN,EADJ,EADJ,CAUH,CACJ,CAnBD,CAqBA,cAAeb,CAAAA,UAAf","sourcesContent":["import '../../App.css';\nimport ThreadMainPost from './ThreadMainPost';\nimport Stack from '@mui/material/Stack';\nimport { Thread } from '../../types/Thread';\nimport CurrentUserState from '../../types/CurrentUserState';\nimport GlobalMessageState from '../../types/GlobalMessageState';\n\nimport React from 'react';\n\ntype Props = {\n    threads: Thread[];\n    currentUserState: CurrentUserState;\n    error: any;\n    isLoaded: boolean;\n    API: string;\n    globalMessageState: GlobalMessageState;\n}\n\n// Display sequence of threads (overflowed body-text)\nconst ThreadList: React.FC<Props> = ({ API, threads, error, isLoaded, currentUserState, globalMessageState }: Props) => {\n\n    // Display \"loading\" until response received, then display error or threads\n    if (error) {\n        return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div>Loading...</div>;\n    } else {\n        return (\n            <div style={{ width: '50vw', margin: 'auto', textAlign: 'center' }}>\n                <Stack spacing={2}>\n                    { threads.map(thread => (\n                        // List of threads: title, body, user, tags, and button icons to edit, delete or comment\n                        <ThreadMainPost globalMessageState={globalMessageState} API={API} toOverflow={true} thread={thread} key={thread.id} currentUserState={currentUserState}/>\n                    ))}\n                </Stack>\n            </div>\n        );\n    }\n};\n\nexport default ThreadList;\n"]},"metadata":{},"sourceType":"module"}