{"ast":null,"code":"var _jsxFileName = \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/ThreadList.tsx\",\n    _s = $RefreshSig$();\n\nimport '../App.css';\nimport ThreadMainPost from './ThreadMainPost';\nimport Stack from '@mui/material/Stack';\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ThreadList = _ref => {\n  _s();\n\n  let {\n    threadResults\n  } = _ref;\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [threads, setThreads] = useState(threadResults);\n  useEffect(() => {\n    console.log(threadResults);\n\n    if (threadResults.length > 0) {\n      setIsLoaded(true);\n      setThreads(threadResults);\n    } else {\n      fetch(\"http://localhost:3000/thread_pages\", {\n        method: 'GET',\n        mode: 'cors'\n      }).then(res => res.json()).then(result => {\n        setIsLoaded(true);\n        setThreads(result);\n      }, // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      error => {\n        setIsLoaded(true);\n        setError(error);\n      });\n    }\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 16\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '50vw',\n        margin: 'auto',\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 2,\n        children: threads.map(thread => /*#__PURE__*/_jsxDEV(ThreadMainPost, {\n          toOverflow: true,\n          thread: thread\n        }, thread.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(ThreadList, \"vTm7AaQ8J5m0OS1MNbjP0KBWIVA=\");\n\n_c = ThreadList;\nexport default ThreadList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreadList\");","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/ThreadList.tsx"],"names":["ThreadMainPost","Stack","React","useEffect","useState","ThreadList","threadResults","error","setError","isLoaded","setIsLoaded","threads","setThreads","console","log","length","fetch","method","mode","then","res","json","result","message","width","margin","textAlign","map","thread","id"],"mappings":";;;AAAA,OAAO,YAAP;AACA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAGA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAMA,MAAMC,UAA2B,GAAG,QAA8B;AAAA;;AAAA,MAA7B;AAAEC,IAAAA;AAAF,GAA6B;AAE9D,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAM,IAAN,CAAlC;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAU,KAAV,CAAxC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAWE,aAAX,CAAtC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,OAAO,CAACC,GAAR,CAAYR,aAAZ;;AACA,QAAIA,aAAa,CAACS,MAAd,GAAuB,CAA3B,EAA8B;AAC1BL,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,UAAU,CAACN,aAAD,CAAV;AACH,KAHD,MAGO;AACHU,MAAAA,KAAK,CAAC,oCAAD,EAAuC;AACxCC,QAAAA,MAAM,EAAE,KADgC;AAExCC,QAAAA,IAAI,EAAE;AAFkC,OAAvC,CAAL,CAIKC,IAJL,CAIUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJjB,EAKKF,IALL,CAMSG,MAAD,IAAY;AACRZ,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,QAAAA,UAAU,CAACU,MAAD,CAAV;AACH,OATT,EAUQ;AACA;AACA;AACCf,MAAAA,KAAD,IAAW;AACPG,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,OAhBT;AAkBH;AACJ,GAzBQ,EAyBN,EAzBM,CAAT;;AA2BA,MAAIA,KAAJ,EAAW;AACP,wBAAO;AAAA,4BAAaA,KAAK,CAACgB,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFD,MAEO,IAAI,CAACd,QAAL,EAAe;AAClB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFM,MAEA;AACH,wBACI;AAAK,MAAA,KAAK,EAAE;AAAEe,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,MAAM,EAAE,MAAzB;AAAiCC,QAAAA,SAAS,EAAE;AAA5C,OAAZ;AAAA,6BACI,QAAC,KAAD;AAAO,QAAA,OAAO,EAAE,CAAhB;AAAA,kBACMf,OAAO,CAACgB,GAAR,CAAYC,MAAM,iBAChB,QAAC,cAAD;AAAgB,UAAA,UAAU,EAAE,IAA5B;AAAkC,UAAA,MAAM,EAAEA;AAA1C,WAAuDA,MAAM,CAACC,EAA9D;AAAA;AAAA;AAAA;AAAA,gBADF;AADN;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;AACJ,CAhDD;;GAAMxB,U;;KAAAA,U;AAkDN,eAAeA,UAAf","sourcesContent":["import '../App.css';\nimport ThreadMainPost from './ThreadMainPost';\nimport Stack from '@mui/material/Stack';\nimport { Thread } from '../types/Thread';\n\nimport React, { useEffect, useState } from 'react';\n\ntype Props = {\n    threadResults: Thread[];\n}\n\nconst ThreadList: React.FC<Props> = ({ threadResults }: Props) => {\n\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [threads, setThreads] = useState<Thread[]>(threadResults);\n\n    useEffect(() => {\n        console.log(threadResults);\n        if (threadResults.length > 0) {\n            setIsLoaded(true);\n            setThreads(threadResults);\n        } else {\n            fetch(\"http://localhost:3000/thread_pages\", {\n                method: 'GET',\n                mode: 'cors'\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setIsLoaded(true);\n                        setThreads(result);\n                    },\n                    // Note: it's important to handle errors here\n                    // instead of a catch() block so that we don't swallow\n                    // exceptions from actual bugs in components.\n                    (error) => {\n                        setIsLoaded(true);\n                        setError(error);\n                    }\n                )\n        }\n    }, [])\n    \n    if (error) {\n        return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div>Loading...</div>;\n    } else {\n        return (\n            <div style={{ width: '50vw', margin: 'auto', textAlign: 'center' }}>\n                <Stack spacing={2}>\n                    { threads.map(thread => (\n                        <ThreadMainPost toOverflow={true} thread={thread} key={thread.id}/>\n                    ))}\n                </Stack>\n            </div>\n        );\n    }\n};\n\nexport default ThreadList;\n"]},"metadata":{},"sourceType":"module"}