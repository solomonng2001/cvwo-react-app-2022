{"ast":null,"code":"import _slicedToArray from\"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import ThreadList from'../components/ThreadList';import React,{useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";var MyThreads=function MyThreads(_ref){var currentUserState=_ref.currentUserState,API=_ref.API,globalMessageState=_ref.globalMessageState;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),error=_useState2[0],setError=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isLoaded=_useState4[0],setIsLoaded=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),threads=_useState6[0],setThreads=_useState6[1];useEffect(function(){if(currentUserState.isLoggedIn){fetch(API+\"/mythreads/\"+currentUserState.currentUser.id,{method:'GET',mode:'cors'}).then(function(res){return res.json();}).then(function(result){setIsLoaded(true);setThreads(result);},// Note: it's important to handle errors here\n// instead of a catch() block so that we don't swallow\n// exceptions from actual bugs in components.\nfunction(error){setIsLoaded(true);setError(error);});}},[currentUserState.isLoggedIn,currentUserState.currentUser.id,API]);return/*#__PURE__*/_jsx(\"div\",{style:{width:'50vw',margin:'auto',textAlign:'center',paddingTop:'30px'},children:/*#__PURE__*/_jsx(ThreadList,{globalMessageState:globalMessageState,API:API,threads:threads,error:error,isLoaded:isLoaded,currentUserState:currentUserState})});};export default MyThreads;","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/pages/MyThreads.tsx"],"names":["ThreadList","React","useState","useEffect","MyThreads","currentUserState","API","globalMessageState","error","setError","isLoaded","setIsLoaded","threads","setThreads","isLoggedIn","fetch","currentUser","id","method","mode","then","res","json","result","width","margin","textAlign","paddingTop"],"mappings":"oLAAA,MAAOA,CAAAA,UAAP,KAAuB,0BAAvB,CAKA,MAAOC,CAAAA,KAAP,EAAeC,QAAf,CAAyBC,SAAzB,KAAyC,OAAzC,C,2CAQA,GAAMC,CAAAA,SAA0B,CAAG,QAA7BA,CAAAA,SAA6B,MAAyD,IAAtDC,CAAAA,gBAAsD,MAAtDA,gBAAsD,CAApCC,GAAoC,MAApCA,GAAoC,CAA/BC,kBAA+B,MAA/BA,kBAA+B,CACxF,cAA0BL,QAAQ,CAAM,IAAN,CAAlC,wCAAOM,KAAP,eAAcC,QAAd,eACA,eAAgCP,QAAQ,CAAU,KAAV,CAAxC,yCAAOQ,QAAP,eAAiBC,WAAjB,eACA,eAA8BT,QAAQ,CAAW,EAAX,CAAtC,yCAAOU,OAAP,eAAgBC,UAAhB,eAEAV,SAAS,CAAC,UAAM,CACZ,GAAIE,gBAAgB,CAACS,UAArB,CAAiC,CACjCC,KAAK,CAACT,GAAG,CAAG,aAAN,CAAsBD,gBAAgB,CAACW,WAAjB,CAA6BC,EAApD,CAAwD,CACzDC,MAAM,CAAE,KADiD,CAEzDC,IAAI,CAAE,MAFmD,CAAxD,CAAL,CAIKC,IAJL,CAIU,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EAJb,EAKKF,IALL,CAMQ,SAACG,MAAD,CAAY,CACRZ,WAAW,CAAC,IAAD,CAAX,CACAE,UAAU,CAACU,MAAD,CAAV,CACH,CATT,CAUQ;AACA;AACA;AACA,SAACf,KAAD,CAAW,CACPG,WAAW,CAAC,IAAD,CAAX,CACAF,QAAQ,CAACD,KAAD,CAAR,CACH,CAhBT,EAkBC,CACJ,CArBQ,CAqBN,CAACH,gBAAgB,CAACS,UAAlB,CAA8BT,gBAAgB,CAACW,WAAjB,CAA6BC,EAA3D,CAA+DX,GAA/D,CArBM,CAAT,CAuBA,mBACI,YAAK,KAAK,CAAE,CAAEkB,KAAK,CAAE,MAAT,CAAiBC,MAAM,CAAE,MAAzB,CAAiCC,SAAS,CAAE,QAA5C,CAAsDC,UAAU,CAAE,MAAlE,CAAZ,uBACI,KAAC,UAAD,EAAY,kBAAkB,CAAEpB,kBAAhC,CAAoD,GAAG,CAAED,GAAzD,CAA8D,OAAO,CAAEM,OAAvE,CAAgF,KAAK,CAAEJ,KAAvF,CAA8F,QAAQ,CAAEE,QAAxG,CAAkH,gBAAgB,CAAEL,gBAApI,EADJ,EADJ,CAKH,CAjCD,CAmCA,cAAeD,CAAAA,SAAf","sourcesContent":["import ThreadList from '../components/ThreadList';\nimport { Thread } from '../types/Thread';\nimport CurrentUserState from '../types/CurrentUserState';\nimport GlobalMessageState from '../types/GlobalMessageState';\n\nimport React, {useState, useEffect} from 'react';\n\ntype Props = {\n    currentUserState: CurrentUserState;\n    API: string;\n    globalMessageState: GlobalMessageState;\n}\n\nconst MyThreads: React.FC<Props> = ( {currentUserState, API, globalMessageState}: Props) => {\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [threads, setThreads] = useState<Thread[]>([]);\n\n    useEffect(() => {\n        if (currentUserState.isLoggedIn) {\n        fetch(API + \"/mythreads/\" + currentUserState.currentUser.id, {\n            method: 'GET',\n            mode: 'cors'\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setThreads(result);\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            )\n        }\n    }, [currentUserState.isLoggedIn, currentUserState.currentUser.id, API]);\n\n    return (\n        <div style={{ width: '50vw', margin: 'auto', textAlign: 'center', paddingTop: '30px'}}>\n            <ThreadList globalMessageState={globalMessageState} API={API} threads={threads} error={error} isLoaded={isLoaded} currentUserState={currentUserState}/>\n        </div>\n    );\n};\n\nexport default MyThreads;"]},"metadata":{},"sourceType":"module"}