{"ast":null,"code":"var _jsxFileName = \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/pages/MyThreads.tsx\",\n    _s = $RefreshSig$();\n\nimport ThreadList from '../components/ThreadList';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyThreads = _ref => {\n  _s();\n\n  let {\n    currentUserState\n  } = _ref;\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [threads, setThreads] = useState([]);\n  useEffect(() => {\n    if (currentUserState.isLoggedIn) {\n      fetch(\"http://localhost:3000/mythreads/\" + currentUserState.currentUser.id, {\n        method: 'GET',\n        mode: 'cors'\n      }).then(res => res.json()).then(result => {\n        setIsLoaded(true);\n        setThreads(result);\n        console.log(result);\n      }, // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      error => {\n        setIsLoaded(true);\n        setError(error);\n      });\n    }\n  }, [currentUserState.isLoggedIn]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '50vw',\n      margin: 'auto',\n      textAlign: 'center'\n    },\n    children: /*#__PURE__*/_jsxDEV(ThreadList, {\n      threads: threads,\n      error: error,\n      isLoaded: isLoaded,\n      currentUserState: currentUserState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MyThreads, \"dMj0J//S5B6eE2SSHF5bLVZcQRI=\");\n\n_c = MyThreads;\nexport default MyThreads;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyThreads\");","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/pages/MyThreads.tsx"],"names":["ThreadList","React","useState","useEffect","MyThreads","currentUserState","error","setError","isLoaded","setIsLoaded","threads","setThreads","isLoggedIn","fetch","currentUser","id","method","mode","then","res","json","result","console","log","width","margin","textAlign"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,0BAAvB;AAIA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;AAMA,MAAMC,SAA0B,GAAG,QAAgC;AAAA;;AAAA,MAA9B;AAACC,IAAAA;AAAD,GAA8B;AAC/D,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAM,IAAN,CAAlC;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAU,KAAV,CAAxC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAW,EAAX,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIE,gBAAgB,CAACO,UAArB,EAAiC;AACjCC,MAAAA,KAAK,CAAC,qCAAqCR,gBAAgB,CAACS,WAAjB,CAA6BC,EAAnE,EAAuE;AACxEC,QAAAA,MAAM,EAAE,KADgE;AAExEC,QAAAA,IAAI,EAAE;AAFkE,OAAvE,CAAL,CAIKC,IAJL,CAIUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJjB,EAKKF,IALL,CAMSG,MAAD,IAAY;AACRZ,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,QAAAA,UAAU,CAACU,MAAD,CAAV;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACH,OAVT,EAWQ;AACA;AACA;AACCf,MAAAA,KAAD,IAAW;AACPG,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,OAjBT;AAmBC;AACJ,GAtBQ,EAsBN,CAACD,gBAAgB,CAACO,UAAlB,CAtBM,CAAT;AAwBA,sBACI;AAAK,IAAA,KAAK,EAAE;AAAEY,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,MAAM,EAAE,MAAzB;AAAiCC,MAAAA,SAAS,EAAE;AAA5C,KAAZ;AAAA,2BACI,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEhB,OAArB;AAA8B,MAAA,KAAK,EAAEJ,KAArC;AAA4C,MAAA,QAAQ,EAAEE,QAAtD;AAAgE,MAAA,gBAAgB,EAAEH;AAAlF;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAlCD;;GAAMD,S;;KAAAA,S;AAoCN,eAAeA,SAAf","sourcesContent":["import ThreadList from '../components/ThreadList';\nimport { Thread } from '../types/Thread';\nimport CurrentUserState from '../types/CurrentUserState';\n\nimport React, {useState, useEffect} from 'react';\n\ntype Props = {\n    currentUserState: CurrentUserState;\n}\n\nconst MyThreads: React.FC<Props> = ( {currentUserState}: Props) => {\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [threads, setThreads] = useState<Thread[]>([]);\n\n    useEffect(() => {\n        if (currentUserState.isLoggedIn) {\n        fetch(\"http://localhost:3000/mythreads/\" + currentUserState.currentUser.id, {\n            method: 'GET',\n            mode: 'cors'\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setThreads(result);\n                    console.log(result);\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            )\n        }\n    }, [currentUserState.isLoggedIn]);\n\n    return (\n        <div style={{ width: '50vw', margin: 'auto', textAlign: 'center'}}>\n            <ThreadList threads={threads} error={error} isLoaded={isLoaded} currentUserState={currentUserState}/>\n        </div>\n    );\n};\n\nexport default MyThreads;"]},"metadata":{},"sourceType":"module"}