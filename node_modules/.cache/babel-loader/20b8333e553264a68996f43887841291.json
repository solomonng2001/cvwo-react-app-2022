{"ast":null,"code":"import * as React from 'react';\nimport { useTheme as useSystemTheme } from '@mui/system';\nimport defaultTheme from './defaultTheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst VariantOverride = /*#__PURE__*/React.createContext(undefined);\nexport const useColorInversion = childVariant => {\n  const overriableVariants = React.useContext(VariantOverride);\n  return {\n    getColor: (instanceColorProp, defaultColorProp) => {\n      if (overriableVariants && childVariant) {\n        if (overriableVariants.includes(childVariant)) {\n          // @ts-ignore internal logic\n          return instanceColorProp || 'context';\n        }\n      } // @ts-ignore internal logic\n\n\n      return instanceColorProp || defaultColorProp;\n    }\n  };\n};\nexport function ColorInversionProvider(_ref) {\n  let {\n    children,\n    variant\n  } = _ref;\n  const theme = useSystemTheme(defaultTheme);\n  return /*#__PURE__*/_jsx(VariantOverride.Provider, {\n    value: variant ? theme.colorInversionConfig[variant] : undefined,\n    children: children\n  });\n}\nexport default VariantOverride;","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/node_modules/@mui/joy/styles/ColorInversion.js"],"names":["React","useTheme","useSystemTheme","defaultTheme","jsx","_jsx","VariantOverride","createContext","undefined","useColorInversion","childVariant","overriableVariants","useContext","getColor","instanceColorProp","defaultColorProp","includes","ColorInversionProvider","children","variant","theme","Provider","value","colorInversionConfig"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAQ,IAAIC,cAArB,QAA2C,aAA3C;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,MAAMC,eAAe,GAAG,aAAaN,KAAK,CAACO,aAAN,CAAoBC,SAApB,CAArC;AACA,OAAO,MAAMC,iBAAiB,GAAGC,YAAY,IAAI;AAC/C,QAAMC,kBAAkB,GAAGX,KAAK,CAACY,UAAN,CAAiBN,eAAjB,CAA3B;AACA,SAAO;AACLO,IAAAA,QAAQ,EAAE,CAACC,iBAAD,EAAoBC,gBAApB,KAAyC;AACjD,UAAIJ,kBAAkB,IAAID,YAA1B,EAAwC;AACtC,YAAIC,kBAAkB,CAACK,QAAnB,CAA4BN,YAA5B,CAAJ,EAA+C;AAC7C;AACA,iBAAOI,iBAAiB,IAAI,SAA5B;AACD;AACF,OANgD,CAOjD;;;AACA,aAAOA,iBAAiB,IAAIC,gBAA5B;AACD;AAVI,GAAP;AAYD,CAdM;AAeP,OAAO,SAASE,sBAAT,OAGJ;AAAA,MAHoC;AACrCC,IAAAA,QADqC;AAErCC,IAAAA;AAFqC,GAGpC;AACD,QAAMC,KAAK,GAAGlB,cAAc,CAACC,YAAD,CAA5B;AACA,SAAO,aAAaE,IAAI,CAACC,eAAe,CAACe,QAAjB,EAA2B;AACjDC,IAAAA,KAAK,EAAEH,OAAO,GAAGC,KAAK,CAACG,oBAAN,CAA2BJ,OAA3B,CAAH,GAAyCX,SADN;AAEjDU,IAAAA,QAAQ,EAAEA;AAFuC,GAA3B,CAAxB;AAID;AACD,eAAeZ,eAAf","sourcesContent":["import * as React from 'react';\nimport { useTheme as useSystemTheme } from '@mui/system';\nimport defaultTheme from './defaultTheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst VariantOverride = /*#__PURE__*/React.createContext(undefined);\nexport const useColorInversion = childVariant => {\n  const overriableVariants = React.useContext(VariantOverride);\n  return {\n    getColor: (instanceColorProp, defaultColorProp) => {\n      if (overriableVariants && childVariant) {\n        if (overriableVariants.includes(childVariant)) {\n          // @ts-ignore internal logic\n          return instanceColorProp || 'context';\n        }\n      }\n      // @ts-ignore internal logic\n      return instanceColorProp || defaultColorProp;\n    }\n  };\n};\nexport function ColorInversionProvider({\n  children,\n  variant\n}) {\n  const theme = useSystemTheme(defaultTheme);\n  return /*#__PURE__*/_jsx(VariantOverride.Provider, {\n    value: variant ? theme.colorInversionConfig[variant] : undefined,\n    children: children\n  });\n}\nexport default VariantOverride;"]},"metadata":{},"sourceType":"module"}