{"ast":null,"code":"var _jsxFileName = \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/comment/UpdateComment.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, TextField, Dialog, DialogActions, DialogContent, DialogTitle } from '@material-ui/core';\nimport AlertUser from '../AlertUser';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// Edit comment dialog (visible by creator and when creator is logged in)\nconst UpdateComment = _ref => {\n  _s();\n\n  let {\n    API,\n    openUpdateComment,\n    handleCloseUpdateComment,\n    comment\n  } = _ref;\n  const [body, setBody] = useState(\"\");\n  const [severity, setSeverity] = useState(undefined);\n  const [message, setMessage] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const resetUpdateComment = () => {\n    setBody(\"\");\n  };\n\n  const onOpenUpdateComment = () => {\n    // Empty message array, before adding error/success messages\n    let new_message = [];\n    fetch(API + \"/thread_pages/\" + comment.id, {\n      method: 'GET',\n      mode: 'cors'\n    }).then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setBody(result.body);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }; // On clicking \"edit comment\" button, patch changes to backend\n\n\n  const handleSubmitUpdateComment = () => {\n    // Empty message array, before adding error/success messages\n    let new_message = []; // Reject empty fields\n\n    if (body === \"\") {\n      new_message.push(\"Fill in all fields\");\n    }\n\n    if (new_message.length > 0) {\n      setSeverity('error');\n      setMessage(new_message);\n    } else {\n      fetch(API + \"/thread_pages/\" + comment.thread_page_id + \"/comments/\" + comment.id, {\n        method: 'PATCH',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          body\n        })\n      }).then(response => {\n        if (response.ok) {\n          setSeverity('success');\n          new_message.push(\"Changes saved!\");\n          setMessage(new_message); // Empty all fields (prevent resubmissions) and refresh page\n\n          resetUpdateComment();\n          setTimeout(() => window.location.reload(), 1000);\n        } else {\n          setSeverity('error');\n          new_message.push(\"Some error occured\");\n          setMessage(new_message);\n        }\n      }).catch(error => console.log(error.message));\n    }\n  };\n\n  onOpenUpdateComment(); // Dialog page contains \"body\" text field, and \"cancel\" and \"edit comment\" (submit changes) buttons\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: openUpdateComment,\n    onClose: handleCloseUpdateComment,\n    fullWidth: true,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: \"What's on your mind?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: [/*#__PURE__*/_jsxDEV(AlertUser, {\n        severity: severity,\n        message: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        value: body,\n        type: \"text\",\n        margin: \"normal\",\n        label: \"Say something here...\",\n        fullWidth: true,\n        variant: \"standard\",\n        multiline: true,\n        onChange: event => setBody(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleCloseUpdateComment,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSubmitUpdateComment,\n        children: \"Edit Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UpdateComment, \"O8cN0Ndf7L3dcaLd/smWN0qITcM=\");\n\n_c = UpdateComment;\nexport default UpdateComment;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateComment\");","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/comment/UpdateComment.tsx"],"names":["Button","TextField","Dialog","DialogActions","DialogContent","DialogTitle","AlertUser","React","useState","UpdateComment","API","openUpdateComment","handleCloseUpdateComment","comment","body","setBody","severity","setSeverity","undefined","message","setMessage","error","setError","isLoaded","setIsLoaded","resetUpdateComment","onOpenUpdateComment","new_message","fetch","id","method","mode","then","res","json","result","handleSubmitUpdateComment","push","length","thread_page_id","headers","JSON","stringify","response","ok","setTimeout","window","location","reload","catch","console","log","event","target","value"],"mappings":"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","sourcesContent":["import { Button, TextField, Dialog, DialogActions, DialogContent, \n    DialogTitle} from '@material-ui/core';\nimport AlertUser from '../AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\nimport Comment from '../../types/Comment';\n\nimport React, { useState } from 'react';\n\ntype Props = {\n    openUpdateComment: boolean;\n    handleCloseUpdateComment: () => void;\n    comment: Comment;\n    API: string;\n}\n\n// Edit comment dialog (visible by creator and when creator is logged in)\nconst UpdateComment: React.FC<Props> = ({API, openUpdateComment, handleCloseUpdateComment, comment}: Props) => {\n    const [body, setBody] = useState<string>(\"\");\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    \n    const resetUpdateComment = () => {\n        setBody(\"\");\n    }\n    const onOpenUpdateComment = () => {\n\n        // Empty message array, before adding error/success messages\n        let new_message: string[] = [];\n\n        fetch(API + \"/thread_pages/\" + comment.id, {\n            method: 'GET',\n            mode: 'cors'\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setBody(result.body);\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            )\n    }\n\n    // On clicking \"edit comment\" button, patch changes to backend\n    const handleSubmitUpdateComment = () => {\n\n        // Empty message array, before adding error/success messages\n        let new_message: string[] = [];\n\n        // Reject empty fields\n        if (body === \"\") {\n            new_message.push(\"Fill in all fields\");\n        }\n        if (new_message.length > 0) {\n            setSeverity('error');\n            setMessage(new_message);\n        } else {\n            fetch(API + \"/thread_pages/\" + comment.thread_page_id + \"/comments/\" + comment.id, {\n                method: 'PATCH',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                body: JSON.stringify({\n                    body,\n                }),\n            })\n                .then((response) => {\n                    if (response.ok) {\n                        setSeverity('success');\n                        new_message.push(\"Changes saved!\")\n                        setMessage(new_message);\n\n                        // Empty all fields (prevent resubmissions) and refresh page\n                        resetUpdateComment();\n                        setTimeout(() => window.location.reload(), 1000);\n                    } else {\n                        setSeverity('error');\n                        new_message.push(\"Some error occured\");\n                        setMessage(new_message);\n                    }\n                })\n                .catch((error) => console.log(error.message));\n        }\n    }\n\n    onOpenUpdateComment();\n\n    // Dialog page contains \"body\" text field, and \"cancel\" and \"edit comment\" (submit changes) buttons\n    return (\n        <Dialog open={openUpdateComment} onClose={handleCloseUpdateComment} fullWidth>\n            { \n\n\n            }\n            <DialogTitle>What's on your mind?</DialogTitle>\n            <DialogContent>\n                {/* Display success/error messages */}\n                <AlertUser severity={severity} message={message}/>\n                <TextField\n                    value={body}\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Say something here...\"\n                    fullWidth\n                    variant=\"standard\"\n                    multiline\n                    onChange={event => setBody(event.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseUpdateComment}>Cancel</Button>\n                <Button onClick={handleSubmitUpdateComment}>Edit Comment</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default UpdateComment;"]},"metadata":{},"sourceType":"module"}