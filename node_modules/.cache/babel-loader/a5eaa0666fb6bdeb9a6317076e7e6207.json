{"ast":null,"code":"var _jsxFileName = \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/CreateThread.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, TextField, Dialog, DialogActions, DialogContent, DialogTitle } from '@material-ui/core';\nimport AlertUser from './AlertUser';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreateThread = _ref => {\n  _s();\n\n  let {\n    openCreateThread,\n    handleCloseCreateThread\n  } = _ref;\n  const [user_id, setUser_id] = useState(1);\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [severity, setSeverity] = useState(undefined);\n  const [message, setMessage] = useState([]);\n\n  const resetCreateThread = () => {\n    setTitle(\"\");\n    setBody(\"\");\n    setUser_id(0);\n  };\n\n  const handleSubmitCreateThread = () => {\n    let new_message = [];\n\n    if (title === \"\" || body === \"\") {\n      new_message.push(\"Fill in all fields\");\n    }\n\n    if (new_message.length > 0) {\n      setSeverity('error');\n      setMessage(new_message);\n    } else {\n      fetch(\"http://localhost:3000/thread_pages\", {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title,\n          body,\n          user_id\n        })\n      }).then(response => {\n        if (response.ok) {\n          setSeverity('success');\n          new_message.push(\"You have created a new thread!\");\n          setMessage(new_message);\n          resetCreateThread();\n          setTimeout(() => window.location.reload(), 1000);\n        } else {\n          setSeverity('error');\n          new_message.push(\"Some error occured\");\n          setMessage(new_message);\n        }\n      }).catch(error => console.log(error.message));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: openCreateThread,\n    onClose: handleCloseCreateThread,\n    fullWidth: true,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: \"What's on your mind?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: [/*#__PURE__*/_jsxDEV(AlertUser, {\n        severity: severity,\n        message: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        value: title,\n        autoFocus: true,\n        type: \"text\",\n        margin: \"normal\",\n        label: \"Title\",\n        fullWidth: true,\n        variant: \"standard\",\n        onChange: event => setTitle(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        value: body,\n        type: \"text\",\n        margin: \"normal\",\n        label: \"Say something here...\",\n        fullWidth: true,\n        variant: \"standard\",\n        multiline: true,\n        onChange: event => setBody(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleCloseCreateThread,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSubmitCreateThread,\n        children: \"Create Thread\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CreateThread, \"e9BVhMTazmilxtbB7eyQE/MIFhg=\");\n\n_c = CreateThread;\nexport default CreateThread;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateThread\");","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/CreateThread.tsx"],"names":["Button","TextField","Dialog","DialogActions","DialogContent","DialogTitle","AlertUser","React","useState","CreateThread","openCreateThread","handleCloseCreateThread","user_id","setUser_id","title","setTitle","body","setBody","severity","setSeverity","undefined","message","setMessage","resetCreateThread","handleSubmitCreateThread","new_message","push","length","fetch","method","headers","JSON","stringify","then","response","ok","setTimeout","window","location","reload","catch","error","console","log","event","target","value"],"mappings":"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","sourcesContent":["import { Button, TextField, Dialog, DialogActions, DialogContent, \n    DialogTitle} from '@material-ui/core';\nimport AlertUser from './AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\nimport { useNavigate } from \"react-router-dom\";\n\nimport React, { useState } from 'react';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport GlobalMessageState from '../types/GlobalMessageState';\n\ntype Props = {\n    openCreateThread: boolean;\n    handleCloseCreateThread: () => void;\n}\n\nconst CreateThread: React.FC<Props> = ({openCreateThread, handleCloseCreateThread }: Props) => {\n    const [user_id, setUser_id] = useState<number>(1);\n    const [title, setTitle] = useState<string>(\"\");\n    const [body, setBody] = useState<string>(\"\");\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n\n    const resetCreateThread = () => {\n        setTitle(\"\");\n        setBody(\"\");\n        setUser_id(0);\n    }\n\n    const handleSubmitCreateThread = () => {\n        let new_message: string[] = [];\n        if (title === \"\" || body === \"\") {\n            new_message.push(\"Fill in all fields\");\n        }\n        if (new_message.length > 0) {\n            setSeverity('error');\n            setMessage(new_message);\n        } else {\n            fetch(\"http://localhost:3000/thread_pages\", {\n                method: 'POST',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                body: JSON.stringify({\n                    title,\n                    body,\n                    user_id,\n                }),\n            })\n                .then((response) => {\n                    if (response.ok) {\n                        setSeverity('success');\n                        new_message.push(\"You have created a new thread!\")\n                        setMessage(new_message);\n                        resetCreateThread();\n                        setTimeout(() => window.location.reload(), 1000);\n                    } else {\n                        setSeverity('error');\n                        new_message.push(\"Some error occured\");\n                        setMessage(new_message);\n                    }\n                })\n                .catch((error) => console.log(error.message));\n        }\n    }\n    \n    return (\n        <Dialog open={openCreateThread} onClose={handleCloseCreateThread} fullWidth>\n            <DialogTitle>What's on your mind?</DialogTitle>\n            <DialogContent>\n                <AlertUser severity={severity} message={message}/>\n                <TextField\n                    value={title}\n                    autoFocus\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Title\"\n                    fullWidth\n                    variant=\"standard\"\n                    onChange={event => setTitle(event.target.value)}\n                />\n                <TextField\n                    value={body}\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Say something here...\"\n                    fullWidth\n                    variant=\"standard\"\n                    multiline\n                    onChange={event => setBody(event.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseCreateThread}>Cancel</Button>\n                <Button onClick={handleSubmitCreateThread}>Create Thread</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default CreateThread;"]},"metadata":{},"sourceType":"module"}