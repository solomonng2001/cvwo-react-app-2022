{"ast":null,"code":"var _jsxFileName = \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/CreateThread.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, TextField, Dialog, DialogActions, DialogContent, DialogTitle, Grid, Chip } from '@material-ui/core';\nimport AlertUser from './AlertUser';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreateThread = _ref => {\n  _s();\n\n  let {\n    openCreateThread,\n    handleCloseCreateThread\n  } = _ref;\n  const [user_id, setUser_id] = useState(1);\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [tags, setTags] = useState(\"\");\n  const [tagsArray, setTagsArray] = useState([]);\n  const [severity, setSeverity] = useState(undefined);\n  const [message, setMessage] = useState([]);\n\n  const strToArray = str => {\n    return str.replace(/\\s/g, \"\").toLowerCase().split(\"#\").filter(tag => tag !== \"\");\n  }; // const parseTags = (old_str: string) => {\n  //     return old_str.join(\"#\");\n  // }\n\n\n  const resetCreateThread = () => {\n    setTitle(\"\");\n    setBody(\"\");\n    setUser_id(1);\n  };\n\n  useEffect(() => {\n    setTagsToSave(parseTags(tags));\n    console.log(strToTags(tags).length);\n  }, [tags]);\n\n  const handleSubmitCreateThread = () => {\n    let new_message = [];\n\n    if (title === \"\" || body === \"\") {\n      new_message.push(\"Fill in all fields\");\n    }\n\n    if (new_message.length > 0) {\n      setSeverity('error');\n      setMessage(new_message);\n    } else {\n      fetch(\"http://localhost:3000/thread_pages\", {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title,\n          body,\n          user_id\n        })\n      }).then(response => {\n        if (response.ok) {\n          setSeverity('success');\n          new_message.push(\"You have created a new thread!\");\n          setMessage(new_message);\n          resetCreateThread();\n          setTimeout(() => window.location.reload(), 1000);\n        } else {\n          setSeverity('error');\n          new_message.push(\"Some error occured\");\n          setMessage(new_message);\n        }\n      }).catch(error => console.log(error.message));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: openCreateThread,\n    onClose: handleCloseCreateThread,\n    fullWidth: true,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: \"What's on your mind?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: [/*#__PURE__*/_jsxDEV(AlertUser, {\n        severity: severity,\n        message: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        value: title,\n        autoFocus: true,\n        type: \"text\",\n        margin: \"normal\",\n        label: \"Title\",\n        fullWidth: true,\n        variant: \"standard\",\n        onChange: event => setTitle(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        value: tags,\n        autoFocus: true,\n        type: \"text\",\n        margin: \"normal\",\n        label: \"Tags\",\n        fullWidth: true,\n        variant: \"standard\",\n        onChange: event => setTags(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        xs: 12,\n        direction: \"row\",\n        spacing: 1,\n        justifyContent: \"flex-start\",\n        alignItems: \"flex-start\",\n        children: strToTags(tagsToSave).length > 0 && strToTags(tagsToSave).map(tag => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Chip, {\n            label: tag\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        value: body,\n        type: \"text\",\n        margin: \"normal\",\n        label: \"Say something here...\",\n        fullWidth: true,\n        variant: \"standard\",\n        multiline: true,\n        onChange: event => setBody(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleCloseCreateThread,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSubmitCreateThread,\n        children: \"Create Thread\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CreateThread, \"/30jymIr+dNzse6Q+1i2TgL21V8=\");\n\n_c = CreateThread;\nexport default CreateThread;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateThread\");","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/CreateThread.tsx"],"names":["Button","TextField","Dialog","DialogActions","DialogContent","DialogTitle","Grid","Chip","AlertUser","React","useState","useEffect","CreateThread","openCreateThread","handleCloseCreateThread","user_id","setUser_id","title","setTitle","body","setBody","tags","setTags","tagsArray","setTagsArray","severity","setSeverity","undefined","message","setMessage","strToArray","str","replace","toLowerCase","split","filter","tag","resetCreateThread","setTagsToSave","parseTags","console","log","strToTags","length","handleSubmitCreateThread","new_message","push","fetch","method","headers","JSON","stringify","then","response","ok","setTimeout","window","location","reload","catch","error","event","target","value","tagsToSave","map"],"mappings":"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","sourcesContent":["import { Button, TextField, Dialog, DialogActions, DialogContent, \n    DialogTitle, Grid, Chip} from '@material-ui/core';\nimport AlertUser from './AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\n\nimport React, { useState, useEffect } from 'react';\n\ntype Props = {\n    openCreateThread: boolean;\n    handleCloseCreateThread: () => void;\n}\n\nconst CreateThread: React.FC<Props> = ({openCreateThread, handleCloseCreateThread }: Props) => {\n    const [user_id, setUser_id] = useState<number>(1);\n    const [title, setTitle] = useState<string>(\"\");\n    const [body, setBody] = useState<string>(\"\");\n    const [tags, setTags] = useState<string>(\"\");\n    const [tagsArray, setTagsArray] = useState<string[]>([]);\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n\n    const strToArray = (str: string) => {\n        return str.replace(/\\s/g, \"\").toLowerCase().split(\"#\").filter(tag => tag !== \"\");\n    }\n\n    // const parseTags = (old_str: string) => {\n    //     return old_str.join(\"#\");\n    // }\n\n    const resetCreateThread = () => {\n        setTitle(\"\");\n        setBody(\"\");\n        setUser_id(1);\n    }\n\n    useEffect(() => {\n        setTagsToSave(parseTags(tags));\n        console.log(strToTags(tags).length);\n    }, [tags]);\n\n    const handleSubmitCreateThread = () => {\n        let new_message: string[] = [];\n        if (title === \"\" || body === \"\") {\n            new_message.push(\"Fill in all fields\");\n        }\n        if (new_message.length > 0) {\n            setSeverity('error');\n            setMessage(new_message);\n        } else {\n            fetch(\"http://localhost:3000/thread_pages\", {\n                method: 'POST',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                body: JSON.stringify({\n                    title,\n                    body,\n                    user_id,\n                }),\n            })\n                .then((response) => {\n                    if (response.ok) {\n                        setSeverity('success');\n                        new_message.push(\"You have created a new thread!\")\n                        setMessage(new_message);\n                        resetCreateThread();\n                        setTimeout(() => window.location.reload(), 1000);\n                    } else {\n                        setSeverity('error');\n                        new_message.push(\"Some error occured\");\n                        setMessage(new_message);\n                    }\n                })\n                .catch((error) => console.log(error.message));\n        }\n    }\n    \n    return (\n        <Dialog open={openCreateThread} onClose={handleCloseCreateThread} fullWidth>\n            <DialogTitle>What's on your mind?</DialogTitle>\n            <DialogContent>\n                <AlertUser severity={severity} message={message}/>\n                <TextField\n                    value={title}\n                    autoFocus\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Title\"\n                    fullWidth\n                    variant=\"standard\"\n                    onChange={event => setTitle(event.target.value)}\n                />\n                <TextField\n                    value={tags}\n                    autoFocus\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Tags\"\n                    fullWidth\n                    variant=\"standard\"\n                    onChange={event => setTags(event.target.value)}\n                />\n                <Grid container xs={12} direction='row' spacing={1} justifyContent='flex-start' alignItems='flex-start'>\n                    { strToTags(tagsToSave).length > 0 && strToTags(tagsToSave).map(tag =>\n                        <Grid item>\n                            <Chip label={tag}/>\n                        </Grid>\n                    )}\n                </Grid>\n                <TextField\n                    value={body}\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Say something here...\"\n                    fullWidth\n                    variant=\"standard\"\n                    multiline\n                    onChange={event => setBody(event.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseCreateThread}>Cancel</Button>\n                <Button onClick={handleSubmitCreateThread}>Create Thread</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default CreateThread;"]},"metadata":{},"sourceType":"module"}