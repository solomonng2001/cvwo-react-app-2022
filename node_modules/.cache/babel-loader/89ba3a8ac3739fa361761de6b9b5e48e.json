{"ast":null,"code":"var _jsxFileName = \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/thread/ThreadList.tsx\";\nimport '../../App.css';\nimport ThreadMainPost from './ThreadMainPost';\nimport Stack from '@mui/material/Stack';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// Display sequence of threads (overflowed body-text)\nconst ThreadList = _ref => {\n  let {\n    API,\n    threads,\n    error,\n    isLoaded,\n    currentUserState,\n    globalMessageState\n  } = _ref;\n\n  // Display \"loading\" until response received, then display error or threads\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 16\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '50vw',\n        margin: 'auto',\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 2,\n        children: threads.map(thread =>\n        /*#__PURE__*/\n        // List of threads: title, body, user, tags, and button icons to edit, delete or comment\n        _jsxDEV(ThreadMainPost, {\n          globalMessageState: globalMessageState,\n          API: API,\n          toOverflow: true,\n          thread: thread,\n          currentUserState: currentUserState\n        }, thread.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_c = ThreadList;\nexport default ThreadList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreadList\");","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/thread/ThreadList.tsx"],"names":["ThreadMainPost","Stack","React","ThreadList","API","threads","error","isLoaded","currentUserState","globalMessageState","message","width","margin","textAlign","map","thread","id"],"mappings":";AAAA,OAAO,eAAP;AACA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAKA,OAAOC,KAAP,MAAkB,OAAlB;;;AAWA;AACA,MAAMC,UAA2B,GAAG,QAAoF;AAAA,MAAnF;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,OAAP;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA,QAAvB;AAAiCC,IAAAA,gBAAjC;AAAmDC,IAAAA;AAAnD,GAAmF;;AAEpH;AACA,MAAIH,KAAJ,EAAW;AACP,wBAAO;AAAA,4BAAaA,KAAK,CAACI,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFD,MAEO,IAAI,CAACH,QAAL,EAAe;AAClB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFM,MAEA;AACH,wBACI;AAAK,MAAA,KAAK,EAAE;AAAEI,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,MAAM,EAAE,MAAzB;AAAiCC,QAAAA,SAAS,EAAE;AAA5C,OAAZ;AAAA,6BACI,QAAC,KAAD;AAAO,QAAA,OAAO,EAAE,CAAhB;AAAA,kBACMR,OAAO,CAACS,GAAR,CAAYC,MAAM;AAAA;AAChB;AACA,gBAAC,cAAD;AAAgB,UAAA,kBAAkB,EAAEN,kBAApC;AAAwD,UAAA,GAAG,EAAEL,GAA7D;AAAkE,UAAA,UAAU,EAAE,IAA9E;AAAoF,UAAA,MAAM,EAAEW,MAA5F;AAAoH,UAAA,gBAAgB,EAAEP;AAAtI,WAAyGO,MAAM,CAACC,EAAhH;AAAA;AAAA;AAAA;AAAA,gBAFF;AADN;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAUH;AACJ,CAnBD;;KAAMb,U;AAqBN,eAAeA,UAAf","sourcesContent":["import '../../App.css';\nimport ThreadMainPost from './ThreadMainPost';\nimport Stack from '@mui/material/Stack';\nimport { Thread } from '../../types/Thread';\nimport CurrentUserState from '../../types/CurrentUserState';\nimport GlobalMessageState from '../../types/GlobalMessageState';\n\nimport React from 'react';\n\ntype Props = {\n    threads: Thread[];\n    currentUserState: CurrentUserState;\n    error: any;\n    isLoaded: boolean;\n    API: string;\n    globalMessageState: GlobalMessageState;\n}\n\n// Display sequence of threads (overflowed body-text)\nconst ThreadList: React.FC<Props> = ({ API, threads, error, isLoaded, currentUserState, globalMessageState }: Props) => {\n\n    // Display \"loading\" until response received, then display error or threads\n    if (error) {\n        return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div>Loading...</div>;\n    } else {\n        return (\n            <div style={{ width: '50vw', margin: 'auto', textAlign: 'center' }}>\n                <Stack spacing={2}>\n                    { threads.map(thread => (\n                        // List of threads: title, body, user, tags, and button icons to edit, delete or comment\n                        <ThreadMainPost globalMessageState={globalMessageState} API={API} toOverflow={true} thread={thread} key={thread.id} currentUserState={currentUserState}/>\n                    ))}\n                </Stack>\n            </div>\n        );\n    }\n};\n\nexport default ThreadList;\n"]},"metadata":{},"sourceType":"module"}