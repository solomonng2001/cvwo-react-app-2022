{"ast":null,"code":"import _slicedToArray from \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport areArraysEqual from '../utils/areArraysEqual';\n/**\n * Gets the current state. If the selectedValue is controlled,\n * the `value` prop is the source of truth instead of the internal state.\n */\n\nfunction getControlledState(internalState, props) {\n  if (props.value !== undefined) {\n    return _extends({}, internalState, {\n      selectedValue: props.value\n    });\n  }\n\n  return internalState;\n}\n\nfunction areOptionsEqual(option1, option2, optionComparer) {\n  if (option1 === option2) {\n    return true;\n  }\n\n  if (option1 === null || option2 === null) {\n    return false;\n  }\n\n  return optionComparer(option1, option2);\n}\n/**\n * Triggers change event handlers when reducer returns changed state.\n */\n\n\nfunction useStateChangeDetection(nextState, internalPreviousState, propsRef, lastActionRef) {\n  React.useEffect(function () {\n    if (!propsRef.current || lastActionRef.current === null) {\n      // Detect changes only if an action has been dispatched.\n      return;\n    }\n\n    var previousState = getControlledState(internalPreviousState, propsRef.current);\n    var _propsRef$current2 = propsRef.current,\n        multiple = _propsRef$current2.multiple,\n        optionComparer = _propsRef$current2.optionComparer;\n\n    if (multiple) {\n      var _previousState$select;\n\n      var previousSelectedValues = (_previousState$select = previousState == null ? void 0 : previousState.selectedValue) != null ? _previousState$select : [];\n      var nextSelectedValues = nextState.selectedValue;\n      var onChange = propsRef.current.onChange;\n\n      if (!areArraysEqual(nextSelectedValues, previousSelectedValues, optionComparer)) {\n        onChange == null ? void 0 : onChange(lastActionRef.current.event, nextSelectedValues);\n      }\n    } else {\n      var previousSelectedValue = previousState == null ? void 0 : previousState.selectedValue;\n      var nextSelectedValue = nextState.selectedValue;\n      var _onChange = propsRef.current.onChange;\n\n      if (!areOptionsEqual(nextSelectedValue, previousSelectedValue, optionComparer)) {\n        _onChange == null ? void 0 : _onChange(lastActionRef.current.event, nextSelectedValue);\n      }\n    } // Fires the highlightChange event when reducer returns changed `highlightedValue`.\n\n\n    if (!areOptionsEqual(internalPreviousState.highlightedValue, nextState.highlightedValue, propsRef.current.optionComparer)) {\n      var _propsRef$current, _propsRef$current$onH;\n\n      (_propsRef$current = propsRef.current) == null ? void 0 : (_propsRef$current$onH = _propsRef$current.onHighlightChange) == null ? void 0 : _propsRef$current$onH.call(_propsRef$current, lastActionRef.current.event, nextState.highlightedValue);\n    }\n\n    lastActionRef.current = null;\n  }, [nextState.selectedValue, nextState.highlightedValue, internalPreviousState, propsRef, lastActionRef]);\n}\n\nexport default function useControllableReducer(internalReducer, externalReducer, props) {\n  var _ref;\n\n  var value = props.value,\n      defaultValue = props.defaultValue;\n  var propsRef = React.useRef(props);\n  propsRef.current = props;\n  var actionRef = React.useRef(null);\n  var initialSelectedValue = (_ref = value === undefined ? defaultValue : value) != null ? _ref : props.multiple ? [] : null;\n  var initalState = {\n    highlightedValue: null,\n    selectedValue: initialSelectedValue\n  };\n  var combinedReducer = React.useCallback(function (state, action) {\n    actionRef.current = action;\n\n    if (externalReducer) {\n      return externalReducer(getControlledState(state, propsRef.current), action);\n    }\n\n    return internalReducer(getControlledState(state, propsRef.current), action);\n  }, [externalReducer, internalReducer, propsRef]);\n\n  var _React$useReducer = React.useReducer(combinedReducer, initalState),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      nextState = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  var previousState = React.useRef(initalState);\n  React.useEffect(function () {\n    previousState.current = nextState;\n  }, [previousState, nextState]);\n  useStateChangeDetection(nextState, previousState.current, propsRef, actionRef);\n  return [getControlledState(nextState, propsRef.current), dispatch];\n}","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/node_modules/@mui/base/ListboxUnstyled/useControllableReducer.js"],"names":["_extends","React","areArraysEqual","getControlledState","internalState","props","value","undefined","selectedValue","areOptionsEqual","option1","option2","optionComparer","useStateChangeDetection","nextState","internalPreviousState","propsRef","lastActionRef","useEffect","current","previousState","multiple","_previousState$select","previousSelectedValues","nextSelectedValues","onChange","event","previousSelectedValue","nextSelectedValue","highlightedValue","_propsRef$current","_propsRef$current$onH","onHighlightChange","call","useControllableReducer","internalReducer","externalReducer","_ref","defaultValue","useRef","actionRef","initialSelectedValue","initalState","combinedReducer","useCallback","state","action","useReducer","dispatch"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport areArraysEqual from '../utils/areArraysEqual';\n\n/**\n * Gets the current state. If the selectedValue is controlled,\n * the `value` prop is the source of truth instead of the internal state.\n */\nfunction getControlledState(internalState, props) {\n  if (props.value !== undefined) {\n    return _extends({}, internalState, {\n      selectedValue: props.value\n    });\n  }\n  return internalState;\n}\nfunction areOptionsEqual(option1, option2, optionComparer) {\n  if (option1 === option2) {\n    return true;\n  }\n  if (option1 === null || option2 === null) {\n    return false;\n  }\n  return optionComparer(option1, option2);\n}\n\n/**\n * Triggers change event handlers when reducer returns changed state.\n */\nfunction useStateChangeDetection(nextState, internalPreviousState, propsRef, lastActionRef) {\n  React.useEffect(() => {\n    if (!propsRef.current || lastActionRef.current === null) {\n      // Detect changes only if an action has been dispatched.\n      return;\n    }\n    const previousState = getControlledState(internalPreviousState, propsRef.current);\n    const {\n      multiple,\n      optionComparer\n    } = propsRef.current;\n    if (multiple) {\n      var _previousState$select;\n      const previousSelectedValues = (_previousState$select = previousState == null ? void 0 : previousState.selectedValue) != null ? _previousState$select : [];\n      const nextSelectedValues = nextState.selectedValue;\n      const onChange = propsRef.current.onChange;\n      if (!areArraysEqual(nextSelectedValues, previousSelectedValues, optionComparer)) {\n        onChange == null ? void 0 : onChange(lastActionRef.current.event, nextSelectedValues);\n      }\n    } else {\n      const previousSelectedValue = previousState == null ? void 0 : previousState.selectedValue;\n      const nextSelectedValue = nextState.selectedValue;\n      const onChange = propsRef.current.onChange;\n      if (!areOptionsEqual(nextSelectedValue, previousSelectedValue, optionComparer)) {\n        onChange == null ? void 0 : onChange(lastActionRef.current.event, nextSelectedValue);\n      }\n    }\n\n    // Fires the highlightChange event when reducer returns changed `highlightedValue`.\n    if (!areOptionsEqual(internalPreviousState.highlightedValue, nextState.highlightedValue, propsRef.current.optionComparer)) {\n      var _propsRef$current, _propsRef$current$onH;\n      (_propsRef$current = propsRef.current) == null ? void 0 : (_propsRef$current$onH = _propsRef$current.onHighlightChange) == null ? void 0 : _propsRef$current$onH.call(_propsRef$current, lastActionRef.current.event, nextState.highlightedValue);\n    }\n    lastActionRef.current = null;\n  }, [nextState.selectedValue, nextState.highlightedValue, internalPreviousState, propsRef, lastActionRef]);\n}\nexport default function useControllableReducer(internalReducer, externalReducer, props) {\n  var _ref;\n  const {\n    value,\n    defaultValue\n  } = props;\n  const propsRef = React.useRef(props);\n  propsRef.current = props;\n  const actionRef = React.useRef(null);\n  const initialSelectedValue = (_ref = value === undefined ? defaultValue : value) != null ? _ref : props.multiple ? [] : null;\n  const initalState = {\n    highlightedValue: null,\n    selectedValue: initialSelectedValue\n  };\n  const combinedReducer = React.useCallback((state, action) => {\n    actionRef.current = action;\n    if (externalReducer) {\n      return externalReducer(getControlledState(state, propsRef.current), action);\n    }\n    return internalReducer(getControlledState(state, propsRef.current), action);\n  }, [externalReducer, internalReducer, propsRef]);\n  const [nextState, dispatch] = React.useReducer(combinedReducer, initalState);\n  const previousState = React.useRef(initalState);\n  React.useEffect(() => {\n    previousState.current = nextState;\n  }, [previousState, nextState]);\n  useStateChangeDetection(nextState, previousState.current, propsRef, actionRef);\n  return [getControlledState(nextState, propsRef.current), dispatch];\n}"]},"metadata":{},"sourceType":"module"}