{"ast":null,"code":"import _slicedToArray from\"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Button,TextField,Dialog,DialogActions,DialogContent,DialogTitle,Grid,Chip}from'@material-ui/core';import AlertUser from'../AlertUser';import{strToArray}from'../../actions/actions';import React,{useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";// create thread dialog page\nvar CreateThread=function CreateThread(_ref){var API=_ref.API,openCreateThread=_ref.openCreateThread,handleCloseCreateThread=_ref.handleCloseCreateThread,currentUserState=_ref.currentUserState;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),title=_useState2[0],setTitle=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),body=_useState4[0],setBody=_useState4[1];var _useState5=useState(\"#\"),_useState6=_slicedToArray(_useState5,2),tagsInput=_useState6[0],setTagsInput=_useState6[1];// tags string directly from user input\nvar _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),tagsArray=_useState8[0],setTagsArray=_useState8[1];// tags parsed into arrays\nvar _useState9=useState(undefined),_useState10=_slicedToArray(_useState9,2),severity=_useState10[0],setSeverity=_useState10[1];var _useState11=useState([]),_useState12=_slicedToArray(_useState11,2),message=_useState12[0],setMessage=_useState12[1];var resetCreateThread=function resetCreateThread(){setTitle(\"\");setBody(\"\");setTagsInput(\"\");};// whenver tagsInput string changed by user, update tagsArray\nuseEffect(function(){setTagsArray(strToArray(tagsInput));},[tagsInput]);// on clicking create button, post to backend\nvar handleSubmitCreateThread=function handleSubmitCreateThread(){var user_id=currentUserState.currentUser.id;// array as string equivalent in backend\nvar tags=tagsArray.toString();// reset messages array, before adding error/success messages\nvar new_message=[];// reject empty fields (except tags)\nif(title===\"\"||body===\"\"){new_message.push(\"Fill in all fields\");}if(new_message.length>0){setSeverity('error');setMessage(new_message);}else{fetch(API+\"/thread_pages\",{method:'POST',headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({title:title,body:body,user_id:user_id,tags:tags})}).then(function(response){if(response.ok){setSeverity('success');new_message.push(\"You have created a new thread!\");setMessage(new_message);// empty fields (prevent duplicate creatiion) and refresh page\nresetCreateThread();setTimeout(function(){return window.location.reload();},1000);}else{setSeverity('error');new_message.push(\"Some error occured\");setMessage(new_message);}}).catch(function(error){return console.log(error.message);});}};// dialog contains title, tags and body text fields, and \"cancel\" and \"create thread\" buttons\nreturn/*#__PURE__*/_jsxs(Dialog,{open:openCreateThread,onClose:handleCloseCreateThread,fullWidth:true,children:[/*#__PURE__*/_jsx(DialogTitle,{children:\"What's on your mind?\"}),/*#__PURE__*/_jsxs(DialogContent,{children:[/*#__PURE__*/_jsx(AlertUser,{severity:severity,message:message}),/*#__PURE__*/_jsx(TextField,{value:title,autoFocus:true,type:\"text\",margin:\"normal\",label:\"Title\",fullWidth:true,variant:\"standard\",onChange:function onChange(event){return setTitle(event.target.value);}}),/*#__PURE__*/_jsx(TextField,{value:tagsInput,type:\"text\",margin:\"normal\",label:\"Tags\",fullWidth:true,placeholder:\"#HawkerFood #Travel #School\",variant:\"standard\",onChange:function onChange(event){return setTagsInput(event.target.value);}}),/*#__PURE__*/_jsx(Grid,{container:true,direction:\"row\",spacing:1,justifyContent:\"flex-start\",alignItems:\"flex-start\",children:tagsArray.length>0&&tagsArray.map(function(tag,index){return/*#__PURE__*/_jsx(Grid,{item:true,children:/*#__PURE__*/_jsx(Chip,{label:tag})},index);})}),/*#__PURE__*/_jsx(TextField,{value:body,type:\"text\",margin:\"normal\",label:\"Say something here...\",fullWidth:true,variant:\"standard\",multiline:true,onChange:function onChange(event){return setBody(event.target.value);}})]}),/*#__PURE__*/_jsxs(DialogActions,{children:[/*#__PURE__*/_jsx(Button,{onClick:handleCloseCreateThread,children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{onClick:handleSubmitCreateThread,children:\"Create Thread\"})]})]});};export default CreateThread;","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/thread/CreateThread.tsx"],"names":["Button","TextField","Dialog","DialogActions","DialogContent","DialogTitle","Grid","Chip","AlertUser","strToArray","React","useState","useEffect","CreateThread","API","openCreateThread","handleCloseCreateThread","currentUserState","title","setTitle","body","setBody","tagsInput","setTagsInput","tagsArray","setTagsArray","undefined","severity","setSeverity","message","setMessage","resetCreateThread","handleSubmitCreateThread","user_id","currentUser","id","tags","toString","new_message","push","length","fetch","method","headers","JSON","stringify","then","response","ok","setTimeout","window","location","reload","catch","error","console","log","event","target","value","map","tag","index"],"mappings":"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","sourcesContent":["import { Button, TextField, Dialog, DialogActions, DialogContent, \n    DialogTitle, Grid, Chip} from '@material-ui/core';\nimport AlertUser from '../AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\nimport { strToArray } from '../../actions/actions';\nimport CurrentUserState from '../../types/CurrentUserState';\n\nimport React, { useState, useEffect } from 'react';\n\ntype Props = {\n    openCreateThread: boolean;\n    handleCloseCreateThread: () => void;\n    currentUserState: CurrentUserState;\n    API: string;\n}\n\n// create thread dialog page\nconst CreateThread: React.FC<Props> = ({API, openCreateThread, handleCloseCreateThread, currentUserState }: Props) => {\n    const [title, setTitle] = useState<string>(\"\");\n    const [body, setBody] = useState<string>(\"\");\n    const [tagsInput, setTagsInput] = useState<string>(\"#\"); // tags string directly from user input\n    const [tagsArray, setTagsArray] = useState<string[]>([]); // tags parsed into arrays\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n\n    const resetCreateThread = () => {\n        setTitle(\"\");\n        setBody(\"\");\n        setTagsInput(\"\");\n    }\n\n    // whenver tagsInput string changed by user, update tagsArray\n    useEffect(() => {\n        setTagsArray(strToArray(tagsInput));\n    }, [tagsInput]);\n\n    // on clicking create button, post to backend\n    const handleSubmitCreateThread = () => {\n        const user_id = currentUserState.currentUser.id;\n        // array as string equivalent in backend\n        const tags = tagsArray.toString(); \n        // reset messages array, before adding error/success messages\n        let new_message: string[] = []; \n        // reject empty fields (except tags)\n        if (title === \"\" || body === \"\") { \n            new_message.push(\"Fill in all fields\");\n        }\n        if (new_message.length > 0) {\n            setSeverity('error');\n            setMessage(new_message);\n        } else {\n            fetch(API + \"/thread_pages\", {\n                method: 'POST',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    title,\n                    body,\n                    user_id,\n                    tags,\n                }),\n            })\n                .then((response) => {\n                    if (response.ok) {\n                        setSeverity('success');\n                        new_message.push(\"You have created a new thread!\")\n                        setMessage(new_message);\n                        // empty fields (prevent duplicate creatiion) and refresh page\n                        resetCreateThread();\n                        setTimeout(() => window.location.reload(), 1000);\n                    } else {\n                        setSeverity('error');\n                        new_message.push(\"Some error occured\");\n                        setMessage(new_message);\n                    }\n                })\n                .catch((error) => console.log(error.message));\n        }\n    }\n    \n    // dialog contains title, tags and body text fields, and \"cancel\" and \"create thread\" buttons\n    return (\n        <Dialog open={openCreateThread} onClose={handleCloseCreateThread} fullWidth>\n            <DialogTitle>What's on your mind?</DialogTitle>\n            <DialogContent>\n                {/* display success/error messages */}\n                <AlertUser severity={severity} message={message}/>\n                <TextField\n                    value={title}\n                    autoFocus\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Title\"\n                    fullWidth\n                    variant=\"standard\"\n                    onChange={event => setTitle(event.target.value)}\n                />\n                {/* textfield that accepts tags input */}\n                <TextField\n                    value={tagsInput}\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Tags\"\n                    fullWidth\n                    placeholder='#HawkerFood #Travel #School'\n                    variant=\"standard\"\n                    onChange={event => setTagsInput(event.target.value)}\n                />\n                {/* display tags for user to view how tags will look like on thread */}\n                <Grid container direction='row' spacing={1} justifyContent='flex-start' alignItems='flex-start'>\n                    { tagsArray.length > 0 && tagsArray.map((tag, index) =>\n                        <Grid item key={index}>\n                            <Chip label={tag}/>\n                        </Grid>\n                    )}\n                </Grid>\n                <TextField\n                    value={body}\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Say something here...\"\n                    fullWidth\n                    variant=\"standard\"\n                    multiline\n                    onChange={event => setBody(event.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseCreateThread}>Cancel</Button>\n                <Button onClick={handleSubmitCreateThread}>Create Thread</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default CreateThread;"]},"metadata":{},"sourceType":"module"}