{"ast":null,"code":"var _jsxFileName = \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/thread/UpdateThread.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, TextField, Dialog, DialogActions, DialogContent, DialogTitle, Grid, Chip } from '@material-ui/core';\nimport AlertUser from '../AlertUser';\nimport { strToArray } from '../../actions/actions';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// Edit thread dialog (must be creator of thread and logged in)\nconst UpdateThread = _ref => {\n  _s();\n\n  let {\n    API,\n    openUpdateThread,\n    handleCloseUpdateThread,\n    thread\n  } = _ref;\n  const [title, setTitle] = useState(thread.title);\n  const [body, setBody] = useState(thread.body);\n  const [tagsInput, setTagsInput] = useState(\"\"); // tags string directly from user input\n\n  const [tagsArray, setTagsArray] = useState([]); // tags parsed into arrays\n\n  const [severity, setSeverity] = useState(undefined);\n  const [message, setMessage] = useState([]);\n\n  const resetUpdateThread = () => {\n    setTitle(\"\");\n    setBody(\"\");\n    setTagsInput(\"\");\n  }; // whenver tagsInput string changed by user, update tagsArray\n\n\n  useEffect(() => {\n    setTagsArray(strToArray(tagsInput));\n  }, [tagsInput]); // On clicking submit button, patch changes to backend\n\n  const handleSubmitUpdateThread = () => {\n    // empty message array, before adding error/success messages\n    let new_message = []; // check that all fields are not empty\n\n    if (title === \"\" || body === \"\") {\n      new_message.push(\"Fill in all fields\");\n    }\n\n    if (new_message.length > 0) {\n      setSeverity('error');\n      setMessage(new_message);\n    } else {\n      fetch(API + \"/thread_pages/\" + thread.id, {\n        method: 'PATCH',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title,\n          body\n        })\n      }).then(response => {\n        if (response.ok) {\n          setSeverity('success');\n          new_message.push(\"Changes saved!\");\n          setMessage(new_message); // Empty all fields (prevent resubmission) and refresh page\n\n          resetUpdateThread();\n          setTimeout(() => window.location.reload(), 1000);\n        } else {\n          setSeverity('error');\n          new_message.push(\"Some error occured\");\n          setMessage(new_message);\n        }\n      }).catch(error => console.log(error.message));\n    }\n  }; // Dialog page contains \"title\" and \"body\" text fields, and \"close\" and \"edit thread\" (submit changes) buttons\n\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: openUpdateThread,\n    onClose: handleCloseUpdateThread,\n    fullWidth: true,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: \"What's on your mind?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: [/*#__PURE__*/_jsxDEV(AlertUser, {\n        severity: severity,\n        message: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        value: title,\n        autoFocus: true,\n        type: \"text\",\n        margin: \"normal\",\n        label: \"Title\",\n        fullWidth: true,\n        variant: \"standard\",\n        onChange: event => setTitle(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        value: tagsInput,\n        type: \"text\",\n        margin: \"normal\",\n        label: \"Tags\",\n        fullWidth: true,\n        placeholder: \"#HawkerFood #Travel #School\",\n        variant: \"standard\",\n        onChange: event => setTagsInput(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"row\",\n        spacing: 1,\n        justifyContent: \"flex-start\",\n        alignItems: \"flex-start\",\n        children: tagsArray.length > 0 && tagsArray.map(tag => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Chip, {\n            label: tag\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        value: body,\n        type: \"text\",\n        margin: \"normal\",\n        label: \"Say something here...\",\n        fullWidth: true,\n        variant: \"standard\",\n        multiline: true,\n        onChange: event => setBody(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleCloseUpdateThread,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSubmitUpdateThread,\n        children: \"Edit Thread\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UpdateThread, \"bjURuheElLHKUSJbNFCVCCmLTbM=\");\n\n_c = UpdateThread;\nexport default UpdateThread;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateThread\");","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/thread/UpdateThread.tsx"],"names":["Button","TextField","Dialog","DialogActions","DialogContent","DialogTitle","Grid","Chip","AlertUser","strToArray","React","useState","useEffect","UpdateThread","API","openUpdateThread","handleCloseUpdateThread","thread","title","setTitle","body","setBody","tagsInput","setTagsInput","tagsArray","setTagsArray","severity","setSeverity","undefined","message","setMessage","resetUpdateThread","handleSubmitUpdateThread","new_message","push","length","fetch","id","method","headers","JSON","stringify","then","response","ok","setTimeout","window","location","reload","catch","error","console","log","event","target","value","map","tag"],"mappings":"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","sourcesContent":["import { Button, TextField, Dialog, DialogActions, DialogContent, \n    DialogTitle, Grid, Chip } from '@material-ui/core';\nimport AlertUser from '../AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\nimport { strToArray } from '../../actions/actions';\nimport { Thread } from '../../types/Thread';\n\nimport React, { useState, useEffect } from 'react';\n\ntype Props = {\n    openUpdateThread: boolean;\n    handleCloseUpdateThread: () => void;\n    thread: Thread;\n    API: string;\n}\n\n// Edit thread dialog (must be creator of thread and logged in)\nconst UpdateThread: React.FC<Props> = ({API, openUpdateThread, handleCloseUpdateThread, thread}: Props) => {\n    const [title, setTitle] = useState<string>(thread.title);\n    const [body, setBody] = useState<string>(thread.body);\n    const [tagsInput, setTagsInput] = useState<string>(\"\"); // tags string directly from user input\n    const [tagsArray, setTagsArray] = useState<string[]>([]); // tags parsed into arrays\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n    \n    const resetUpdateThread = () => {\n        setTitle(\"\");\n        setBody(\"\");\n        setTagsInput(\"\");\n    }\n\n    // whenver tagsInput string changed by user, update tagsArray\n    useEffect(() => {\n        setTagsArray(strToArray(tagsInput));\n    }, [tagsInput]);\n\n    // On clicking submit button, patch changes to backend\n    const handleSubmitUpdateThread = () => {\n\n        // empty message array, before adding error/success messages\n        let new_message: string[] = [];\n\n        // check that all fields are not empty\n        if (title === \"\" || body === \"\") {\n            new_message.push(\"Fill in all fields\");\n        }\n        if (new_message.length > 0) {\n            setSeverity('error');\n            setMessage(new_message);\n        } else {\n            fetch(API + \"/thread_pages/\" + thread.id, {\n                method: 'PATCH',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                body: JSON.stringify({\n                    title,\n                    body,\n                }),\n            })\n                .then((response) => {\n                    if (response.ok) {\n                        setSeverity('success');\n                        new_message.push(\"Changes saved!\")\n                        setMessage(new_message);\n\n                        // Empty all fields (prevent resubmission) and refresh page\n                        resetUpdateThread();\n                        setTimeout(() => window.location.reload(), 1000);\n                    } else {\n                        setSeverity('error');\n                        new_message.push(\"Some error occured\");\n                        setMessage(new_message);\n                    }\n                })\n                .catch((error) => console.log(error.message));\n        }\n    }\n\n    // Dialog page contains \"title\" and \"body\" text fields, and \"close\" and \"edit thread\" (submit changes) buttons\n    return (\n        <Dialog open={openUpdateThread} onClose={handleCloseUpdateThread} fullWidth>\n            <DialogTitle>What's on your mind?</DialogTitle>\n            <DialogContent>\n                {/* Display success/error messages */}\n                <AlertUser severity={severity} message={message}/>\n                <TextField\n                    value={title}\n                    autoFocus\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Title\"\n                    fullWidth\n                    variant=\"standard\"\n                    onChange={event => setTitle(event.target.value)}\n                />\n                {/* textfield that accepts tags input */}\n                <TextField\n                    value={tagsInput}\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Tags\"\n                    fullWidth\n                    placeholder='#HawkerFood #Travel #School'\n                    variant=\"standard\"\n                    onChange={event => setTagsInput(event.target.value)}\n                />\n                {/* display tags for user to view how tags will look like on thread */}\n                <Grid container direction='row' spacing={1} justifyContent='flex-start' alignItems='flex-start'>\n                    { tagsArray.length > 0 && tagsArray.map(tag =>\n                        <Grid item>\n                            <Chip label={tag}/>\n                        </Grid>\n                    )}\n                </Grid>\n                <TextField\n                    value={body}\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Say something here...\"\n                    fullWidth\n                    variant=\"standard\"\n                    multiline\n                    onChange={event => setBody(event.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseUpdateThread}>Cancel</Button>\n                <Button onClick={handleSubmitUpdateThread}>Edit Thread</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default UpdateThread;"]},"metadata":{},"sourceType":"module"}