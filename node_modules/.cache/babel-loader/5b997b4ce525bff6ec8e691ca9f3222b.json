{"ast":null,"code":"import _slicedToArray from\"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import ThreadList from'../components/thread/ThreadList';import{Typography}from'@material-ui/core';import Typewriter from'typewriter-effect';import SearchBar from'../components/SearchBar';import React,{useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";// Root path directs to homepage\nvar Home=function Home(_ref){var currentUserState=_ref.currentUserState,API=_ref.API,globalMessageState=_ref.globalMessageState;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),threadResults=_useState2[0],setThreadResults=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isLoaded=_useState6[0],setIsLoaded=_useState6[1];var _useState7=useState(threadResults),_useState8=_slicedToArray(_useState7,2),threads=_useState8[0],setThreads=_useState8[1];// get json of latest threads from server\nuseEffect(function(){if(threadResults.length>0){setIsLoaded(true);setThreads(threadResults);}else{fetch(API+\"/thread_pages\",{method:'GET',mode:'cors'}).then(function(res){return res.json();}).then(function(result){setIsLoaded(true);setThreads(result);},function(error){setIsLoaded(true);setError(error);});}},[threadResults,API]);return/*#__PURE__*/_jsxs(\"div\",{style:{width:'50vw',margin:'auto',textAlign:'center'},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h3\",style:{paddingTop:'70px'},children:/*#__PURE__*/_jsx(Typewriter,{onInit:function onInit(typewriter){typewriter.changeDelay(80).typeString(\"ChitChat\").pauseFor(1000).start();}})}),/*#__PURE__*/_jsx(SearchBar,{setThreadResults:setThreadResults,currentUserState:currentUserState,API:API,globalMessageState:globalMessageState}),/*#__PURE__*/_jsx(ThreadList,{globalMessageState:globalMessageState,API:API,threads:threads,currentUserState:currentUserState,error:error,isLoaded:isLoaded})]});};export default Home;","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/pages/Home.tsx"],"names":["ThreadList","Typography","Typewriter","SearchBar","React","useState","useEffect","Home","currentUserState","API","globalMessageState","threadResults","setThreadResults","error","setError","isLoaded","setIsLoaded","threads","setThreads","length","fetch","method","mode","then","res","json","result","width","margin","textAlign","paddingTop","typewriter","changeDelay","typeString","pauseFor","start"],"mappings":"oLAAA,MAAOA,CAAAA,UAAP,KAAuB,iCAAvB,CACA,OAASC,UAAT,KAA2B,mBAA3B,CACA,MAAOC,CAAAA,UAAP,KAAuB,mBAAvB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CAKA,MAAOC,CAAAA,KAAP,EAAeC,QAAf,CAAyBC,SAAzB,KAAyC,OAAzC,C,wFAQA;AACA,GAAMC,CAAAA,IAAqB,CAAG,QAAxBA,CAAAA,IAAwB,MAAyD,IAAtDC,CAAAA,gBAAsD,MAAtDA,gBAAsD,CAApCC,GAAoC,MAApCA,GAAoC,CAA/BC,kBAA+B,MAA/BA,kBAA+B,CACnF,cAA0CL,QAAQ,CAAW,EAAX,CAAlD,wCAAOM,aAAP,eAAsBC,gBAAtB,eACA,eAA0BP,QAAQ,CAAM,IAAN,CAAlC,yCAAOQ,KAAP,eAAcC,QAAd,eACA,eAAgCT,QAAQ,CAAU,KAAV,CAAxC,yCAAOU,QAAP,eAAiBC,WAAjB,eACA,eAA8BX,QAAQ,CAAWM,aAAX,CAAtC,yCAAOM,OAAP,eAAgBC,UAAhB,eAEA;AACAZ,SAAS,CAAC,UAAM,CACZ,GAAIK,aAAa,CAACQ,MAAd,CAAuB,CAA3B,CAA8B,CAC1BH,WAAW,CAAC,IAAD,CAAX,CACAE,UAAU,CAACP,aAAD,CAAV,CACH,CAHD,IAGO,CACHS,KAAK,CAACX,GAAG,CAAG,eAAP,CAAwB,CACzBY,MAAM,CAAE,KADiB,CAEzBC,IAAI,CAAE,MAFmB,CAAxB,CAAL,CAIKC,IAJL,CAIU,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EAJb,EAKKF,IALL,CAMQ,SAACG,MAAD,CAAY,CACRV,WAAW,CAAC,IAAD,CAAX,CACAE,UAAU,CAACQ,MAAD,CAAV,CACH,CATT,CAUQ,SAACb,KAAD,CAAW,CACPG,WAAW,CAAC,IAAD,CAAX,CACAF,QAAQ,CAACD,KAAD,CAAR,CACH,CAbT,EAeH,CACJ,CArBQ,CAqBN,CAACF,aAAD,CAAgBF,GAAhB,CArBM,CAAT,CAuBA,mBACI,aAAK,KAAK,CAAE,CAAEkB,KAAK,CAAE,MAAT,CAAiBC,MAAM,CAAE,MAAzB,CAAiCC,SAAS,CAAE,QAA5C,CAAZ,wBAGI,KAAC,UAAD,EAAY,OAAO,CAAC,IAApB,CAAyB,KAAK,CAAE,CAAEC,UAAU,CAAE,MAAd,CAAhC,uBACI,KAAC,UAAD,EACI,MAAM,CAAE,gBAACC,UAAD,CAAgB,CACpBA,UAAU,CACLC,WADL,CACiB,EADjB,EAEKC,UAFL,CAEgB,UAFhB,EAGKC,QAHL,CAGc,IAHd,EAIKC,KAJL,GAKH,CAPL,EADJ,EAHJ,cAgBI,KAAC,SAAD,EAAW,gBAAgB,CAAEvB,gBAA7B,CAA+C,gBAAgB,CAAEJ,gBAAjE,CAAmF,GAAG,CAAEC,GAAxF,CACI,kBAAkB,CAAEC,kBADxB,EAhBJ,cAoBI,KAAC,UAAD,EAAY,kBAAkB,CAAEA,kBAAhC,CAAoD,GAAG,CAAED,GAAzD,CAA8D,OAAO,CAAEQ,OAAvE,CAAgF,gBAAgB,CAAET,gBAAlG,CACI,KAAK,CAAEK,KADX,CACkB,QAAQ,CAAEE,QAD5B,EApBJ,GADJ,CAyBH,CAvDD,CAyDA,cAAeR,CAAAA,IAAf","sourcesContent":["import ThreadList from '../components/thread/ThreadList';\nimport { Typography } from '@material-ui/core';\nimport Typewriter from 'typewriter-effect';\nimport SearchBar from '../components/SearchBar';\nimport { Thread } from '../types/Thread';\nimport CurrentUserState from '../types/CurrentUserState';\nimport GlobalMessageState from '../types/GlobalMessageState';\n\nimport React, {useState, useEffect} from 'react';\n\ntype Props = {\n    currentUserState: CurrentUserState;\n    API: string;\n    globalMessageState: GlobalMessageState;\n}\n\n// Root path directs to homepage\nconst Home: React.FC<Props> = ( {currentUserState, API, globalMessageState}: Props) => {\n    const [threadResults, setThreadResults] = useState<Thread[]>([]);\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [threads, setThreads] = useState<Thread[]>(threadResults);\n\n    // get json of latest threads from server\n    useEffect(() => {\n        if (threadResults.length > 0) {\n            setIsLoaded(true);\n            setThreads(threadResults);\n        } else {\n            fetch(API + \"/thread_pages\", {\n                method: 'GET',\n                mode: 'cors'\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setIsLoaded(true);\n                        setThreads(result);\n                    },\n                    (error) => {\n                        setIsLoaded(true);\n                        setError(error);\n                    }\n                )\n        }\n    }, [threadResults, API]);\n\n    return (\n        <div style={{ width: '50vw', margin: 'auto', textAlign: 'center'}}>\n\n            {/* ChitChat animiation */}\n            <Typography variant='h3' style={{ paddingTop: '70px'}}>\n                <Typewriter\n                    onInit={(typewriter) => {\n                        typewriter\n                            .changeDelay(80)\n                            .typeString(\"ChitChat\")\n                            .pauseFor(1000)\n                            .start();\n                    }}\n                /> \n            </Typography>\n\n            {/* Search Bar: search by tags or title */}\n            <SearchBar setThreadResults={setThreadResults} currentUserState={currentUserState} API={API}\n                globalMessageState={globalMessageState}/>\n\n            {/* List of threads, starting from latest */}\n            <ThreadList globalMessageState={globalMessageState} API={API} threads={threads} currentUserState={currentUserState}\n                error={error} isLoaded={isLoaded}/>\n        </div>\n    );\n};\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}