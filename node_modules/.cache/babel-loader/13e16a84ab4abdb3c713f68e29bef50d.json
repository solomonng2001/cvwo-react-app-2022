{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { unstable_createGetCssVar as createGetCssVar } from '@mui/system';\nexport const isVariantPalette = colorPalette => colorPalette && typeof colorPalette === 'object' && Object.keys(colorPalette).some(value => {\n  var _value$match;\n\n  return (_value$match = value.match) == null ? void 0 : _value$match.call(value, /^(plain(Hover|Active|Disabled)?(Color|Bg)|outlined(Hover|Active|Disabled)?(Color|Border|Bg)|soft(Hover|Active|Disabled)?(Color|Bg)|solid(Hover|Active|Disabled)?(Color|Bg))$/);\n});\n\nconst assignCss = (target, variantVar, value) => {\n  if (variantVar.includes('Color')) {\n    target.color = value;\n  }\n\n  if (variantVar.includes('Bg')) {\n    target.backgroundColor = value;\n  }\n\n  if (variantVar.includes('Border')) {\n    target.borderColor = value;\n  }\n};\n/**\n *\n * @param name variant name\n * @example 'plain'\n *\n * @param palette object that contains palette tokens\n * @example { primary: { plainColor: '', plainHoverColor: '', ...tokens }, ...other palete }\n *\n * @param getCssVar a function that receive variant token and return a CSS variable\n *\n * result will be the stylesheet based on the palette tokens\n * @example {\n *   color: '--token',\n *   backgroundColor: '--token',\n *   '--variant-borderWidth': '0px',\n * }\n * @example {\n *   cursor: 'pointer',\n *   color: '--token',\n *   backgroundColor: '--token',\n *   '--variant-borderWidth': '1px',\n * }\n * @example {\n *   pointerEvents: 'none',\n *   cursor: 'default',\n *   color: '--token',\n *   backgroundColor: '--token',\n *   '--variant-borderWidth': '0px',\n * }\n */\n\n\nexport const createVariantStyle = (name, palette, getCssVar) => {\n  const result = {};\n  Object.entries(palette || {}).forEach(_ref => {\n    let [variantVar, value] = _ref;\n\n    if (variantVar.match(new RegExp(`${name}(color|bg|border)`, 'i')) && !!value) {\n      const cssVar = getCssVar ? getCssVar(variantVar) : value;\n\n      if (variantVar.includes('Hover')) {\n        result.cursor = 'pointer';\n      }\n\n      if (variantVar.includes('Disabled')) {\n        result.pointerEvents = 'none';\n        result.cursor = 'default';\n      }\n\n      if (variantVar.match(/(Hover|Active|Disabled)/)) {\n        assignCss(result, variantVar, cssVar);\n      } else {\n        // initial state\n        if (!result['--variant-borderWidth']) {\n          result['--variant-borderWidth'] = '0px';\n        }\n\n        if (variantVar.includes('Border')) {\n          result['--variant-borderWidth'] = '1px';\n          result.border = 'var(--variant-borderWidth) solid';\n        } // border color should come later\n\n\n        assignCss(result, variantVar, cssVar);\n      }\n    }\n  });\n  return result;\n};\n\nconst createPrefixVar = cssVarPrefix => {\n  return cssVar => `--${cssVarPrefix ? `${cssVarPrefix}-` : ''}${cssVar.replace(/^--/, '')}`;\n};\n\nexport const createVariant = (variant, theme) => {\n  let result = {};\n\n  if (theme) {\n    const {\n      getCssVar,\n      palette\n    } = theme;\n    Object.entries(palette).forEach(entry => {\n      const [color, colorPalette] = entry;\n\n      if (isVariantPalette(colorPalette) && typeof colorPalette === 'object') {\n        result = _extends({}, result, {\n          [color]: createVariantStyle(variant, colorPalette, variantVar => getCssVar(`palette-${color}-${variantVar}`))\n        });\n      }\n    });\n  }\n\n  result.context = createVariantStyle(variant, {\n    plainColor: 'var(--variant-plainColor)',\n    plainHoverColor: `var(--variant-plainHoverColor)`,\n    plainHoverBg: 'var(--variant-plainHoverBg)',\n    plainActiveBg: 'var(--variant-plainActiveBg)',\n    plainDisabledColor: 'var(--variant-plainDisabledColor)',\n    outlinedColor: 'var(--variant-outlinedColor)',\n    outlinedBorder: 'var(--variant-outlinedBorder)',\n    outlinedHoverColor: `var(--variant-outlinedHoverColor)`,\n    outlinedHoverBorder: `var(--variant-outlinedHoverBorder)`,\n    outlinedHoverBg: `var(--variant-outlinedHoverBg)`,\n    outlinedActiveBg: `var(--variant-outlinedActiveBg)`,\n    outlinedDisabledColor: `var(--variant-outlinedDisabledColor)`,\n    outlinedDisabledBorder: `var(--variant-outlinedDisabledBorder)`,\n    softColor: 'var(--variant-softColor)',\n    softBg: 'var(--variant-softBg)',\n    softHoverColor: 'var(--variant-softHoverColor)',\n    softHoverBg: 'var(--variant-softHoverBg)',\n    softActiveBg: 'var(--variant-softActiveBg)',\n    softDisabledColor: 'var(--variant-softDisabledColor)',\n    softDisabledBg: 'var(--variant-softDisabledBg)',\n    solidColor: 'var(--variant-solidColor)',\n    solidBg: 'var(--variant-solidBg)',\n    solidHoverColor: 'var(--variant-solidHoverColor)',\n    solidHoverBg: 'var(--variant-solidHoverBg)',\n    solidActiveBg: 'var(--variant-solidActiveBg)',\n    solidDisabledColor: 'var(--variant-solidDisabledColor)',\n    solidDisabledBg: 'var(--variant-solidDisabledBg)'\n  });\n  return result;\n};\nexport const createSoftInversion = theme => {\n  const getCssVar = createGetCssVar(theme.cssVarPrefix);\n  const cssVarPrefixVar = createPrefixVar(theme.cssVarPrefix);\n  const result = {};\n  Object.entries(theme.palette).forEach(entry => {\n    const [color, colorPalette] = entry;\n\n    if (isVariantPalette(colorPalette)) {\n      result[color] = {\n        '--Badge-ringColor': getCssVar(`palette-${color}-softBg`),\n        [theme.getColorSchemeSelector('light')]: {\n          [cssVarPrefixVar('--palette-focusVisible')]: getCssVar(`palette-${color}-500`),\n          [cssVarPrefixVar('--palette-background-body')]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.1)`,\n          [cssVarPrefixVar('--palette-background-surface')]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.08)`,\n          [cssVarPrefixVar('--palette-background-level1')]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.2)`,\n          [cssVarPrefixVar('--palette-background-level2')]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.32)`,\n          [cssVarPrefixVar('--palette-background-level3')]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.48)`,\n          [cssVarPrefixVar('--palette-text-primary')]: getCssVar(`palette-${color}-700`),\n          [cssVarPrefixVar('--palette-text-secondary')]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.8)`,\n          [cssVarPrefixVar('--palette-text-tertiary')]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.68)`,\n          [cssVarPrefixVar('--palette-divider')]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.32)`,\n          '--variant-plainColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 1)`,\n          '--variant-plainHoverColor': getCssVar(`palette-${color}-600`),\n          '--variant-plainHoverBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.12)`,\n          '--variant-plainActiveBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.24)`,\n          '--variant-plainDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.6)`,\n          '--variant-outlinedColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 1)`,\n          '--variant-outlinedBorder': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.4)`,\n          '--variant-outlinedHoverColor': getCssVar(`palette-${color}-600`),\n          '--variant-outlinedHoverBorder': getCssVar(`palette-${color}-300`),\n          '--variant-outlinedHoverBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.12)`,\n          '--variant-outlinedActiveBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.24)`,\n          '--variant-outlinedDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.6)`,\n          '--variant-outlinedDisabledBorder': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.12)`,\n          '--variant-softColor': getCssVar(`palette-${color}-600`),\n          '--variant-softBg': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.72)`,\n          '--variant-softHoverColor': getCssVar(`palette-${color}-700`),\n          '--variant-softHoverBg': getCssVar(`palette-${color}-200`),\n          '--variant-softActiveBg': getCssVar(`palette-${color}-300`),\n          '--variant-softDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.6)`,\n          '--variant-softDisabledBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.08)`,\n          '--variant-solidColor': getCssVar('palette-common-white'),\n          '--variant-solidBg': getCssVar(`palette-${color}-600`),\n          '--variant-solidHoverColor': getCssVar('palette-common-white'),\n          '--variant-solidHoverBg': getCssVar(`palette-${color}-700`),\n          '--variant-solidActiveBg': getCssVar(`palette-${color}-800`),\n          '--variant-solidDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.6)`,\n          '--variant-solidDisabledBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.08)`\n        },\n        [theme.getColorSchemeSelector('dark')]: {\n          [cssVarPrefixVar('--palette-focusVisible')]: getCssVar(`palette-${color}-300`),\n          [cssVarPrefixVar('--palette-background-body')]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.1)`,\n          [cssVarPrefixVar('--palette-background-surface')]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.08)`,\n          [cssVarPrefixVar('--palette-background-level1')]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.2)`,\n          [cssVarPrefixVar('--palette-background-level2')]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.4)`,\n          [cssVarPrefixVar('--palette-background-level3')]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.6)`,\n          [cssVarPrefixVar('--palette-text-primary')]: getCssVar(`palette-${color}-100`),\n          [cssVarPrefixVar('--palette-text-secondary')]: `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.72)`,\n          [cssVarPrefixVar('--palette-text-tertiary')]: `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.6)`,\n          [cssVarPrefixVar('--palette-divider')]: `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.2)`,\n          '--variant-plainColor': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 1)`,\n          '--variant-plainHoverColor': getCssVar(`palette-${color}-50`),\n          '--variant-plainHoverBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.16)`,\n          '--variant-plainActiveBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.32)`,\n          '--variant-plainDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.72)`,\n          '--variant-outlinedColor': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 1)`,\n          '--variant-outlinedHoverColor': getCssVar(`palette-${color}-50`),\n          '--variant-outlinedBg': 'initial',\n          '--variant-outlinedBorder': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.4)`,\n          '--variant-outlinedHoverBorder': getCssVar(`palette-${color}-600`),\n          '--variant-outlinedHoverBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.16)`,\n          '--variant-outlinedActiveBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.32)`,\n          '--variant-outlinedDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.72)`,\n          '--variant-outlinedDisabledBorder': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.2)`,\n          '--variant-softColor': getCssVar(`palette-${color}-100`),\n          '--variant-softBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.24)`,\n          '--variant-softHoverColor': '#fff',\n          '--variant-softHoverBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.32)`,\n          '--variant-softActiveBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.48)`,\n          '--variant-softDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.72)`,\n          '--variant-softDisabledBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.12)`,\n          '--variant-solidColor': '#fff',\n          '--variant-solidBg': getCssVar(`palette-${color}-500`),\n          '--variant-solidHoverColor': '#fff',\n          '--variant-solidHoverBg': getCssVar(`palette-${color}-500`),\n          '--variant-solidActiveBg': getCssVar(`palette-${color}-600`),\n          '--variant-solidDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.72)`,\n          '--variant-solidDisabledBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.12)`\n        }\n      };\n    }\n  });\n  return result;\n};\nexport const createSolidInversion = theme => {\n  const getCssVar = createGetCssVar(theme.cssVarPrefix);\n  const cssVarPrefixVar = createPrefixVar(theme.cssVarPrefix);\n  const result = {};\n  Object.entries(theme.palette).forEach(entry => {\n    const [color, colorPalette] = entry;\n\n    if (isVariantPalette(colorPalette)) {\n      if (color === 'warning') {\n        result.warning = {\n          '--Badge-ringColor': getCssVar(`palette-${color}-solidBg`),\n          [cssVarPrefixVar('--palette-focusVisible')]: getCssVar(`palette-${color}-700`),\n          [cssVarPrefixVar('--palette-background-body')]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.16)`,\n          [cssVarPrefixVar('--palette-background-surface')]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.1)`,\n          [cssVarPrefixVar('--palette-background-popup')]: getCssVar(`palette-${color}-100`),\n          [cssVarPrefixVar('--palette-background-level1')]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.2)`,\n          [cssVarPrefixVar('--palette-background-level2')]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.36)`,\n          [cssVarPrefixVar('--palette-background-level3')]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.6)`,\n          [cssVarPrefixVar('--palette-text-primary')]: getCssVar(`palette-${color}-900`),\n          [cssVarPrefixVar('--palette-text-secondary')]: getCssVar(`palette-${color}-700`),\n          [cssVarPrefixVar('--palette-text-tertiary')]: getCssVar(`palette-${color}-500`),\n          [cssVarPrefixVar('--palette-divider')]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.2)`,\n          '--variant-plainColor': getCssVar(`palette-${color}-700`),\n          '--variant-plainHoverColor': getCssVar(`palette-${color}-800`),\n          '--variant-plainHoverBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.12)`,\n          '--variant-plainActiveBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.32)`,\n          '--variant-plainDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.72)`,\n          '--variant-outlinedColor': getCssVar(`palette-${color}-700`),\n          '--variant-outlinedBorder': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.5)`,\n          '--variant-outlinedHoverColor': getCssVar(`palette-${color}-800`),\n          '--variant-outlinedHoverBorder': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.6)`,\n          '--variant-outlinedHoverBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.12)`,\n          '--variant-outlinedActiveBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.32)`,\n          '--variant-outlinedDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.72)`,\n          '--variant-outlinedDisabledBorder': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.2)`,\n          '--variant-softColor': getCssVar(`palette-${color}-800`),\n          '--variant-softHoverColor': getCssVar(`palette-${color}-900`),\n          '--variant-softBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.2)`,\n          '--variant-softHoverBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.28)`,\n          '--variant-softActiveBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.12)`,\n          '--variant-softDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.72)`,\n          '--variant-softDisabledBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.08)`,\n          '--variant-solidColor': '#fff',\n          '--variant-solidBg': getCssVar(`palette-${color}-700`),\n          '--variant-solidHoverColor': '#fff',\n          '--variant-solidHoverBg': getCssVar(`palette-${color}-800`),\n          '--variant-solidActiveBg': getCssVar(`palette-${color}-600`),\n          '--variant-solidDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.72)`,\n          '--variant-solidDisabledBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.08)`\n        };\n      } else {\n        result[color] = {\n          '--Badge-ringColor': getCssVar(`palette-${color}-solidBg`),\n          [cssVarPrefixVar('--palette-focusVisible')]: getCssVar(`palette-${color}-200`),\n          [cssVarPrefixVar('--palette-background-body')]: 'rgba(0 0 0 / 0.1)',\n          [cssVarPrefixVar('--palette-background-surface')]: 'rgba(0 0 0 / 0.06)',\n          [cssVarPrefixVar('--palette-background-popup')]: getCssVar(`palette-${color}-700`),\n          [cssVarPrefixVar('--palette-background-level1')]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.2)`,\n          [cssVarPrefixVar('--palette-background-level2')]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.36)`,\n          [cssVarPrefixVar('--palette-background-level3')]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.6)`,\n          [cssVarPrefixVar('--palette-text-primary')]: getCssVar(`palette-common-white`),\n          [cssVarPrefixVar('--palette-text-secondary')]: getCssVar(`palette-${color}-100`),\n          [cssVarPrefixVar('--palette-text-tertiary')]: getCssVar(`palette-${color}-200`),\n          [cssVarPrefixVar('--palette-divider')]: `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.32)`,\n          '--variant-plainColor': getCssVar(`palette-${color}-50`),\n          '--variant-plainHoverColor': `#fff`,\n          '--variant-plainHoverBg': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.12)`,\n          '--variant-plainActiveBg': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.32)`,\n          '--variant-plainDisabledColor': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.72)`,\n          '--variant-outlinedColor': getCssVar(`palette-${color}-50`),\n          '--variant-outlinedBorder': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.5)`,\n          '--variant-outlinedHoverColor': `#fff`,\n          '--variant-outlinedHoverBorder': getCssVar(`palette-${color}-300`),\n          '--variant-outlinedHoverBg': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.12)`,\n          '--variant-outlinedActiveBg': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.32)`,\n          '--variant-outlinedDisabledColor': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.72)`,\n          '--variant-outlinedDisabledBorder': `rgba(255 255 255 / 0.2)`,\n          '--variant-softColor': getCssVar(`palette-common-white`),\n          '--variant-softHoverColor': getCssVar(`palette-common-white`),\n          '--variant-softBg': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.24)`,\n          '--variant-softHoverBg': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.36)`,\n          '--variant-softActiveBg': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.16)`,\n          '--variant-softDisabledColor': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.72)`,\n          '--variant-softDisabledBg': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.1)`,\n          '--variant-solidColor': getCssVar(`palette-${color}-700`),\n          '--variant-solidBg': getCssVar(`palette-common-white`),\n          '--variant-solidHoverColor': getCssVar(`palette-${color}-900`),\n          '--variant-solidHoverBg': getCssVar(`palette-${color}-100`),\n          '--variant-solidActiveBg': getCssVar(`palette-${color}-200`),\n          '--variant-solidDisabledColor': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.72)`,\n          '--variant-solidDisabledBg': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.1)`\n        };\n      }\n    }\n  });\n  return result;\n};","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/node_modules/@mui/joy/styles/variantUtils.js"],"names":["_extends","unstable_createGetCssVar","createGetCssVar","isVariantPalette","colorPalette","Object","keys","some","value","_value$match","match","call","assignCss","target","variantVar","includes","color","backgroundColor","borderColor","createVariantStyle","name","palette","getCssVar","result","entries","forEach","RegExp","cssVar","cursor","pointerEvents","border","createPrefixVar","cssVarPrefix","replace","createVariant","variant","theme","entry","context","plainColor","plainHoverColor","plainHoverBg","plainActiveBg","plainDisabledColor","outlinedColor","outlinedBorder","outlinedHoverColor","outlinedHoverBorder","outlinedHoverBg","outlinedActiveBg","outlinedDisabledColor","outlinedDisabledBorder","softColor","softBg","softHoverColor","softHoverBg","softActiveBg","softDisabledColor","softDisabledBg","solidColor","solidBg","solidHoverColor","solidHoverBg","solidActiveBg","solidDisabledColor","solidDisabledBg","createSoftInversion","cssVarPrefixVar","getColorSchemeSelector","createSolidInversion","warning"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { unstable_createGetCssVar as createGetCssVar } from '@mui/system';\nexport const isVariantPalette = colorPalette => colorPalette && typeof colorPalette === 'object' && Object.keys(colorPalette).some(value => {\n  var _value$match;\n  return (_value$match = value.match) == null ? void 0 : _value$match.call(value, /^(plain(Hover|Active|Disabled)?(Color|Bg)|outlined(Hover|Active|Disabled)?(Color|Border|Bg)|soft(Hover|Active|Disabled)?(Color|Bg)|solid(Hover|Active|Disabled)?(Color|Bg))$/);\n});\nconst assignCss = (target, variantVar, value) => {\n  if (variantVar.includes('Color')) {\n    target.color = value;\n  }\n  if (variantVar.includes('Bg')) {\n    target.backgroundColor = value;\n  }\n  if (variantVar.includes('Border')) {\n    target.borderColor = value;\n  }\n};\n\n/**\n *\n * @param name variant name\n * @example 'plain'\n *\n * @param palette object that contains palette tokens\n * @example { primary: { plainColor: '', plainHoverColor: '', ...tokens }, ...other palete }\n *\n * @param getCssVar a function that receive variant token and return a CSS variable\n *\n * result will be the stylesheet based on the palette tokens\n * @example {\n *   color: '--token',\n *   backgroundColor: '--token',\n *   '--variant-borderWidth': '0px',\n * }\n * @example {\n *   cursor: 'pointer',\n *   color: '--token',\n *   backgroundColor: '--token',\n *   '--variant-borderWidth': '1px',\n * }\n * @example {\n *   pointerEvents: 'none',\n *   cursor: 'default',\n *   color: '--token',\n *   backgroundColor: '--token',\n *   '--variant-borderWidth': '0px',\n * }\n */\nexport const createVariantStyle = (name, palette, getCssVar) => {\n  const result = {};\n  Object.entries(palette || {}).forEach(([variantVar, value]) => {\n    if (variantVar.match(new RegExp(`${name}(color|bg|border)`, 'i')) && !!value) {\n      const cssVar = getCssVar ? getCssVar(variantVar) : value;\n      if (variantVar.includes('Hover')) {\n        result.cursor = 'pointer';\n      }\n      if (variantVar.includes('Disabled')) {\n        result.pointerEvents = 'none';\n        result.cursor = 'default';\n      }\n      if (variantVar.match(/(Hover|Active|Disabled)/)) {\n        assignCss(result, variantVar, cssVar);\n      } else {\n        // initial state\n        if (!result['--variant-borderWidth']) {\n          result['--variant-borderWidth'] = '0px';\n        }\n        if (variantVar.includes('Border')) {\n          result['--variant-borderWidth'] = '1px';\n          result.border = 'var(--variant-borderWidth) solid';\n        }\n        // border color should come later\n        assignCss(result, variantVar, cssVar);\n      }\n    }\n  });\n  return result;\n};\nconst createPrefixVar = cssVarPrefix => {\n  return cssVar => `--${cssVarPrefix ? `${cssVarPrefix}-` : ''}${cssVar.replace(/^--/, '')}`;\n};\nexport const createVariant = (variant, theme) => {\n  let result = {};\n  if (theme) {\n    const {\n      getCssVar,\n      palette\n    } = theme;\n    Object.entries(palette).forEach(entry => {\n      const [color, colorPalette] = entry;\n      if (isVariantPalette(colorPalette) && typeof colorPalette === 'object') {\n        result = _extends({}, result, {\n          [color]: createVariantStyle(variant, colorPalette, variantVar => getCssVar(`palette-${color}-${variantVar}`))\n        });\n      }\n    });\n  }\n  result.context = createVariantStyle(variant, {\n    plainColor: 'var(--variant-plainColor)',\n    plainHoverColor: `var(--variant-plainHoverColor)`,\n    plainHoverBg: 'var(--variant-plainHoverBg)',\n    plainActiveBg: 'var(--variant-plainActiveBg)',\n    plainDisabledColor: 'var(--variant-plainDisabledColor)',\n    outlinedColor: 'var(--variant-outlinedColor)',\n    outlinedBorder: 'var(--variant-outlinedBorder)',\n    outlinedHoverColor: `var(--variant-outlinedHoverColor)`,\n    outlinedHoverBorder: `var(--variant-outlinedHoverBorder)`,\n    outlinedHoverBg: `var(--variant-outlinedHoverBg)`,\n    outlinedActiveBg: `var(--variant-outlinedActiveBg)`,\n    outlinedDisabledColor: `var(--variant-outlinedDisabledColor)`,\n    outlinedDisabledBorder: `var(--variant-outlinedDisabledBorder)`,\n    softColor: 'var(--variant-softColor)',\n    softBg: 'var(--variant-softBg)',\n    softHoverColor: 'var(--variant-softHoverColor)',\n    softHoverBg: 'var(--variant-softHoverBg)',\n    softActiveBg: 'var(--variant-softActiveBg)',\n    softDisabledColor: 'var(--variant-softDisabledColor)',\n    softDisabledBg: 'var(--variant-softDisabledBg)',\n    solidColor: 'var(--variant-solidColor)',\n    solidBg: 'var(--variant-solidBg)',\n    solidHoverColor: 'var(--variant-solidHoverColor)',\n    solidHoverBg: 'var(--variant-solidHoverBg)',\n    solidActiveBg: 'var(--variant-solidActiveBg)',\n    solidDisabledColor: 'var(--variant-solidDisabledColor)',\n    solidDisabledBg: 'var(--variant-solidDisabledBg)'\n  });\n  return result;\n};\nexport const createSoftInversion = theme => {\n  const getCssVar = createGetCssVar(theme.cssVarPrefix);\n  const cssVarPrefixVar = createPrefixVar(theme.cssVarPrefix);\n  const result = {};\n  Object.entries(theme.palette).forEach(entry => {\n    const [color, colorPalette] = entry;\n    if (isVariantPalette(colorPalette)) {\n      result[color] = {\n        '--Badge-ringColor': getCssVar(`palette-${color}-softBg`),\n        [theme.getColorSchemeSelector('light')]: {\n          [cssVarPrefixVar('--palette-focusVisible')]: getCssVar(`palette-${color}-500`),\n          [cssVarPrefixVar('--palette-background-body')]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.1)`,\n          [cssVarPrefixVar('--palette-background-surface')]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.08)`,\n          [cssVarPrefixVar('--palette-background-level1')]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.2)`,\n          [cssVarPrefixVar('--palette-background-level2')]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.32)`,\n          [cssVarPrefixVar('--palette-background-level3')]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.48)`,\n          [cssVarPrefixVar('--palette-text-primary')]: getCssVar(`palette-${color}-700`),\n          [cssVarPrefixVar('--palette-text-secondary')]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.8)`,\n          [cssVarPrefixVar('--palette-text-tertiary')]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.68)`,\n          [cssVarPrefixVar('--palette-divider')]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.32)`,\n          '--variant-plainColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 1)`,\n          '--variant-plainHoverColor': getCssVar(`palette-${color}-600`),\n          '--variant-plainHoverBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.12)`,\n          '--variant-plainActiveBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.24)`,\n          '--variant-plainDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.6)`,\n          '--variant-outlinedColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 1)`,\n          '--variant-outlinedBorder': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.4)`,\n          '--variant-outlinedHoverColor': getCssVar(`palette-${color}-600`),\n          '--variant-outlinedHoverBorder': getCssVar(`palette-${color}-300`),\n          '--variant-outlinedHoverBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.12)`,\n          '--variant-outlinedActiveBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.24)`,\n          '--variant-outlinedDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.6)`,\n          '--variant-outlinedDisabledBorder': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.12)`,\n          '--variant-softColor': getCssVar(`palette-${color}-600`),\n          '--variant-softBg': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.72)`,\n          '--variant-softHoverColor': getCssVar(`palette-${color}-700`),\n          '--variant-softHoverBg': getCssVar(`palette-${color}-200`),\n          '--variant-softActiveBg': getCssVar(`palette-${color}-300`),\n          '--variant-softDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.6)`,\n          '--variant-softDisabledBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.08)`,\n          '--variant-solidColor': getCssVar('palette-common-white'),\n          '--variant-solidBg': getCssVar(`palette-${color}-600`),\n          '--variant-solidHoverColor': getCssVar('palette-common-white'),\n          '--variant-solidHoverBg': getCssVar(`palette-${color}-700`),\n          '--variant-solidActiveBg': getCssVar(`palette-${color}-800`),\n          '--variant-solidDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.6)`,\n          '--variant-solidDisabledBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.08)`\n        },\n        [theme.getColorSchemeSelector('dark')]: {\n          [cssVarPrefixVar('--palette-focusVisible')]: getCssVar(`palette-${color}-300`),\n          [cssVarPrefixVar('--palette-background-body')]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.1)`,\n          [cssVarPrefixVar('--palette-background-surface')]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.08)`,\n          [cssVarPrefixVar('--palette-background-level1')]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.2)`,\n          [cssVarPrefixVar('--palette-background-level2')]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.4)`,\n          [cssVarPrefixVar('--palette-background-level3')]: `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.6)`,\n          [cssVarPrefixVar('--palette-text-primary')]: getCssVar(`palette-${color}-100`),\n          [cssVarPrefixVar('--palette-text-secondary')]: `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.72)`,\n          [cssVarPrefixVar('--palette-text-tertiary')]: `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.6)`,\n          [cssVarPrefixVar('--palette-divider')]: `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.2)`,\n          '--variant-plainColor': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 1)`,\n          '--variant-plainHoverColor': getCssVar(`palette-${color}-50`),\n          '--variant-plainHoverBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.16)`,\n          '--variant-plainActiveBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.32)`,\n          '--variant-plainDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.72)`,\n          '--variant-outlinedColor': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 1)`,\n          '--variant-outlinedHoverColor': getCssVar(`palette-${color}-50`),\n          '--variant-outlinedBg': 'initial',\n          '--variant-outlinedBorder': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.4)`,\n          '--variant-outlinedHoverBorder': getCssVar(`palette-${color}-600`),\n          '--variant-outlinedHoverBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.16)`,\n          '--variant-outlinedActiveBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.32)`,\n          '--variant-outlinedDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.72)`,\n          '--variant-outlinedDisabledBorder': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.2)`,\n          '--variant-softColor': getCssVar(`palette-${color}-100`),\n          '--variant-softBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.24)`,\n          '--variant-softHoverColor': '#fff',\n          '--variant-softHoverBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.32)`,\n          '--variant-softActiveBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.48)`,\n          '--variant-softDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.72)`,\n          '--variant-softDisabledBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.12)`,\n          '--variant-solidColor': '#fff',\n          '--variant-solidBg': getCssVar(`palette-${color}-500`),\n          '--variant-solidHoverColor': '#fff',\n          '--variant-solidHoverBg': getCssVar(`palette-${color}-500`),\n          '--variant-solidActiveBg': getCssVar(`palette-${color}-600`),\n          '--variant-solidDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.72)`,\n          '--variant-solidDisabledBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.12)`\n        }\n      };\n    }\n  });\n  return result;\n};\nexport const createSolidInversion = theme => {\n  const getCssVar = createGetCssVar(theme.cssVarPrefix);\n  const cssVarPrefixVar = createPrefixVar(theme.cssVarPrefix);\n  const result = {};\n  Object.entries(theme.palette).forEach(entry => {\n    const [color, colorPalette] = entry;\n    if (isVariantPalette(colorPalette)) {\n      if (color === 'warning') {\n        result.warning = {\n          '--Badge-ringColor': getCssVar(`palette-${color}-solidBg`),\n          [cssVarPrefixVar('--palette-focusVisible')]: getCssVar(`palette-${color}-700`),\n          [cssVarPrefixVar('--palette-background-body')]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.16)`,\n          [cssVarPrefixVar('--palette-background-surface')]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.1)`,\n          [cssVarPrefixVar('--palette-background-popup')]: getCssVar(`palette-${color}-100`),\n          [cssVarPrefixVar('--palette-background-level1')]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.2)`,\n          [cssVarPrefixVar('--palette-background-level2')]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.36)`,\n          [cssVarPrefixVar('--palette-background-level3')]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.6)`,\n          [cssVarPrefixVar('--palette-text-primary')]: getCssVar(`palette-${color}-900`),\n          [cssVarPrefixVar('--palette-text-secondary')]: getCssVar(`palette-${color}-700`),\n          [cssVarPrefixVar('--palette-text-tertiary')]: getCssVar(`palette-${color}-500`),\n          [cssVarPrefixVar('--palette-divider')]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.2)`,\n          '--variant-plainColor': getCssVar(`palette-${color}-700`),\n          '--variant-plainHoverColor': getCssVar(`palette-${color}-800`),\n          '--variant-plainHoverBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.12)`,\n          '--variant-plainActiveBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.32)`,\n          '--variant-plainDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.72)`,\n          '--variant-outlinedColor': getCssVar(`palette-${color}-700`),\n          '--variant-outlinedBorder': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.5)`,\n          '--variant-outlinedHoverColor': getCssVar(`palette-${color}-800`),\n          '--variant-outlinedHoverBorder': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.6)`,\n          '--variant-outlinedHoverBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.12)`,\n          '--variant-outlinedActiveBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.32)`,\n          '--variant-outlinedDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.72)`,\n          '--variant-outlinedDisabledBorder': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.2)`,\n          '--variant-softColor': getCssVar(`palette-${color}-800`),\n          '--variant-softHoverColor': getCssVar(`palette-${color}-900`),\n          '--variant-softBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.2)`,\n          '--variant-softHoverBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.28)`,\n          '--variant-softActiveBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.12)`,\n          '--variant-softDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.72)`,\n          '--variant-softDisabledBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.08)`,\n          '--variant-solidColor': '#fff',\n          '--variant-solidBg': getCssVar(`palette-${color}-700`),\n          '--variant-solidHoverColor': '#fff',\n          '--variant-solidHoverBg': getCssVar(`palette-${color}-800`),\n          '--variant-solidActiveBg': getCssVar(`palette-${color}-600`),\n          '--variant-solidDisabledColor': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.72)`,\n          '--variant-solidDisabledBg': `rgba(${getCssVar(`palette-${color}-mainChannel`)} / 0.08)`\n        };\n      } else {\n        result[color] = {\n          '--Badge-ringColor': getCssVar(`palette-${color}-solidBg`),\n          [cssVarPrefixVar('--palette-focusVisible')]: getCssVar(`palette-${color}-200`),\n          [cssVarPrefixVar('--palette-background-body')]: 'rgba(0 0 0 / 0.1)',\n          [cssVarPrefixVar('--palette-background-surface')]: 'rgba(0 0 0 / 0.06)',\n          [cssVarPrefixVar('--palette-background-popup')]: getCssVar(`palette-${color}-700`),\n          [cssVarPrefixVar('--palette-background-level1')]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.2)`,\n          [cssVarPrefixVar('--palette-background-level2')]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.36)`,\n          [cssVarPrefixVar('--palette-background-level3')]: `rgba(${getCssVar(`palette-${color}-darkChannel`)} / 0.6)`,\n          [cssVarPrefixVar('--palette-text-primary')]: getCssVar(`palette-common-white`),\n          [cssVarPrefixVar('--palette-text-secondary')]: getCssVar(`palette-${color}-100`),\n          [cssVarPrefixVar('--palette-text-tertiary')]: getCssVar(`palette-${color}-200`),\n          [cssVarPrefixVar('--palette-divider')]: `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.32)`,\n          '--variant-plainColor': getCssVar(`palette-${color}-50`),\n          '--variant-plainHoverColor': `#fff`,\n          '--variant-plainHoverBg': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.12)`,\n          '--variant-plainActiveBg': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.32)`,\n          '--variant-plainDisabledColor': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.72)`,\n          '--variant-outlinedColor': getCssVar(`palette-${color}-50`),\n          '--variant-outlinedBorder': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.5)`,\n          '--variant-outlinedHoverColor': `#fff`,\n          '--variant-outlinedHoverBorder': getCssVar(`palette-${color}-300`),\n          '--variant-outlinedHoverBg': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.12)`,\n          '--variant-outlinedActiveBg': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.32)`,\n          '--variant-outlinedDisabledColor': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.72)`,\n          '--variant-outlinedDisabledBorder': `rgba(255 255 255 / 0.2)`,\n          '--variant-softColor': getCssVar(`palette-common-white`),\n          '--variant-softHoverColor': getCssVar(`palette-common-white`),\n          '--variant-softBg': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.24)`,\n          '--variant-softHoverBg': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.36)`,\n          '--variant-softActiveBg': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.16)`,\n          '--variant-softDisabledColor': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.72)`,\n          '--variant-softDisabledBg': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.1)`,\n          '--variant-solidColor': getCssVar(`palette-${color}-700`),\n          '--variant-solidBg': getCssVar(`palette-common-white`),\n          '--variant-solidHoverColor': getCssVar(`palette-${color}-900`),\n          '--variant-solidHoverBg': getCssVar(`palette-${color}-100`),\n          '--variant-solidActiveBg': getCssVar(`palette-${color}-200`),\n          '--variant-solidDisabledColor': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.72)`,\n          '--variant-solidDisabledBg': `rgba(${getCssVar(`palette-${color}-lightChannel`)} / 0.1)`\n        };\n      }\n    }\n  });\n  return result;\n};"]},"metadata":{},"sourceType":"module"}