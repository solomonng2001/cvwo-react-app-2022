{"ast":null,"code":"import { deepmerge } from '@mui/utils';\nimport { unstable_createCssVarsProvider as createCssVarsProvider, unstable_styleFunctionSx as styleFunctionSx } from '@mui/system';\nimport extendTheme from './extendTheme';\nimport { createSoftInversion, createSolidInversion } from './variantUtils';\n\nconst shouldSkipGeneratingVar = keys => {\n  var _keys$;\n\n  return !!keys[0].match(/^(typography|variants|breakpoints|colorInversion|colorInversionConfig)$/) || keys[0] === 'palette' && !!((_keys$ = keys[1]) != null && _keys$.match(/^(mode)$/)) || keys[0] === 'focus' && keys[1] !== 'thickness';\n};\n\nconst {\n  CssVarsProvider,\n  useColorScheme,\n  getInitColorSchemeScript\n} = createCssVarsProvider({\n  theme: extendTheme(),\n  attribute: 'data-joy-color-scheme',\n  modeStorageKey: 'joy-mode',\n  colorSchemeStorageKey: 'joy-color-scheme',\n  defaultColorScheme: {\n    light: 'light',\n    dark: 'dark'\n  },\n  resolveTheme: mergedTheme => {\n    // `colorInversion` need to be generated after the theme's palette has been calculated.\n    mergedTheme.colorInversion = deepmerge({\n      soft: createSoftInversion(mergedTheme),\n      solid: createSolidInversion(mergedTheme)\n    }, mergedTheme.colorInversion, {\n      clone: false\n    }); // TOOD remove this intermediary function call.\n\n    mergedTheme.unstable_sx = function sx(props) {\n      return styleFunctionSx({\n        sx: props,\n        theme: this\n      });\n    };\n\n    return mergedTheme;\n  },\n  shouldSkipGeneratingVar\n});\nexport { CssVarsProvider, useColorScheme, getInitColorSchemeScript, shouldSkipGeneratingVar };","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/node_modules/@mui/joy/styles/CssVarsProvider.js"],"names":["deepmerge","unstable_createCssVarsProvider","createCssVarsProvider","unstable_styleFunctionSx","styleFunctionSx","extendTheme","createSoftInversion","createSolidInversion","shouldSkipGeneratingVar","keys","_keys$","match","CssVarsProvider","useColorScheme","getInitColorSchemeScript","theme","attribute","modeStorageKey","colorSchemeStorageKey","defaultColorScheme","light","dark","resolveTheme","mergedTheme","colorInversion","soft","solid","clone","unstable_sx","sx","props"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA,SAASC,8BAA8B,IAAIC,qBAA3C,EAAkEC,wBAAwB,IAAIC,eAA9F,QAAqH,aAArH;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,mBAAT,EAA8BC,oBAA9B,QAA0D,gBAA1D;;AACA,MAAMC,uBAAuB,GAAGC,IAAI,IAAI;AACtC,MAAIC,MAAJ;;AACA,SAAO,CAAC,CAACD,IAAI,CAAC,CAAD,CAAJ,CAAQE,KAAR,CAAc,yEAAd,CAAF,IAA8FF,IAAI,CAAC,CAAD,CAAJ,KAAY,SAAZ,IAAyB,CAAC,EAAE,CAACC,MAAM,GAAGD,IAAI,CAAC,CAAD,CAAd,KAAsB,IAAtB,IAA8BC,MAAM,CAACC,KAAP,CAAa,UAAb,CAAhC,CAAxH,IAAqLF,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,IAAuBA,IAAI,CAAC,CAAD,CAAJ,KAAY,WAA/N;AACD,CAHD;;AAIA,MAAM;AACJG,EAAAA,eADI;AAEJC,EAAAA,cAFI;AAGJC,EAAAA;AAHI,IAIFZ,qBAAqB,CAAC;AACxBa,EAAAA,KAAK,EAAEV,WAAW,EADM;AAExBW,EAAAA,SAAS,EAAE,uBAFa;AAGxBC,EAAAA,cAAc,EAAE,UAHQ;AAIxBC,EAAAA,qBAAqB,EAAE,kBAJC;AAKxBC,EAAAA,kBAAkB,EAAE;AAClBC,IAAAA,KAAK,EAAE,OADW;AAElBC,IAAAA,IAAI,EAAE;AAFY,GALI;AASxBC,EAAAA,YAAY,EAAEC,WAAW,IAAI;AAC3B;AACAA,IAAAA,WAAW,CAACC,cAAZ,GAA6BxB,SAAS,CAAC;AACrCyB,MAAAA,IAAI,EAAEnB,mBAAmB,CAACiB,WAAD,CADY;AAErCG,MAAAA,KAAK,EAAEnB,oBAAoB,CAACgB,WAAD;AAFU,KAAD,EAGnCA,WAAW,CAACC,cAHuB,EAGP;AAC7BG,MAAAA,KAAK,EAAE;AADsB,KAHO,CAAtC,CAF2B,CAS3B;;AACAJ,IAAAA,WAAW,CAACK,WAAZ,GAA0B,SAASC,EAAT,CAAYC,KAAZ,EAAmB;AAC3C,aAAO1B,eAAe,CAAC;AACrByB,QAAAA,EAAE,EAAEC,KADiB;AAErBf,QAAAA,KAAK,EAAE;AAFc,OAAD,CAAtB;AAID,KALD;;AAMA,WAAOQ,WAAP;AACD,GA1BuB;AA2BxBf,EAAAA;AA3BwB,CAAD,CAJzB;AAiCA,SAASI,eAAT,EAA0BC,cAA1B,EAA0CC,wBAA1C,EAAoEN,uBAApE","sourcesContent":["import { deepmerge } from '@mui/utils';\nimport { unstable_createCssVarsProvider as createCssVarsProvider, unstable_styleFunctionSx as styleFunctionSx } from '@mui/system';\nimport extendTheme from './extendTheme';\nimport { createSoftInversion, createSolidInversion } from './variantUtils';\nconst shouldSkipGeneratingVar = keys => {\n  var _keys$;\n  return !!keys[0].match(/^(typography|variants|breakpoints|colorInversion|colorInversionConfig)$/) || keys[0] === 'palette' && !!((_keys$ = keys[1]) != null && _keys$.match(/^(mode)$/)) || keys[0] === 'focus' && keys[1] !== 'thickness';\n};\nconst {\n  CssVarsProvider,\n  useColorScheme,\n  getInitColorSchemeScript\n} = createCssVarsProvider({\n  theme: extendTheme(),\n  attribute: 'data-joy-color-scheme',\n  modeStorageKey: 'joy-mode',\n  colorSchemeStorageKey: 'joy-color-scheme',\n  defaultColorScheme: {\n    light: 'light',\n    dark: 'dark'\n  },\n  resolveTheme: mergedTheme => {\n    // `colorInversion` need to be generated after the theme's palette has been calculated.\n    mergedTheme.colorInversion = deepmerge({\n      soft: createSoftInversion(mergedTheme),\n      solid: createSolidInversion(mergedTheme)\n    }, mergedTheme.colorInversion, {\n      clone: false\n    });\n\n    // TOOD remove this intermediary function call.\n    mergedTheme.unstable_sx = function sx(props) {\n      return styleFunctionSx({\n        sx: props,\n        theme: this\n      });\n    };\n    return mergedTheme;\n  },\n  shouldSkipGeneratingVar\n});\nexport { CssVarsProvider, useColorScheme, getInitColorSchemeScript, shouldSkipGeneratingVar };"]},"metadata":{},"sourceType":"module"}