{"ast":null,"code":"var _jsxFileName = \"/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/UpdateThread.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, TextField, Dialog, DialogActions, DialogContent, DialogTitle } from '@material-ui/core';\nimport AlertUser from './AlertUser';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UpdateThread = _ref => {\n  _s();\n\n  let {\n    openUpdateThread,\n    handleCloseUpdateThread,\n    thread_page_id\n  } = _ref;\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState(null);\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [severity, setSeverity] = useState(undefined);\n  const [message, setMessage] = useState([]);\n\n  const handleSubmitUpdateThread = () => {\n    let new_message = [];\n\n    if (title === \"\" || body === \"\") {\n      new_message.push(\"Fill in all fields\");\n    }\n\n    if (new_message.length > 0) {\n      setSeverity('error');\n      setMessage(new_message);\n    } else {\n      fetch(\"http://localhost:3000/thread_pages\", {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title,\n          body\n        })\n      }).then(response => {\n        if (response.ok) {\n          setSeverity('success');\n          new_message.push(\"You have created a new thread!\");\n          setMessage(new_message);\n        } else {\n          setSeverity('error');\n          new_message.push(\"Some error occured\");\n          setMessage(new_message);\n        }\n      }).catch(error => console.log(error.message));\n    }\n  };\n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/thread_pages/\" + thread_page_id, {\n      method: 'PATCH',\n      mode: 'cors'\n    }).then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setTitle(result.title);\n      setBody(result.body);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 12\n  }, this);\n\n  if (error) {} else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openUpdateThread,\n      onClose: handleCloseUpdateThread,\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"What's on your mind?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(AlertUser, {\n          severity: severity,\n          message: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          value: title,\n          autoFocus: true,\n          type: \"text\",\n          margin: \"normal\",\n          label: \"Title\",\n          fullWidth: true,\n          variant: \"standard\",\n          onChange: event => setTitle(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          value: body,\n          type: \"text\",\n          margin: \"normal\",\n          label: \"Say something here...\",\n          fullWidth: true,\n          variant: \"standard\",\n          multiline: true,\n          onChange: event => setBody(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCloseUpdateThread,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSubmitUpdateThread,\n          children: \"Edit Thread\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(UpdateThread, \"zDd1OeqGmvINKiKmYwRRYAC1O4w=\");\n\n_c = UpdateThread;\nexport default UpdateThread;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateThread\");","map":{"version":3,"sources":["/Users/solomonng/dev/cvwo-rails-react-app/cvwo-react-app-2022/src/components/UpdateThread.tsx"],"names":["Button","TextField","Dialog","DialogActions","DialogContent","DialogTitle","AlertUser","React","useState","useEffect","UpdateThread","openUpdateThread","handleCloseUpdateThread","thread_page_id","isLoaded","setIsLoaded","error","setError","title","setTitle","body","setBody","severity","setSeverity","undefined","message","setMessage","handleSubmitUpdateThread","new_message","push","length","fetch","method","headers","JSON","stringify","then","response","ok","catch","console","log","mode","res","json","result","event","target","value"],"mappings":"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","sourcesContent":["import { Button, TextField, Dialog, DialogActions, DialogContent, \n    DialogTitle} from '@material-ui/core';\nimport AlertUser from './AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\n\nimport React, { useState, useEffect } from 'react';\n\ntype Props = {\n    openUpdateThread: boolean;\n    handleCloseUpdateThread: () => void;\n    thread_page_id: number;\n}\n\nconst UpdateThread: React.FC<Props> = ({openUpdateThread, handleCloseUpdateThread, thread_page_id}: Props) => {\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [error, setError] = useState<any>(null);\n    const [title, setTitle] = useState<string>(\"\");\n    const [body, setBody] = useState<string>(\"\");\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n    \n    const handleSubmitUpdateThread = () => {\n        let new_message: string[] = [];\n        if (title === \"\" || body === \"\") {\n            new_message.push(\"Fill in all fields\");\n        }\n        if (new_message.length > 0) {\n            setSeverity('error');\n            setMessage(new_message);\n        } else {\n            fetch(\"http://localhost:3000/thread_pages\", {\n                method: 'POST',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                body: JSON.stringify({\n                    title,\n                    body,\n                }),\n            })\n                .then((response) => {\n                    if (response.ok) {\n                        setSeverity('success');\n                        new_message.push(\"You have created a new thread!\")\n                        setMessage(new_message);\n                    } else {\n                        setSeverity('error');\n                        new_message.push(\"Some error occured\");\n                        setMessage(new_message);\n                    }\n                })\n                .catch((error) => console.log(error.message));\n        }\n    }\n\n    useEffect(() => {\n        fetch(\"http://localhost:3000/thread_pages/\" + thread_page_id, {\n            method: 'PATCH',\n            mode: 'cors'\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setTitle(result.title);\n                    setBody(result.body);\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            )\n    }, [])\n    return <div>Error: {error.message}</div>;\n    \n    if (error) {\n\n    } else if (!isLoaded) {\n        return <div>Loading...</div>;\n    } else {\n        return (\n            <Dialog open={openUpdateThread} onClose={handleCloseUpdateThread} fullWidth>\n                <DialogTitle>What's on your mind?</DialogTitle>\n                <DialogContent>\n                    <AlertUser severity={severity} message={message}/>\n                    <TextField\n                        value={title}\n                        autoFocus\n                        type='text'\n                        margin=\"normal\"\n                        label=\"Title\"\n                        fullWidth\n                        variant=\"standard\"\n                        onChange={event => setTitle(event.target.value)}\n                    />\n                    <TextField\n                        value={body}\n                        type='text'\n                        margin=\"normal\"\n                        label=\"Say something here...\"\n                        fullWidth\n                        variant=\"standard\"\n                        multiline\n                        onChange={event => setBody(event.target.value)}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleCloseUpdateThread}>Cancel</Button>\n                    <Button onClick={handleSubmitUpdateThread}>Edit Thread</Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n};\n\nexport default UpdateThread;"]},"metadata":{},"sourceType":"module"}