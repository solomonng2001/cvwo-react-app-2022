{"version":3,"sources":["components/AvatarUserTimeTags.tsx","components/AlertUser.tsx","components/comment/CreateComment.tsx","components/thread/DeleteThread.tsx","actions/actions.tsx","components/thread/UpdateThread.tsx","components/thread/DeleteEditCommentOnThread.tsx","components/BodyAddHTML.tsx","components/thread/ThreadMainPost.tsx","components/thread/ThreadList.tsx","components/thread/CreateThread.tsx","components/SearchBar.tsx","pages/Home.tsx","types/Thread.tsx","components/comment/DeleteComment.tsx","components/comment/UpdateComment.tsx","components/comment/DeleteEditOnComment.tsx","components/comment/CommentItem.tsx","components/comment/CommentList.tsx","components/thread/ThreadView.tsx","pages/ThreadPage.tsx","components/account/LogIn.tsx","components/account/CreateAccount.tsx","components/account/ChangePassword.tsx","components/account/AccountSettings.tsx","components/NavBar.tsx","components/GlobalMessage.tsx","pages/MyThreads.tsx","App.tsx","index.tsx"],"names":["AvatarUserTimeTags","tagged","user","time","tags","tagsArray","split","Grid","container","item","xs","Stack","direction","spacing","Avatar","Typography","align","variant","color","moment","fromNow","justifyContent","alignItems","map","tag","Chip","label","AlertUser","severity","message","error","Alert","CreateComment","API","openCreateComment","handleCloseCreateComment","thread_page_id","currentUserState","useState","body","setBody","undefined","setSeverity","setMessage","Dialog","open","onClose","fullWidth","DialogTitle","DialogContent","TextField","value","autoFocus","type","margin","multiline","onChange","event","target","DialogActions","Button","onClick","user_id","currentUser","id","new_message","push","length","fetch","toString","method","headers","JSON","stringify","then","response","ok","setTimeout","window","location","reload","catch","console","log","DeleteThread","openDeleteThread","handleCloseDeleteThread","url","href","startsWith","protocol","host","replace","strToArray","str","toLowerCase","filter","UpdateThread","openUpdateThread","handleCloseUpdateThread","thread","title","setTitle","join","tagsInput","setTagsInput","setTagsArray","useEffect","placeholder","DeleteEditCommentOnThread","globalMessageState","React","setOpenCreateComment","setOpenDeleteThread","setOpenUpdateThread","IconButton","isLoggedIn","setSeverityGlobalMessage","setGlobalMessage","handleOpenGlobalMessage","BodyAddHTML","toOverflow","body_array","ele","line","index","body_elipsis","noWrap","ThreadPost","Card","CardActionArea","style","padding","CardContent","username","Date","created_at","commentable","ThreadList","threads","isLoaded","width","textAlign","ThreadMainPost","CreateThread","openCreateThread","handleCloseCreateThread","SearchBar","setThreadResults","setOpenCreateThread","searchByTags","setSearchByTags","search","setSearch","results","setResults","mode","res","json","result","paddingTop","paddingBottom","position","top","zIndex","Paper","component","sx","display","InputBase","ml","flex","Divider","height","m","orientation","justifyItems","paddingLeft","threadID","Home","threadResults","setError","setIsLoaded","setThreads","onInit","typewriter","changeDelay","typeString","pauseFor","start","emptyThread","updated_at","comments","DeleteComment","openDeleteComment","handleCloseDeleteComment","comment","UpdateComment","openUpdateComment","handleCloseUpdateComment","DeleteEditOnComment","setOpenDeleteComment","setOpenUpdateComment","useStyles","makeStyles","commentBody","fontSize","whiteSpace","commentCard","marginBottom","metadata","CommentItem","classes","className","CommentList","ThreadView","setThread","ThreadPage","useParams","LogIn","openLogIn","handleCloseLogIn","setUsername","password","setPassword","DialogContentText","data","setCurrentUser","localStorage","setItem","token","CreateAccount","openCreateAccount","handleCloseCreateAccount","password_confirmation","setPassword_confirmation","trim","ChangePassword","openChangePassword","handleCloseChangePassword","newPassword","setNewPassword","newPasswordConfirmation","setNewPasswordConfirmation","AccountSettings","anchorElAccountSettings","openAccountSettings","handleCloseAccountSettings","setOpenLogIn","setOpenCreateAccount","setOpenChangePassword","Menu","anchorEl","MenuListProps","MenuItem","emptyCurrentUser","removeItem","NavBar","setAnchorElAccountSettings","Boolean","pages","pageName","Box","AppBar","Container","maxWidth","Toolbar","disableGutters","flexGrow","mr","textDecoration","marginRight","page","borderRadius","Tooltip","currentTarget","GlobalMessage","globalMessage","severityGlobalMessage","handleCloseGlobalMessage","openGlobalMessage","Snackbar","autoHideDuration","MyThreads","theme","createTheme","palette","primary","light","main","dark","contrastText","secondary","App","setOpenGlobalMessage","password_digest","getItem","Authorization","ThemeProvider","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2edbccf3.chunk.js","sourcesContent":["import React from 'react';\nimport { Grid, Chip, Typography } from '@material-ui/core';\nimport Avatar from '@mui/material/Avatar';\nimport moment from 'moment';\nimport Stack from '@mui/material/Stack';\n\ntype Props = {\n    tagged: boolean;\n    user: string;\n    time: Date;\n    tags: string;\n};\n\n// layout of user avatar, username, datae and time, and tags\nconst AvatarUserTimeTags: React.FC<Props> = ({ tagged, user, time, tags }: Props) => {\n\n    // if tags to be displayed (for threads)\n    if (tagged) {\n        // empty array if tags is empty (so that tags array will not display empty chip)\n        const tagsArray = tags === \"\" ? [] : tags.split(\",\");\n        return (\n            <Grid container>\n                <Grid item xs={6}>\n                    <Stack direction='row' spacing={2}>\n                        <Avatar/>\n                        <Stack direction='column'>\n                            <Typography align='left' variant='h5'>{ user }</Typography>\n                            <Typography align='left' variant='subtitle1' color='textSecondary'>{moment(time).fromNow()}</Typography>\n                        </Stack>\n                    </Stack>\n                </Grid>\n                <Grid item container xs={6} direction='row' spacing={1} justifyContent='flex-end' alignItems='flex-start'>\n                    { tagsArray.map(tag =>\n                        <Grid item key={tag}>\n                            <Chip label={tag} />\n                        </Grid>\n                    )}\n                </Grid>\n            </Grid>\n        );\n    }\n\n    // Without tags (for comments)\n    return (\n        <Grid container>\n            <Grid item xs={6}>\n                <Stack direction='row' spacing={2}>\n                    <Avatar/>\n                    <Stack direction='column'>\n                        <Typography align='left' variant='h5'>{ user }</Typography>\n                        <Typography align='left' variant='subtitle1' color='textSecondary'>{moment(time).fromNow()}</Typography>\n                    </Stack>\n                </Stack>\n            </Grid>\n            <Grid item xs={6}>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default AvatarUserTimeTags;","import Alert, { AlertColor } from '@mui/material/Alert';\n\nimport React from 'react';\n\ntype Props = {\n    severity: AlertColor | undefined;\n    message: string[];\n}\n\n// display success/error messages to user from array of messages (displayed in dialog pages, different from global messages)\nconst AlertUser: React.FC<Props> = ({severity, message}: Props) => {\n    return (\n        <>\n            { message.map(error =>\n                <Alert severity={severity}>{error}</Alert>)  \n            }\n        </>\n    );\n};\n\nexport default AlertUser;","import { Button, TextField, Dialog, DialogActions, DialogContent, \n    DialogTitle } from '@material-ui/core';\nimport AlertUser from '../AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\nimport CurrentUserState from '../../types/CurrentUserState';\n\nimport React, { useState } from 'react';\n\ntype Props = {\n    openCreateComment: boolean;\n    handleCloseCreateComment: () => void;\n    thread_page_id: number;\n    currentUserState: CurrentUserState;\n    API: string;\n}\n\n// create comment dialog page\nconst CreateComment: React.FC<Props> = ({API, openCreateComment, handleCloseCreateComment, thread_page_id, currentUserState}: Props) => {\n    const [body, setBody] = useState<string>(\"\");\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n\n    const resetCreateComment = () => {\n        setBody(\"\");\n    }\n    \n    // on clicking create button, post to backend\n    const handleSubmitCreateComment = () => {\n        const user_id = currentUserState.currentUser.id\n        // reset message array, before adding messages\n        let new_message: string[] = []; \n        // reject empty fields\n        if (body === \"\") {\n            new_message.push(\"Fill in all fields\");\n        }\n        if (new_message.length > 0) {\n            setSeverity('error');\n            setMessage(new_message);\n        } else {\n            fetch(API + \"/thread_pages/\" + thread_page_id.toString() + \"/comments\", {\n                method: 'POST',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                body: JSON.stringify({\n                    body,\n                    user_id,\n                    thread_page_id,\n                }),\n            })\n                .then((response) => {\n                    if (response.ok) {\n                        setSeverity('success');\n                        new_message.push(\"You have created a new comment!\")\n                        setMessage(new_message);\n                        // empty fields (prevent creation of duplicate comments) and refresh page\n                        resetCreateComment();\n                        setTimeout(() => window.location.reload(), 1000);\n                    } else {\n                        setSeverity('error');\n                        new_message.push(\"Some error occured\");\n                        setMessage(new_message);\n                    }\n                })\n                .catch((error) => console.log(error.message));\n        }\n    }\n\n    // dialog containing body text, and \"close\" and \"create comment\" buttons\n    return (\n        <Dialog open={openCreateComment} onClose={handleCloseCreateComment} fullWidth>\n            <DialogTitle>What's on your mind?</DialogTitle>\n            <DialogContent>\n                {/* display success/error messages */}\n                <AlertUser severity={severity} message={message}/>\n                <TextField\n                    value = {body}\n                    autoFocus\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Say something here...\"\n                    fullWidth\n                    variant=\"standard\"\n                    multiline\n                    onChange={(event) => setBody(event.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseCreateComment}>Cancel</Button>\n                <Button onClick={handleSubmitCreateComment}>Comment</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default CreateComment;","import { Button, Dialog, DialogActions, DialogContent, \n    DialogTitle } from '@material-ui/core';\nimport AlertUser from '../AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\n\nimport React, { useState } from 'react';\n\ntype Props = {\n    openDeleteThread: boolean;\n    handleCloseDeleteThread: () => void;\n    thread_page_id: number;\n    API: string;\n}\n\n// Delete thread dialog page\nconst DeleteThread: React.FC<Props> = ({API, openDeleteThread, handleCloseDeleteThread, thread_page_id}: Props) => {\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n    \n    // On clicking submit button, delete thread in backend\n    const handleSubmitDeleteThread = () => {\n        let new_message: string[] = [];\n        fetch(API + \"/thread_pages/\" + thread_page_id.toString(), {\n            method: 'DELETE',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                },\n        })\n            .then((response) => {\n                if (response.ok) {\n                    setSeverity('success');\n                    new_message.push(\"You have deleted thread!\")\n                    setMessage(new_message);\n                    const url = window.location.href;\n\n                    // If page before opening dialog was individual threads page (ThreadView page), return to home, since thread deleted\n                    // Else, return to page user was on\n                    setTimeout(url.startsWith(window.location.protocol + \"//\" + window.location.host + \"/thread\")\n                        ? () => window.location.replace(window.location.protocol + \"//\" + window.location.host)\n                        : () => window.location.reload(), 1000);\n                } else {\n                    setSeverity('error');\n                    new_message.push(\"Some error occured\");\n                    setMessage(new_message);\n                }\n            })\n            .catch((error) => console.log(error.message));\n    }\n\n    // Dialog page contains \"cancel\" and \"delete thread\" buttons\n    return (\n        <Dialog open={openDeleteThread} onClose={handleCloseDeleteThread} fullWidth>\n            <DialogTitle>Are you sure you want to delete this thread?</DialogTitle>\n            {/* Display success / error messages */}\n            <DialogContent>\n                <AlertUser severity={severity} message={message}/>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseDeleteThread}>Cancel</Button>\n                <Button onClick={handleSubmitDeleteThread}>Delete Thread</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default DeleteThread;","const strToArray = (str: string) => {\n    return str.replace(/\\s/g, \"\").toLowerCase().split(\"#\").filter(tag => tag !== \"\");\n}\n\nconst arrayStrToStr = (arrayStr: string) => {\n    return \"#\" + arrayStr.split(\",\").join(\"#\");\n}\n\nexport { strToArray, arrayStrToStr };","import { Button, TextField, Dialog, DialogActions, DialogContent, \n    DialogTitle, Grid, Chip } from '@material-ui/core';\nimport AlertUser from '../AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\nimport { strToArray, arrayStrToStr } from '../../actions/actions';\nimport { Thread } from '../../types/Thread';\n\nimport React, { useState, useEffect } from 'react';\n\ntype Props = {\n    openUpdateThread: boolean;\n    handleCloseUpdateThread: () => void;\n    thread: Thread;\n    API: string;\n}\n\n// Edit thread dialog (must be creator of thread and logged in)\nconst UpdateThread: React.FC<Props> = ({API, openUpdateThread, handleCloseUpdateThread, thread}: Props) => {\n    const [title, setTitle] = useState<string>(thread.title);\n    const [body, setBody] = useState<string>(thread.body);\n    const [tagsInput, setTagsInput] = useState<string>(arrayStrToStr(thread.tags)); // tags string directly from user input\n    const [tagsArray, setTagsArray] = useState<string[]>([]); // tags parsed into arrays\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n\n    const resetUpdateThread = () => {\n        setTitle(\"\");\n        setBody(\"\");\n        setTagsInput(\"\");\n    }\n\n    // whenver tagsInput string changed by user, update tagsArray\n    useEffect(() => {\n        setTagsArray(strToArray(tagsInput));\n    }, [tagsInput]);\n\n    // On clicking submit button, patch changes to backend\n    const handleSubmitUpdateThread = () => {\n\n        // empty message array, before adding error/success messages\n        let new_message: string[] = [];\n\n        // array as string equivalent in backend\n        const tags = tagsArray.toString(); \n\n        // check that all fields are not empty\n        if (title === \"\" || body === \"\") {\n            new_message.push(\"Fill in all fields\");\n        }\n        if (new_message.length > 0) {\n            setSeverity('error');\n            setMessage(new_message);\n        } else {\n            fetch(API + \"/thread_pages/\" + thread.id, {\n                method: 'PATCH',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                body: JSON.stringify({\n                    title,\n                    body,\n                    tags,\n                }),\n            })\n                .then((response) => {\n                    if (response.ok) {\n                        setSeverity('success');\n                        new_message.push(\"Changes saved!\")\n                        setMessage(new_message);\n\n                        // Empty all fields (prevent resubmission) and refresh page\n                        resetUpdateThread();\n                        setTimeout(() => window.location.reload(), 1000);\n                    } else {\n                        setSeverity('error');\n                        new_message.push(\"Some error occured\");\n                        setMessage(new_message);\n                    }\n                })\n                .catch((error) => console.log(error.message));\n        }\n    }\n\n    // Dialog page contains \"title\" and \"body\" text fields, and \"close\" and \"edit thread\" (submit changes) buttons\n    return (\n        <Dialog open={openUpdateThread} onClose={handleCloseUpdateThread} fullWidth>\n            <DialogTitle>What's on your mind?</DialogTitle>\n            <DialogContent>\n                {/* Display success/error messages */}\n                <AlertUser severity={severity} message={message}/>\n                <TextField\n                    value={title}\n                    autoFocus\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Title\"\n                    fullWidth\n                    variant=\"standard\"\n                    onChange={event => setTitle(event.target.value)}\n                />\n                {/* textfield that accepts tags input */}\n                <TextField\n                    value={tagsInput}\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Tags\"\n                    fullWidth\n                    placeholder='#HawkerFood #Travel #School'\n                    variant=\"standard\"\n                    onChange={event => setTagsInput(event.target.value)}\n                />\n                {/* display tags for user to view how tags will look like on thread */}\n                <Grid container direction='row' spacing={1} justifyContent='flex-start' alignItems='flex-start'>\n                    { tagsArray.length > 0 && tagsArray.map(tag =>\n                        <Grid item>\n                            <Chip label={tag}/>\n                        </Grid>\n                    )}\n                </Grid>\n                <TextField\n                    value={body}\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Say something here...\"\n                    fullWidth\n                    variant=\"standard\"\n                    multiline\n                    onChange={event => setBody(event.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseUpdateThread}>Cancel</Button>\n                <Button onClick={handleSubmitUpdateThread}>Edit Thread</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default UpdateThread;","import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport Stack from '@mui/material/Stack';\nimport CommentIcon from '@mui/icons-material/Comment';\nimport CreateComment from '../comment/CreateComment';\nimport DeleteThread from './DeleteThread';\nimport UpdateThread from './UpdateThread';\nimport CurrentUserState from '../../types/CurrentUserState';\nimport {Thread} from '../../types/Thread';\nimport GlobalMessageState from '../../types/GlobalMessageState';\n\ntype Props = {\n    commentable: boolean;\n    thread: Thread;\n    currentUserState: CurrentUserState;\n    API: string;\n    globalMessageState: GlobalMessageState;\n};\n\n// row of delete, edit and comment buttons on thread card\nconst DeleteEditCommentOnThread: React.FC<Props> = ({ API, currentUserState, thread, globalMessageState }: Props) => {\n\n    // toggle open/close \"create comment\" dialog page\n    // allow user to create comment only if logged in (user info required)\n    const [openCreateComment, setOpenCreateComment] = React.useState<boolean>(false);\n    const handleClickOpenCreateComment = () => {\n      if (currentUserState.isLoggedIn) {\n        setOpenCreateComment(true);\n      } else {\n        globalMessageState.setSeverityGlobalMessage(\"error\");\n        globalMessageState.setGlobalMessage([\"Please login to comment\"]);\n        globalMessageState.handleOpenGlobalMessage();\n      }\n    };\n    const handleCloseCreateComment = () => {\n      setOpenCreateComment(false);\n    };\n\n    // toggle open/close \"delete thread\" dialog page\n    const [openDeleteThread, setOpenDeleteThread] = React.useState<boolean>(false);\n    const handleClickOpenDeleteThread = () => {\n      setOpenDeleteThread(true);\n    };\n    const handleCloseDeleteThread = () => {\n      setOpenDeleteThread(false);\n    };\n\n    // toggle open/close \"update/edit thread\" dialog pagae\n    const [openUpdateThread, setOpenUpdateThread] = React.useState<boolean>(false);\n    const handleClickOpenUpdateThread = () => {\n      setOpenUpdateThread(true);\n    };\n    const handleCloseUpdateThread = () => {\n      setOpenUpdateThread(false);\n    };\n    \n    // open \"create comment\" / \"update thread\" / \"delete thread\" dialog pages on clicking respectively buttons\n    // display \"update thread\" and \"delete thread\" buttons only for creators that are logged in\n    return (\n        <Stack direction=\"row\" justifyContent='flex-end' alignItems=\"center\" spacing={1}>\n            <IconButton onClick={handleClickOpenCreateComment}>\n                <CommentIcon />\n            </IconButton>\n            <CreateComment API={API} thread_page_id={thread.id} openCreateComment={openCreateComment} handleCloseCreateComment={handleCloseCreateComment} currentUserState={currentUserState}/>\n            { thread.user_id === currentUserState.currentUser.id &&\n              <>\n                <IconButton onClick={handleClickOpenUpdateThread}>\n                  <EditIcon />\n                </IconButton>\n                <UpdateThread API={API} thread={thread} openUpdateThread={openUpdateThread} handleCloseUpdateThread={handleCloseUpdateThread} />\n              </>\n            }\n            { thread.user_id === currentUserState.currentUser.id &&\n              <>\n                <IconButton onClick={handleClickOpenDeleteThread}>\n                  <DeleteIcon />\n                </IconButton>\n                <DeleteThread API={API} thread_page_id={thread.id} openDeleteThread={openDeleteThread} handleCloseDeleteThread={handleCloseDeleteThread} />\n              </>\n            }\n        </Stack>\n    );\n};\n\nexport default DeleteEditCommentOnThread;","import { Typography } from '@material-ui/core';\nimport Stack from '@mui/material/Stack';\n\nimport React from 'react';\n\ntype Props = {\n    toOverflow: boolean;\n    body: string;\n}\n\nconst BodyAddHTML: React.FC<Props> = ({ body, toOverflow }: Props) => {\n    \n    // parse body string obtained from backend, and convert into array of tags string, with \"next line\" property handled\n    const body_array: string[] = body.split('\\n').filter(ele => ele !== \"\");\n\n    // if text to be fully displayed (threads in individual ThreadView page)\n    if (!toOverflow) {\n        return (\n            <Stack direction='column' spacing={0}>\n                { body_array.map((line, index) => (\n                    <div key={index}>\n                        <Typography align='left' variant=\"body1\">\n                            {line}\n                        </Typography>\n                        <br />\n                    </div>\n                ))}\n            </Stack>\n        );\n    }\n\n    // if text-overflow: \"...\" to summarize text and keep text short (threads list view eg. homepage and mythreads page)\n    const body_elipsis = body_array.join('...');\n    return (\n        <Typography noWrap={toOverflow} align='left' variant=\"body1\">\n            {body_elipsis}\n        </Typography>\n    );\n};\n\nexport default BodyAddHTML;","import React from 'react';\nimport { Card, CardContent, Typography, CardActionArea } from '@material-ui/core';\nimport Stack from '@mui/material/Stack';\nimport AvatarUserTimeTags from '../AvatarUserTimeTags';\nimport DeleteEditCommentOnThread from './DeleteEditCommentOnThread';\nimport { Thread } from '../../types/Thread';\nimport BodyAddHTML from '../BodyAddHTML';\nimport CurrentUserState from '../../types/CurrentUserState';\nimport GlobalMessageState from '../../types/GlobalMessageState';\n\ntype Props = {\n    toOverflow: boolean;\n    thread: Thread;\n    currentUserState: CurrentUserState;\n    API: string;\n    globalMessageState: GlobalMessageState;\n}\n\n// display individual thread: title, body, user, tags, and button icons to edit, delete or comment\nconst ThreadPost: React.FC<Props> = ( {API, toOverflow, thread, currentUserState, globalMessageState}: Props) => {\n    return (\n        // Clickable title: redirect to individual thread page (expecially on home page, where threads have text-oveflow and comments are hidden)\n        <Card>\n            <CardActionArea style={{ padding: '20px' }} href={'/thread/' + thread.id}>\n                <Typography variant='h4' align='left'>\n                    {thread.title}\n                </Typography>\n            </CardActionArea>\n            <CardContent>\n                <Stack direction='column' spacing={3}>\n                    {/* Section of thread displaying creator, date and time, and tags */}\n                    <AvatarUserTimeTags tagged={true} user={thread.user.username} time={new Date(thread.created_at)} tags={thread.tags}/>\n                    {/* Body text with html properties handled */}\n                    <BodyAddHTML body={thread.body} toOverflow={toOverflow} />\n                    {/* Button icons for deleting, editing and commenting */}\n                    <DeleteEditCommentOnThread globalMessageState={globalMessageState} API={API} commentable={true} thread={thread} currentUserState={currentUserState}/>\n                </Stack>\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default ThreadPost;","import '../../App.css';\nimport ThreadMainPost from './ThreadMainPost';\nimport Stack from '@mui/material/Stack';\nimport { Thread } from '../../types/Thread';\nimport CurrentUserState from '../../types/CurrentUserState';\nimport GlobalMessageState from '../../types/GlobalMessageState';\n\nimport React from 'react';\n\ntype Props = {\n    threads: Thread[];\n    currentUserState: CurrentUserState;\n    error: any;\n    isLoaded: boolean;\n    API: string;\n    globalMessageState: GlobalMessageState;\n}\n\n// Display sequence of threads (overflowed body-text)\nconst ThreadList: React.FC<Props> = ({ API, threads, error, isLoaded, currentUserState, globalMessageState }: Props) => {\n\n    // Display \"loading\" until response received, then display error or threads\n    if (error) {\n        return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div>Loading...</div>;\n    } else {\n        return (\n            <div style={{ width: '50vw', margin: 'auto', textAlign: 'center' }}>\n                <Stack spacing={2}>\n                    { threads.map(thread => (\n                        // List of threads: title, body, user, tags, and button icons to edit, delete or comment\n                        <ThreadMainPost globalMessageState={globalMessageState} API={API} toOverflow={true} thread={thread} key={thread.id} currentUserState={currentUserState}/>\n                    ))}\n                </Stack>\n            </div>\n        );\n    }\n};\n\nexport default ThreadList;\n","import { Button, TextField, Dialog, DialogActions, DialogContent, \n    DialogTitle, Grid, Chip} from '@material-ui/core';\nimport AlertUser from '../AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\nimport { strToArray } from '../../actions/actions';\nimport CurrentUserState from '../../types/CurrentUserState';\n\nimport React, { useState, useEffect } from 'react';\n\ntype Props = {\n    openCreateThread: boolean;\n    handleCloseCreateThread: () => void;\n    currentUserState: CurrentUserState;\n    API: string;\n}\n\n// create thread dialog page\nconst CreateThread: React.FC<Props> = ({API, openCreateThread, handleCloseCreateThread, currentUserState }: Props) => {\n    const [title, setTitle] = useState<string>(\"\");\n    const [body, setBody] = useState<string>(\"\");\n    const [tagsInput, setTagsInput] = useState<string>(\"#\"); // tags string directly from user input\n    const [tagsArray, setTagsArray] = useState<string[]>([]); // tags parsed into arrays\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n\n    const resetCreateThread = () => {\n        setTitle(\"\");\n        setBody(\"\");\n        setTagsInput(\"\");\n    }\n\n    // whenver tagsInput string changed by user, update tagsArray\n    useEffect(() => {\n        setTagsArray(strToArray(tagsInput));\n    }, [tagsInput]);\n\n    // on clicking create button, post to backend\n    const handleSubmitCreateThread = () => {\n        const user_id = currentUserState.currentUser.id;\n        // array as string equivalent in backend\n        const tags = tagsArray.toString(); \n        // reset messages array, before adding error/success messages\n        let new_message: string[] = []; \n        // reject empty fields (except tags)\n        if (title === \"\" || body === \"\") { \n            new_message.push(\"Fill in all fields\");\n        }\n        if (new_message.length > 0) {\n            setSeverity('error');\n            setMessage(new_message);\n        } else {\n            fetch(API + \"/thread_pages\", {\n                method: 'POST',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    title,\n                    body,\n                    user_id,\n                    tags,\n                }),\n            })\n                .then((response) => {\n                    if (response.ok) {\n                        setSeverity('success');\n                        new_message.push(\"You have created a new thread!\")\n                        setMessage(new_message);\n                        // empty fields (prevent duplicate creatiion) and refresh page\n                        resetCreateThread();\n                        setTimeout(() => window.location.reload(), 1000);\n                    } else {\n                        setSeverity('error');\n                        new_message.push(\"Some error occured\");\n                        setMessage(new_message);\n                    }\n                })\n                .catch((error) => console.log(error.message));\n        }\n    }\n    \n    // dialog contains title, tags and body text fields, and \"cancel\" and \"create thread\" buttons\n    return (\n        <Dialog open={openCreateThread} onClose={handleCloseCreateThread} fullWidth>\n            <DialogTitle>What's on your mind?</DialogTitle>\n            <DialogContent>\n                {/* display success/error messages */}\n                <AlertUser severity={severity} message={message}/>\n                <TextField\n                    value={title}\n                    autoFocus\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Title\"\n                    fullWidth\n                    variant=\"standard\"\n                    onChange={event => setTitle(event.target.value)}\n                />\n                {/* textfield that accepts tags input */}\n                <TextField\n                    value={tagsInput}\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Tags\"\n                    fullWidth\n                    placeholder='#HawkerFood #Travel #School'\n                    variant=\"standard\"\n                    onChange={event => setTagsInput(event.target.value)}\n                />\n                {/* display tags for user to view how tags will look like on thread */}\n                <Grid container direction='row' spacing={1} justifyContent='flex-start' alignItems='flex-start'>\n                    { tagsArray.length > 0 && tagsArray.map(tag =>\n                        <Grid item>\n                            <Chip label={tag}/>\n                        </Grid>\n                    )}\n                </Grid>\n                <TextField\n                    value={body}\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Say something here...\"\n                    fullWidth\n                    variant=\"standard\"\n                    multiline\n                    onChange={event => setBody(event.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseCreateThread}>Cancel</Button>\n                <Button onClick={handleSubmitCreateThread}>Create Thread</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default CreateThread;","import React, { useEffect, useState } from 'react';\nimport Paper from '@mui/material/Paper';\nimport InputBase from '@mui/material/InputBase';\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport SearchIcon from '@mui/icons-material/Search';\nimport LibraryAddIcon from '@mui/icons-material/LibraryAdd';\nimport CreateThread from './thread/CreateThread';\nimport ThreadSearch from '../types/ThreadSearch';\nimport { Typography, CardActionArea } from '@material-ui/core';\nimport Stack from '@mui/material/Stack';\nimport TagIcon from '@mui/icons-material/Tag';\nimport { strToArray } from '../actions/actions';\nimport { Thread } from '../types/Thread';\nimport CurrentUserState from '../types/CurrentUserState';\nimport GlobalMessageState from '../types/GlobalMessageState';\n\ntype Props = {\n    setThreadResults: React.Dispatch<React.SetStateAction<Thread[]>>;\n    currentUserState: CurrentUserState;\n    API: string;\n    globalMessageState: GlobalMessageState;\n}\n\n// Searchbar: search by both title and tags\nconst SearchBar: React.FC<Props> = ({setThreadResults, currentUserState, API, globalMessageState}: Props) => {\n    const handleRedirectToThreadPage = (threadID: number) => {\n        window.location.replace(\n            window.location.protocol + \"//\" + window.location.host + '/thread/' + threadID.toString()\n        );\n    }\n\n    // toggle close/open create thread dialog page\n    const [openCreateThread, setOpenCreateThread] = React.useState<boolean>(false);\n    const handleClickOpenCreateThread = () => {\n        // only allow logged in users to create thread\n        if (currentUserState.isLoggedIn) {\n            setOpenCreateThread(true);\n        } else {\n            globalMessageState.setSeverityGlobalMessage(\"error\");\n            globalMessageState.setGlobalMessage([\"Please login to create thread\"]);\n            globalMessageState.handleOpenGlobalMessage();\n        }\n    };\n    const handleCloseCreateThread = () => {\n      setOpenCreateThread(false);\n    };\n\n    const [searchByTags, setSearchByTags] = useState<Boolean>(false);\n    const [search, setSearch] = useState<string>(\"\");\n    const [results, setResults] = useState<ThreadSearch[]>([]);\n\n    // On clicking search button, POST to backend and set list of threads to search results\n    // Toggle: search by tags pr search by title\n    const handleClickSearch = () => {\n        if (search === \"\") {\n            return;\n        } else if (searchByTags) {\n            const tagsArray = strToArray(search);\n            fetch(API + \"/thread_pages/search/tags\", {\n                method: 'POST',\n                mode: 'cors',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    tagsArray,\n                }),\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setThreadResults(result);\n                    }\n                )\n        } else {\n            const title = search;\n            fetch(API + \"/thread_pages/search/title\", {\n                method: 'POST',\n                mode: 'cors',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    title,\n                }),\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setThreadResults(result);\n                    }\n                )\n        }\n    }\n\n    // On change in search bar, post to backend, update results in dropdown menu\n    // Toggle: dropdown displays tags or titles\n    useEffect(() => {\n        if (search === \"\") {\n            setResults([]);\n        }\n        else if (searchByTags) {\n            const tagsArray = strToArray(search);\n            console.log(tagsArray);\n            fetch(API + \"/thread_pages/search/tags/autocomplete\", {\n                method: 'POST',\n                mode: 'cors',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    tagsArray,\n                }),\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setResults(result);\n                    }\n                )\n        } else {\n            const title = search;\n            fetch(API + \"/thread_pages/search/title/autocomplete\", {\n                method: 'POST',\n                mode: 'cors',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    title,\n                }),\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setResults(result);\n                    }\n                )\n        }\n    }, [search, searchByTags, API]);\n\n    return (\n        <div style={{paddingTop: '20px', paddingBottom: '20px', position: 'sticky', top: '50px', zIndex: '1100'}}>\n            <Paper\n            component=\"form\" \n            sx={{ display: 'flex', alignItems: 'center' }}\n            >\n                {/* Search input area: let's user know if in tags or title mode using placeholders */}\n                <InputBase\n                    sx={{ ml: 1, flex: 1 }}\n                    placeholder={\n                        searchByTags ? \"Search by Tags: #HawkerFood #Travel # School\" : \"Search by Title\"}\n                    value={search}\n                    onChange={event => setSearch(event.target.value)}\n                />\n                {/* Search and refresh threads list in home page to display new search results */}\n                <IconButton onClick={handleClickSearch}>\n                    <SearchIcon />\n                </IconButton>\n                {/* Toggle \"search by tags\" button (search by tags when on, search by title when off) */}\n                <IconButton onClick={() => setSearchByTags(!searchByTags)}>\n                    <TagIcon color={searchByTags ? 'primary' : \"disabled\"}/>\n                </IconButton>\n                <Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" />\n                {/* Create thread icon: opens create thread dialog page */}\n                <IconButton onClick={handleClickOpenCreateThread}>\n                    <LibraryAddIcon />\n                </IconButton>\n                <CreateThread API={API} openCreateThread={openCreateThread} handleCloseCreateThread={handleCloseCreateThread} currentUserState={currentUserState}/>\n            </Paper>\n            {/* Dropdown menu containing tags or titles based on user inputin search bar */}\n            { results.length > 0 &&\n                <Paper sx={{justifyItems: \"flex-start\"}}>\n                    <Stack direction=\"column\" alignItems=\"flex-start\">\n                        { results.map(result =>\n                                <CardActionArea style={{paddingTop: 3, paddingBottom: 3, paddingLeft: 8}} \n                                    onClick={() => handleRedirectToThreadPage(result.id)}\n                                >\n                                    <Typography key={result.id} align=\"left\">{result.title}</Typography>\n                                </CardActionArea>\n                        )}\n                    </Stack>\n                </Paper>\n            }\n        </div>\n    );\n};\n\nexport default SearchBar;","import ThreadList from '../components/thread/ThreadList';\nimport { Typography } from '@material-ui/core';\nimport Typewriter from 'typewriter-effect';\nimport SearchBar from '../components/SearchBar';\nimport { Thread } from '../types/Thread';\nimport CurrentUserState from '../types/CurrentUserState';\nimport GlobalMessageState from '../types/GlobalMessageState';\n\nimport React, {useState, useEffect} from 'react';\n\ntype Props = {\n    currentUserState: CurrentUserState;\n    API: string;\n    globalMessageState: GlobalMessageState;\n}\n\n// Root path directs to homepage\nconst Home: React.FC<Props> = ( {currentUserState, API, globalMessageState}: Props) => {\n    const [threadResults, setThreadResults] = useState<Thread[]>([]);\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [threads, setThreads] = useState<Thread[]>(threadResults);\n\n    // get json of latest threads from server\n    useEffect(() => {\n        if (threadResults.length > 0) {\n            setIsLoaded(true);\n            setThreads(threadResults);\n        } else {\n            fetch(API + \"/thread_pages\", {\n                method: 'GET',\n                mode: 'cors'\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setIsLoaded(true);\n                        setThreads(result);\n                    },\n                    (error) => {\n                        setIsLoaded(true);\n                        setError(error);\n                    }\n                )\n        }\n    }, [threadResults, API]);\n\n    return (\n        <div style={{ width: '50vw', margin: 'auto', textAlign: 'center'}}>\n\n            {/* ChitChat animiation */}\n            <Typography variant='h3' style={{ paddingTop: '70px'}}>\n                <Typewriter\n                    onInit={(typewriter) => {\n                        typewriter\n                            .changeDelay(80)\n                            .typeString(\"ChitChat\")\n                            .pauseFor(1000)\n                            .start();\n                    }}\n                /> \n            </Typography>\n\n            {/* Search Bar: search by tags or title */}\n            <SearchBar setThreadResults={setThreadResults} currentUserState={currentUserState} API={API}\n                globalMessageState={globalMessageState}/>\n\n            {/* List of threads, starting from latest */}\n            <ThreadList globalMessageState={globalMessageState} API={API} threads={threads} currentUserState={currentUserState}\n                error={error} isLoaded={isLoaded}/>\n        </div>\n    );\n};\n\nexport default Home;","import Comment from './Comment';\nimport User from './User';\n\ntype Thread = {\n    id: number;\n    title: string;\n    body: string;\n    user_id: number;\n    tags: string;\n    created_at: string;\n    updated_at: string;\n    comments: Comment[];\n    user: User;\n};\n\nconst emptyThread: Thread = {\n    id: 0,\n    title: '',\n    body: '',\n    user_id: 0,\n    tags: \"\",\n    created_at: '',\n    updated_at: '',\n    comments: [],\n    user: {\n        username: '',\n    },\n}\n\nexport { type Thread, emptyThread };","import { Button, Dialog, DialogActions, DialogContent, \n    DialogTitle } from '@material-ui/core';\nimport AlertUser from '../AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\nimport Comment from '../../types/Comment';\n\nimport React, { useState } from 'react';\n\ntype Props = {\n    openDeleteComment: boolean;\n    handleCloseDeleteComment: () => void;\n    comment: Comment;\n    API: string;\n}\n\n// Delete comment dialog page\nconst DeleteComment: React.FC<Props> = ({API, openDeleteComment, handleCloseDeleteComment, comment}: Props) => {\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n    \n    // on clicking delete comment button, delete in backend\n    const handleSubmitDeleteComment = () => {\n        let new_message: string[] = [];\n        fetch(API + \"/thread_pages/\" + comment.thread_page_id.toString() + \"/comments/\" + comment.id.toString(), {\n            method: 'DELETE',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                },\n        })\n            .then((response) => {\n                if (response.ok) {\n                    setSeverity('success');\n                    new_message.push(\"You have deleted comment!\")\n                    setMessage(new_message);\n\n                    // reload page after short delay (prevent user from deleting comment again)\n                    setTimeout(() => window.location.reload(), 1000);\n                } else {\n                    setSeverity('error');\n                    new_message.push(\"Some error occured\");\n                    setMessage(new_message);\n                }\n            })\n            .catch((error) => console.log(error.message));\n    }\n\n    // dialog contains \"cancel\" and \"delete comment\" buttons\n    return (\n        <Dialog open={openDeleteComment} onClose={handleCloseDeleteComment} fullWidth>\n            <DialogTitle>Are you sure you want to delete this comment?</DialogTitle>\n            <DialogContent>\n                {/* display success/error messages */}\n                <AlertUser severity={severity} message={message}/>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseDeleteComment}>Cancel</Button>\n                <Button onClick={handleSubmitDeleteComment}>Delete Comment</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default DeleteComment;","import { Button, TextField, Dialog, DialogActions, DialogContent, \n    DialogTitle} from '@material-ui/core';\nimport AlertUser from '../AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\nimport Comment from '../../types/Comment';\n\nimport React, { useState } from 'react';\n\ntype Props = {\n    openUpdateComment: boolean;\n    handleCloseUpdateComment: () => void;\n    comment: Comment;\n    API: string;\n}\n\n// Edit comment dialog (visible by creator and when creator is logged in)\nconst UpdateComment: React.FC<Props> = ({API, openUpdateComment, handleCloseUpdateComment, comment}: Props) => {\n    const [body, setBody] = useState<string>(comment.body);\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n    \n    const resetUpdateComment = () => {\n        setBody(\"\");\n    }\n\n    // On clicking \"edit comment\" button, patch changes to backend\n    const handleSubmitUpdateComment = () => {\n\n        // Empty message array, before adding error/success messages\n        let new_message: string[] = [];\n\n        // Reject empty fields\n        if (body === \"\") {\n            new_message.push(\"Fill in all fields\");\n        }\n        if (new_message.length > 0) {\n            setSeverity('error');\n            setMessage(new_message);\n        } else {\n            fetch(API + \"/thread_pages/\" + comment.thread_page_id + \"/comments/\" + comment.id, {\n                method: 'PATCH',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                body: JSON.stringify({\n                    body,\n                }),\n            })\n                .then((response) => {\n                    if (response.ok) {\n                        setSeverity('success');\n                        new_message.push(\"Changes saved!\")\n                        setMessage(new_message);\n\n                        // Empty all fields (prevent resubmissions) and refresh page\n                        resetUpdateComment();\n                        setTimeout(() => window.location.reload(), 1000);\n                    } else {\n                        setSeverity('error');\n                        new_message.push(\"Some error occured\");\n                        setMessage(new_message);\n                    }\n                })\n                .catch((error) => console.log(error.message));\n        }\n    }\n\n    // Dialog page contains \"body\" text field, and \"cancel\" and \"edit comment\" (submit changes) buttons\n    return (\n        <Dialog open={openUpdateComment} onClose={handleCloseUpdateComment} fullWidth>\n            <DialogTitle>What's on your mind?</DialogTitle>\n            <DialogContent>\n                {/* Display success/error messages */}\n                <AlertUser severity={severity} message={message}/>\n                <TextField\n                    value={body}\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Say something here...\"\n                    fullWidth\n                    variant=\"standard\"\n                    multiline\n                    onChange={event => setBody(event.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseUpdateComment}>Cancel</Button>\n                <Button onClick={handleSubmitUpdateComment}>Save Changes</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default UpdateComment;","import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport Stack from '@mui/material/Stack';\nimport DeleteComment from './DeleteComment';\nimport Comment from '../../types/Comment';\nimport UpdateComment from './UpdateComment';\nimport CurrentUserState from '../../types/CurrentUserState';\n\ntype Props = {\n    comment: Comment;\n    currentUserState: CurrentUserState;\n    API: string;\n}\n\n// Row of delete and edit buttons on comment card\nconst DeleteEditOnComment: React.FC<Props> = ({API, comment, currentUserState}: Props) => {\n\n    // toggle delete dialog page\n    const [openDeleteComment, setOpenDeleteComment] = React.useState<boolean>(false);\n    const handleClickOpenDeleteComment = () => {\n      setOpenDeleteComment(true);\n    };\n    const handleCloseDeleteComment = () => {\n      setOpenDeleteComment(false);\n    };\n\n    // toggle update / edit commetn page\n    const [openUpdateComment, setOpenUpdateComment] = React.useState<boolean>(false);\n    const handleClickOpenUpdateComment = () => {\n      setOpenUpdateComment(true);\n    };\n    const handleCloseUpdateComment = () => {\n      setOpenUpdateComment(false);\n    };\n    \n    // display edit and comment buttons only for creators that are logged in\n    // open edit/delete dialog pages on clicking edit/delete buttons respectively\n    return (\n        <Stack direction=\"row\" justifyContent='flex-end' alignItems=\"center\" spacing={1}>\n          { comment.user_id === currentUserState.currentUser.id &&\n            <>\n              <IconButton onClick={handleClickOpenUpdateComment}>\n                  <EditIcon />\n              </IconButton>\n              <UpdateComment API={API} comment={comment} openUpdateComment={openUpdateComment} handleCloseUpdateComment={handleCloseUpdateComment} />\n            </>\n          }\n          { comment.user_id === currentUserState.currentUser.id &&\n            <>\n              <IconButton onClick={handleClickOpenDeleteComment}>\n                <DeleteIcon />\n              </IconButton>\n              <DeleteComment API={API} comment={comment} openDeleteComment={openDeleteComment} handleCloseDeleteComment={handleCloseDeleteComment} />\n            </>\n          }\n        </Stack>\n    );\n};\n\nexport default DeleteEditOnComment;","import Comment from '../../types/Comment';\nimport React from 'react';\nimport { Card, CardContent, makeStyles } from '@material-ui/core';\nimport Stack from '@mui/material/Stack';\nimport AvatarUserTimeTags from '../AvatarUserTimeTags';\nimport DeleteEditOnComment from './DeleteEditOnComment';\nimport BodyAddHTML from '../BodyAddHTML';\nimport CurrentUserState from '../../types/CurrentUserState';\n\ntype Props = {\n    comment: Comment;\n    currentUserState: CurrentUserState;\n    API: string;\n};\n\nconst useStyles = makeStyles({\n    commentBody: {\n        fontSize: 16,\n        whiteSpace: 'pre-wrap',\n        paddingBottom: '1em',\n    },\n    commentCard: {\n        marginBottom: '1em',\n    },\n    metadata: {\n        fontSize: 14,\n    },\n});\n\n// comment card\nconst CommentItem: React.FC<Props> = ({ API, comment, currentUserState }: Props) => {\n    const classes = useStyles();\n        return (\n            <Card className={classes.commentCard}>\n                <CardContent>\n                    <Stack direction='column' spacing={3}>\n                        {/* user, date and time (tags disabled for comments, since only threads have tags, but both use the same abstracted element) */}\n                        <AvatarUserTimeTags tagged={false} user={comment.user.username} time={new Date(comment.created_at)} tags={\"\"}/>\n                        {/* body text with html properties handled by a parser */}\n                        <BodyAddHTML body={comment.body} toOverflow={false}/>\n                        {/* delete and edit buttons: clickable only for creators that are logged in */}\n                        <DeleteEditOnComment API={API} comment={comment} currentUserState={currentUserState}/>\n                    </Stack>\n                </CardContent>\n            </Card>\n        );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport Comment from '../../types/Comment';\nimport CurrentUserState from '../../types/CurrentUserState';\n\nimport React from 'react';\n\ntype Props = {\n    comments: Comment[];\n    currentUserState: CurrentUserState;\n    API: string;\n}\n\n// series of comments: each comment is a card displaying body text, edit and delete buttons, user and date and time\nconst CommentList: React.FC<Props> = ({API, comments, currentUserState}: Props) => {\n    return (\n        <ul>\n            {comments.map(comment => (\n                <CommentItem API={API} comment={comment} key={comment.id} currentUserState={currentUserState}/>\n            ))}\n        </ul>\n    );\n};\n\nexport default CommentList;\n","import { Thread, emptyThread } from '../../types/Thread';\nimport ThreadMainPost from './ThreadMainPost';\nimport CommentList from '../comment/CommentList';\nimport CurrentUserState from '../../types/CurrentUserState';\nimport GlobalMessageState from '../../types/GlobalMessageState';\n\nimport React, { useEffect, useState } from 'react';\n\ntype Props = {\n    threadID: string | undefined;\n    currentUserState: CurrentUserState;\n    API: string,\n    globalMessageState: GlobalMessageState;\n}\n\n// Page displaying individual thread and associated comments\nconst ThreadView: React.FC<Props> = ({threadID, currentUserState, API, globalMessageState}: Props) => {\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [thread, setThread] = useState<Thread>(emptyThread);\n\n    // Fetch thread and associated comments when page loaded\n    useEffect(() => {\n        fetch(API + \"/thread_pages/\" + threadID, {\n            method: 'GET',\n            mode: 'cors'\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setThread(result);\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            )\n    }, [threadID, API])\n    \n    // Display \"loading\" until response from backend, then display error or threads and comments\n    if (error) {\n        return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div>Loading...</div>;\n    } else {\n        return (\n            <>\n                {/* Individual thread: title, body, user, tags, and button icons to edit, delete or comment */}\n                <ThreadMainPost globalMessageState={globalMessageState} API={API} toOverflow={false} thread={thread} key={thread.id} currentUserState={currentUserState}/>\n                {/* all associated comments */}\n                <CommentList API={API} comments={thread.comments} currentUserState={currentUserState}/>\n            </>\n        );\n    }\n};\n\nexport default ThreadView;\n","import ThreadView from '../components/thread/ThreadView';\nimport { useParams } from \"react-router-dom\";\nimport CurrentUserState from '../types/CurrentUserState';\nimport GlobalMessageState from '../types/GlobalMessageState';\n\nimport React from 'react';\n\ntype Props = {\n    currentUserState: CurrentUserState,\n    API: string,\n    globalMessageState: GlobalMessageState\n}\n\nconst ThreadPage: React.FC<Props> = ({currentUserState, API, globalMessageState}: Props) => {\n    let { threadID }  = useParams();\n    return (\n        <div style={{ width: '50vw', margin: 'auto', textAlign: 'center', paddingTop: \"30px\" }}>\n            <ThreadView globalMessageState={globalMessageState} threadID={threadID} currentUserState={currentUserState} API={API}/>\n        </div>\n    );\n};\n\nexport default ThreadPage;\n","import { Button, TextField, Dialog, DialogActions, DialogContent, \n    DialogTitle, DialogContentText } from '@material-ui/core';\nimport AlertUser from '../AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\nimport CurrentUserState from '../../types/CurrentUserState';\n\nimport React, { useState } from 'react';\nimport GlobalMessageState from '../../types/GlobalMessageState';\n\ntype Props = {\n    openLogIn: boolean;\n    handleCloseLogIn: () => void;\n    currentUserState: CurrentUserState;\n    globalMessageState: GlobalMessageState;\n    API: string;\n}\n\n// Login dialog page\nconst LogIn: React.FC<Props> = ({API, openLogIn, handleCloseLogIn, currentUserState, globalMessageState}: Props) => {\n    const [username, setUsername] = useState<string>(\"\");\n    const [password, setPassword] = useState<string>(\"\");\n\n    const [severity, setSeverity] = useState<AlertColor | undefined>('success');\n    const [message, setMessage] = useState<string[]>([]);\n\n    const resetLogIn = () => {\n        setUsername(\"\");\n        setPassword(\"\");\n    }\n\n    // On clicking login button, post to backend, authenticate and cache user information / token\n    const handleSubmitLogIn = () => {\n        let new_message: string[] = [];\n            fetch(API + \"/login\", {\n                method: 'POST',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                body: JSON.stringify({\n                    username,\n                    password,\n                }),\n            })\n                .then((response) => {\n                    return response.json();\n                })\n                .then((data) => {\n                    if (data.error) {\n                        setSeverity('error');\n                        data.error.map((error: string) =>\n                            new_message.push(error));\n                        setMessage(new_message);\n                    } else {\n                        currentUserState.setCurrentUser(data.user);\n                        localStorage.setItem(\"token\", data.token);\n                        setSeverity('success');\n                        new_message.push(\"Logged in successfully!\");\n                        setMessage(new_message);\n\n                        // empty fields to prevent relogin, then reload page\n                        resetLogIn();\n                        setTimeout(() => window.location.reload(), 1000);\n                    }\n                })\n                .catch((error) => console.log(error.message));\n    }\n\n    // dialog page contains username and password fields, and \"close\" and \"login\" buttons\n    return (\n        <Dialog open={openLogIn} onClose={handleCloseLogIn} fullWidth>\n            <DialogTitle>Welcome Back!</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Log in to create threads, comment and more...\n                </DialogContentText>\n                <DialogContentText>\n                    Dont have an account? Create one to do much more!\n                </DialogContentText>\n                {/* Display success / error messages */}\n                <AlertUser severity={severity} message={message}/>\n                <TextField\n                    autoFocus\n                    value={username}\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Username\"\n                    fullWidth\n                    variant=\"outlined\"\n                    onChange={event => setUsername(event.target.value)}\n                />\n                <TextField\n                    value={password}\n                    type='password'\n                    margin=\"normal\"\n                    label=\"Password\"\n                    fullWidth\n                    variant=\"outlined\"\n                    onChange={event => setPassword(event.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseLogIn}>Cancel</Button>\n                <Button onClick={handleSubmitLogIn}>Log In</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default LogIn;","import { Button, TextField, Dialog, DialogActions, DialogContent, \n    DialogTitle, DialogContentText } from '@material-ui/core';\nimport AlertUser from '../AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\n\nimport React, { useState } from 'react';\n\ntype Props = {\n    openCreateAccount: boolean;\n    handleCloseCreateAccount: () => void;\n    API: string;\n}\n\n// create account dialog pagae\nconst CreateAccount: React.FC<Props> = ({API, openCreateAccount, handleCloseCreateAccount}: Props) => {\n    const [username, setUsername] = useState<string>(\"\");\n    const [password, setPassword] = useState<string>(\"\");\n    const [password_confirmation, setPassword_confirmation] = useState<string>(\"\");\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n\n    const resetCreateAccount = () => {\n        setUsername(\"\");\n        setPassword(\"\");\n        setPassword_confirmation(\"\");\n    }\n\n    // on clicking \"create account\" button, post to backend\n    const handleSubmitCreateAccount = () => {\n        let new_message: string[] = []; // reset messsage array\n        fetch(API + \"/users\", {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                },\n            body: JSON.stringify({\n                username,\n                password,\n                password_confirmation,\n            }),\n        })\n            .then((response) => {\n                if (response.ok) {\n                    setSeverity('success');\n                    new_message.push(\"Account created successfully. Log in to do more!\")\n                    setMessage(new_message);\n                    // empty fields (prevent clicking create account again, although backend ensures unique username)\n                    resetCreateAccount();\n                    setTimeout(() => window.location.reload(), 1000); // refresh page\n                }\n                return response.json();\n            })\n            .then((data) => {\n                if (data.error) {\n                    setSeverity('error');\n                    data.error.map((error: string) =>\n                        new_message.push(error));\n                    setMessage(new_message);\n                }\n            })\n            .catch((error) => console.log(error.message));\n    }\n\n    // dialog contains username, password and password confirmation fields, and \"cancel\" and \"create account\" buttons\n    return (\n        <Dialog open={openCreateAccount} onClose={handleCloseCreateAccount} fullWidth>\n            <DialogTitle>Join the ChitChat Community!</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Dont have an account? Create one to create threads, comment and more...\n                </DialogContentText>\n                {/* display success/error messages */}\n                <AlertUser severity={severity} message={message}/>\n                    <TextField\n                        autoFocus\n                        value={username}\n                        type='text'\n                        margin=\"normal\"\n                        label=\"Username\"\n                        fullWidth\n                        variant=\"outlined\"\n                        onChange={event => setUsername(event.target.value.trim())} // whitespaces disallowed in username field\n                    />\n                    <TextField\n                        value={password}\n                        type='password'\n                        margin=\"normal\"\n                        label=\"Password\"\n                        fullWidth\n                        variant=\"outlined\"\n                        onChange={event => setPassword(event.target.value)}\n                    />\n                    <TextField\n                        value={password_confirmation}\n                        type='password'\n                        margin=\"normal\"\n                        label=\"Confirm Password\"\n                        fullWidth\n                        variant=\"outlined\"\n                        onChange={event => setPassword_confirmation(event.target.value)}\n                    />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseCreateAccount}>Close</Button>\n                <Button onClick={handleSubmitCreateAccount}>Create Account</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default CreateAccount;","import { Button, TextField, Dialog, DialogActions, DialogContent, \n    DialogTitle } from '@material-ui/core';\nimport AlertUser from '../AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\nimport CurrentUserState from '../../types/CurrentUserState';\n\nimport React, { useState } from 'react';\n\ntype Props = {\n    openChangePassword: boolean;\n    handleCloseChangePassword: () => void;\n    currentUserState: CurrentUserState;\n    API: string;\n}\n\nconst ChangePassword: React.FC<Props> = ({API, openChangePassword, handleCloseChangePassword, currentUserState}: Props) => {\n    const [newPassword, setNewPassword] = useState<string>(\"\");\n    const [newPasswordConfirmation, setNewPasswordConfirmation] = useState<string>(\"\");\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n\n    const resetChangePassword = () => {\n        setNewPassword(\"\");\n        setNewPasswordConfirmation(\"\");\n    }\n\n    // on clicking \"change password\" button, patch changes to backend\n    const handleSubmitChangePassword = () => {\n        const password = newPassword;\n        const password_confirmation = newPasswordConfirmation;\n        let new_message: string[] = [];\n            fetch(API + \"/users/\" + currentUserState.currentUser.id, {\n                method: 'PATCH',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                body: JSON.stringify({\n                    password,\n                    password_confirmation,\n                }),\n            })\n                .then((response) => {\n                    if (response.ok) {\n                        setSeverity('success');\n                        new_message.push(\"Password Changed!\")\n                        setMessage(new_message);\n                        // empty fieds (prevent user from repeatedly chaning password again)\n                        resetChangePassword();\n                        // refresh page\n                        setTimeout(() => window.location.reload(), 1000);\n                    }\n                    return response.json();\n                })\n                .then((data) => {\n                    if (data.error) {\n                        setSeverity('error');\n                        data.error.map((error: string) =>\n                            new_message.push(error));\n                        setMessage(new_message);\n                    }\n                })\n                .catch((error) => console.log(error.message));\n        // }\n    }\n\n    // dialog contains password and password confirmation fields, and \"close\" and \"change password\" buttons\n    return (\n        <Dialog open={openChangePassword} onClose={handleCloseChangePassword} fullWidth>\n            <DialogTitle>Change Password</DialogTitle>\n            <DialogContent>\n                display success/error messages\n                <AlertUser severity={severity} message={message}/>\n                    <TextField\n                        value={newPassword}\n                        type='password'\n                        margin=\"normal\"\n                        label=\"Password\"\n                        fullWidth\n                        variant=\"outlined\"\n                        onChange={event => setNewPassword(event.target.value)}\n                    />\n                    <TextField\n                        value={newPasswordConfirmation}\n                        type='password'\n                        margin=\"normal\"\n                        label=\"Confirm Password\"\n                        fullWidth\n                        variant=\"outlined\"\n                        onChange={event => setNewPasswordConfirmation(event.target.value)}\n                    />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseChangePassword}>Close</Button>\n                <Button onClick={handleSubmitChangePassword}>Change Password</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default ChangePassword;","import * as React from 'react';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport LogIn from './LogIn';\nimport CreateAccount from './CreateAccount';\nimport CurrentUserState from '../../types/CurrentUserState';\nimport GlobalMessageState from '../../types/GlobalMessageState';\nimport ChangePassword from './ChangePassword';\n\n// Sourced Menu component from https://mui.com/material-ui/react-menu/#main-content and modified for use\n\ntype Props = {\n    anchorElAccountSettings: HTMLElement | null,\n    openAccountSettings: boolean,\n    handleCloseAccountSettings: () => void,\n    currentUserState: CurrentUserState;\n    globalMessageState: GlobalMessageState;\n    API: string;\n}\n\n// account settings button with dropdown menu containing more settings\nconst AccountSettings: React.FC<Props> = ({API, anchorElAccountSettings, openAccountSettings, handleCloseAccountSettings, currentUserState, globalMessageState}: Props) => {\n  \n  // toggle close/open login dialog page\n  const [openLogIn, setOpenLogIn] = React.useState<boolean>(false);\n    const handleClickOpenLogIn = () => {\n      setOpenLogIn(true);\n    };\n    const handleCloseLogIn = () => {\n      setOpenLogIn(false);\n    };\n\n    // toggle close/open create account dialog page\n    const [openCreateAccount, setOpenCreateAccount] = React.useState<boolean>(false);\n    const handleClickOpenCreateAccount = () => {\n      setOpenCreateAccount(true);\n    };\n    const handleCloseCreateAccount = () => {\n      setOpenCreateAccount(false);\n    };\n\n    // toggle close/open change password dialog page\n    const [openChangePassword, setOpenChangePassword] = React.useState<boolean>(false);\n    const handleClickOpenChangePassword = () => {\n      setOpenChangePassword(true);\n    };\n    const handleCloseChangePassword = () => {\n      setOpenChangePassword(false);\n    };\n\n    // when logout, forget user cache: user info and jwt token\n    const handleLogOut = () => {\n      currentUserState.setCurrentUser(currentUserState.emptyCurrentUser);\n      localStorage.removeItem(\"token\");\n      window.location.reload(); // refresh page to update without any user logged in\n    }\n\n    return (\n        <div>\n          {/* if user logged in, display change password and logout in dropdown menu */}\n          { currentUserState.isLoggedIn ? \n            <Menu\n                id=\"account-settings\"\n                anchorEl={anchorElAccountSettings}\n                open={openAccountSettings}\n                onClose={handleCloseAccountSettings}\n                MenuListProps={{\n                'aria-labelledby': 'basic-button',\n                }}\n            >            \n              <MenuItem onClick={handleClickOpenChangePassword}>Change Password</MenuItem>\n              <ChangePassword API={API} openChangePassword={openChangePassword} handleCloseChangePassword={handleCloseChangePassword} currentUserState={currentUserState}/>\n              <MenuItem onClick={handleLogOut}>Log Out</MenuItem>\n            </Menu> :\n            // else if user not logged in, display create account and login in dropdown menu\n            <Menu\n              id=\"account-settings\"\n              anchorEl={anchorElAccountSettings}\n              open={openAccountSettings}\n              onClose={handleCloseAccountSettings}\n              MenuListProps={{\n              'aria-labelledby': 'basic-button',\n              }}\n            >            \n              <MenuItem onClick={handleClickOpenLogIn}>Log In</MenuItem>\n              <LogIn API={API} openLogIn={openLogIn} handleCloseLogIn={handleCloseLogIn} currentUserState={currentUserState} globalMessageState={globalMessageState}/>\n              <MenuItem onClick={handleClickOpenCreateAccount}>Create Account</MenuItem>\n              <CreateAccount API={API} openCreateAccount={openCreateAccount} handleCloseCreateAccount={handleCloseCreateAccount}/>\n            </Menu>\n              }\n        </div>\n    );\n};\n\nexport default AccountSettings;","import { Typography, Box, AppBar, Container, Toolbar, Tooltip,\n  IconButton, Avatar, CardActionArea } from '@material-ui/core';\nimport ForumIcon from '@mui/icons-material/Forum';\nimport AccountSettings from './account/AccountSettings';\nimport CurrentUserState from '../types/CurrentUserState';\nimport GlobalMessageState from '../types/GlobalMessageState';\nimport Stack from '@mui/material/Stack';\n\nimport React from 'react';\n\ntype Props = {\n  currentUserState: CurrentUserState;\n  globalMessageState: GlobalMessageState;\n  API: string;\n}\n\n// Navigation bar menu: contains home button, my threads button and account settings dropdown menu (accessible on all pages)\nconst NavBar: React.FC<Props> = ({API, currentUserState, globalMessageState}: Props) => {\n\n  // Anchor settings menu (dropdown menu: contains log in, log out and creaete account buttons)\n  const [anchorElAccountSettings, setAnchorElAccountSettings] = React.useState<null | HTMLElement>(null);\n  const openAccountSettings = Boolean(anchorElAccountSettings);\n  const handleClickAccountSettings = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorElAccountSettings(event.currentTarget);\n  };\n  const handleCloseAccountSettings = () => {\n    setAnchorElAccountSettings(null);\n  };\n\n  // Other buttons on navbar that redirect to other pages (other than \"home\" and \"account settings\" buttons)\n  type page = {\n    pageName: string;\n    href: string;\n  }\n  const myThreads: page = {\n    pageName: \"MyThreads\",\n    href: \"/mythreads\",\n  }\n  const pages:page[] = [myThreads];\n\n  return (\n    <Box marginBottom={'70px'}>\n      <AppBar position='fixed' style={{zIndex: '1200'}}>\n        <Container maxWidth='xl'>\n          <Toolbar disableGutters>\n            <Box flexGrow={1} display='flex' alignItems={'center'}>\n              {/* Logo and website name */}\n              <ForumIcon sx={{mr: 1}} />\n              <Typography variant='h6' component='a' href='/'\n                style={{\n                  color: 'inherit',\n                  textDecoration: 'none',\n                  marginRight: '40px',\n                }}\n              >\n                ChitChat\n              </Typography>\n              <Stack direction='row'>\n                {/* Other buttons redirecting to other pages */}\n                {currentUserState.isLoggedIn && pages.map(page => (\n                  <CardActionArea key={page.pageName} style={{padding: '10px', borderRadius: '10px'}} href={page.href}>\n                    <Typography>{page.pageName}</Typography>\n                  </CardActionArea>\n                ))}\n              </Stack>\n            </Box>\n            {/* Account settings button with dropdown menu containing login, logout, change password and create account */}\n            <Tooltip title=\"Account Settings\">\n              <IconButton\n                id=\"basic-button\"\n                aria-controls={openAccountSettings ? 'account-settings' : undefined}\n                aria-haspopup=\"true\"\n                aria-expanded={openAccountSettings ? 'true' : undefined}\n                onClick={handleClickAccountSettings}\n              >\n                <Avatar/>\n              </IconButton>\n            </Tooltip>\n            <AccountSettings API={API} anchorElAccountSettings={anchorElAccountSettings} openAccountSettings={openAccountSettings} \n              handleCloseAccountSettings={handleCloseAccountSettings} currentUserState={currentUserState} globalMessageState={globalMessageState}/>\n          </Toolbar>\n        </Container>\n      </AppBar>\n    </Box>\n  );\n};\n\nexport default NavBar;","import React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert, { AlertColor } from '@mui/material/Alert';\nimport Stack from '@mui/material/Stack';\n\ntype Props = {\n    globalMessage: string[];\n    severityGlobalMessage: AlertColor | undefined;\n    handleCloseGlobalMessage: () => void;\n    openGlobalMessage: boolean;\n}\n\n// display global message to whatever page cureent user is viewing from (message on bottom left corner and lasts 6 seconds)\nconst GlobalMessage: React.FC<Props> = ({globalMessage, severityGlobalMessage, handleCloseGlobalMessage, openGlobalMessage}: Props) => {\n\n    return (\n        <Stack spacing={2}>\n            { globalMessage.map(message =>\n                <Snackbar open={openGlobalMessage} autoHideDuration={6000} onClose={handleCloseGlobalMessage}>\n                    <Alert onClose={handleCloseGlobalMessage} severity={severityGlobalMessage} sx={{ width: '100%' }}>\n                        {message}\n                    </Alert>\n                </Snackbar>\n            )}\n        </Stack>\n    );\n}\n\nexport default GlobalMessage;","import ThreadList from '../components/thread/ThreadList';\nimport { Thread } from '../types/Thread';\nimport CurrentUserState from '../types/CurrentUserState';\nimport GlobalMessageState from '../types/GlobalMessageState';\nimport { Typography } from '@material-ui/core';\n\nimport React, {useState, useEffect} from 'react';\n\ntype Props = {\n    currentUserState: CurrentUserState;\n    API: string;\n    globalMessageState: GlobalMessageState;\n}\n\n// MyThreads page: display threads created by current user (must be logged in)\nconst MyThreads: React.FC<Props> = ( {currentUserState, API, globalMessageState}: Props) => {\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [threads, setThreads] = useState<Thread[]>([]);\n\n    // If current user is logged in, fetch user's created threads\n    useEffect(() => {\n        if (currentUserState.isLoggedIn) {\n            fetch(API + \"/mythreads/\" + currentUserState.currentUser.id, {\n                method: 'GET',\n                mode: 'cors'\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setIsLoaded(true);\n                        setThreads(result);\n                    },\n                    (error) => {\n                        setIsLoaded(true);\n                        setError(error);\n                    }\n                )\n        }\n    }, [currentUserState.isLoggedIn, currentUserState.currentUser.id, API]);\n\n    return (\n        <div style={{ width: '50vw', margin: 'auto', textAlign: 'center', paddingTop: '30px'}}>\n            {/* List user's threads using ThreadList element (abtraction) */}\n            { threads.length === 0 ?\n                <Typography variant=\"h6\">Opps! Looking empty... Go ahead and create your first thread!</Typography> :\n                <ThreadList globalMessageState={globalMessageState} API={API} threads={threads} error={error} isLoaded={isLoaded} currentUserState={currentUserState}/>\n            }\n        </div>\n    );\n};\n\nexport default MyThreads;","import Home from './pages/Home';\nimport ThreadPage from './pages/ThreadPage';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport NavBar from './components/NavBar';\nimport CurrentUser from './types/CurrentUser';\nimport GlobalMessage from './components/GlobalMessage';\nimport { AlertColor } from '@mui/material/Alert';\nimport MyThreads from './pages/MyThreads';\n\nconst API: string = \"https://chitchat-4uee.onrender.com/\";\n\nconst theme = createTheme({\n    palette: {\n      primary: {\n        light: '#757ce8',\n        main: '#3f50b5',\n        dark: '#002884',\n        contrastText: '#fff',\n      },\n      secondary: {\n        light: '#ff7961',\n        main: '#f44336',\n        dark: '#ba000d',\n        contrastText: '#000',\n      },\n    },\n  });\n\nconst App: React.FC = () => {\n\n  // Global Message: to display messages at user's current page location\n  const [globalMessage, setGlobalMessage] = useState<string[]>([]);\n  const [severityGlobalMessage, setSeverityGlobalMessage] = useState<AlertColor | undefined>(undefined);\n  const [openGlobalMessage, setOpenGlobalMessage] = useState<boolean>(true);\n  const handleCloseGlobalMessage = () => {\n      setOpenGlobalMessage(false);\n      setSeverityGlobalMessage(undefined);\n      setGlobalMessage([]);\n  }\n  const handleOpenGlobalMessage = () => {\n    setOpenGlobalMessage(true);\n  }\n  const globalMessageState = {\n    setGlobalMessage: setGlobalMessage,\n    setSeverityGlobalMessage: setSeverityGlobalMessage,\n    handleOpenGlobalMessage: handleOpenGlobalMessage,\n  }\n\n  // Current User: cache user login information\n  const emptyCurrentUser = {\n    id: 0,\n    username: \"\",\n    password_digest: \"\",\n    created_at: \"\",\n    updated_at: \"\",\n  }\n  const [currentUser, setCurrentUser] = useState<CurrentUser>(emptyCurrentUser);\n  const currentUserState = {\n    currentUser: currentUser,\n    setCurrentUser: setCurrentUser,\n    emptyCurrentUser: emptyCurrentUser,\n    isLoggedIn: currentUser.id !== 0,\n  }\n\n  // Checks with backend that user is logged in whenver page is loaded\n  useEffect(() => {\n    let new_message: string[] = [];\n    const token = localStorage.getItem(\"token\")\n    if (token) {\n      fetch(API + \"/login\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `${token}`\n        }\n      })\n      .then(response => response.json())\n      .then(data => {\n        if (data.error) {\n          setSeverityGlobalMessage('error');\n          data.error.map((error: string) =>\n              new_message.push(error));\n          setGlobalMessage(new_message);\n        } else {\n          setCurrentUser(data);\n        }\n      })\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n          {/* Navigation bar menu: contains home button, my threads button and account settings dropdown menu (accessible on all pages)*/}\n          <NavBar API={API} currentUserState={currentUserState} globalMessageState={globalMessageState}/>\n          {/* Global Message element: display messages at user's current page location */}\n          < GlobalMessage globalMessage={globalMessage} severityGlobalMessage={severityGlobalMessage} openGlobalMessage={openGlobalMessage} handleCloseGlobalMessage={handleCloseGlobalMessage}/>\n          <BrowserRouter>\n            <Routes>\n                {/* View individual thread and associated comments */}\n                <Route path=\"/thread/:threadID\" element={<ThreadPage globalMessageState={globalMessageState} currentUserState={currentUserState} API={API}/>} />\n                {/* Home root page */}\n                <Route path=\"/\" element={<Home globalMessageState={globalMessageState} currentUserState={currentUserState} API={API}/>} />\n                {/* View all threads created by current user (must be logged in) */}\n                <Route path=\"/mythreads\" element={<MyThreads globalMessageState={globalMessageState} currentUserState={currentUserState} API={API}/>} />\n            </Routes>\n         </BrowserRouter>\n      </ThemeProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}