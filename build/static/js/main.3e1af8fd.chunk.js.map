{"version":3,"sources":["components/AvatarUserTimeTags.tsx","components/AlertUser.tsx","components/CreateComment.tsx","components/DeleteThread.tsx","components/UpdateThread.tsx","components/DeleteEditCommentOnThread.tsx","components/BodyAddHTML.tsx","components/ThreadMainPost.tsx","components/ThreadList.tsx","actions/actions.tsx","components/CreateThread.tsx","components/SearchBar.tsx","pages/Home.tsx","types/Thread.tsx","components/DeleteComment.tsx","components/UpdateComment.tsx","components/DeleteEditOnComment.tsx","components/CommentItem.tsx","components/CommentList.tsx","components/ThreadView.tsx","pages/ThreadPage.tsx","components/LogIn.tsx","components/CreateAccount.tsx","components/ChangePassword.tsx","components/AccountSettings.tsx","components/NavBar.tsx","components/GlobalMessage.tsx","pages/MyThreads.tsx","App.tsx","index.tsx"],"names":["AvatarUserTimeTags","tagged","user","time","tags","tagsArray","split","Grid","container","item","xs","Stack","direction","spacing","Avatar","Typography","align","variant","color","moment","fromNow","justifyContent","alignItems","map","tag","Chip","label","AlertUser","severity","message","error","Alert","CreateComment","API","openCreateComment","handleCloseCreateComment","thread_page_id","currentUserState","useState","body","setBody","undefined","setSeverity","setMessage","Dialog","open","onClose","fullWidth","DialogTitle","DialogContent","TextField","value","autoFocus","type","margin","multiline","onChange","event","target","DialogActions","Button","onClick","user_id","currentUser","id","new_message","push","length","fetch","toString","method","headers","JSON","stringify","then","response","ok","setTimeout","window","location","reload","catch","console","log","DeleteThread","openDeleteThread","handleCloseDeleteThread","url","href","protocol","host","replace","UpdateThread","openUpdateThread","handleCloseUpdateThread","title","setTitle","DeleteEditCommentOnThread","thread","globalMessageState","React","setOpenCreateComment","setOpenDeleteThread","setOpenUpdateThread","IconButton","isLoggedIn","setSeverityGlobalMessage","setGlobalMessage","handleOpenGlobalMessage","BodyAddHTML","toOverflow","body_array","filter","ele","line","index","body_elipsis","join","noWrap","ThreadPost","Card","CardActionArea","style","padding","CardContent","username","Date","created_at","commentable","ThreadList","threads","isLoaded","width","textAlign","ThreadMainPost","strToArray","str","toLowerCase","CreateThread","openCreateThread","handleCloseCreateThread","tagsInput","setTagsInput","setTagsArray","useEffect","placeholder","SearchBar","setThreadResults","setOpenCreateThread","searchByTags","setSearchByTags","search","setSearch","results","setResults","mode","res","json","result","paddingTop","paddingBottom","position","top","zIndex","Paper","component","sx","display","InputBase","ml","flex","Divider","height","m","orientation","justifyItems","paddingLeft","threadID","Home","threadResults","setError","setIsLoaded","setThreads","onInit","typewriter","changeDelay","typeString","pauseFor","start","emptyThread","updated_at","comments","DeleteComment","openDeleteComment","handleCloseDeleteComment","comment","UpdateComment","openUpdateComment","handleCloseUpdateComment","DeleteEditOnComment","setOpenDeleteComment","setOpenUpdateComment","useStyles","makeStyles","commentBody","fontSize","whiteSpace","commentCard","marginBottom","metadata","CommentItem","classes","className","CommentList","ThreadView","setThread","ThreadPage","useParams","LogIn","openLogIn","handleCloseLogIn","setUsername","password","setPassword","DialogContentText","data","setCurrentUser","localStorage","setItem","token","CreateAccount","openCreateAccount","handleCloseCreateAccount","password_confirmation","setPassword_confirmation","ChangePassword","openChangePassword","handleCloseChangePassword","newPassword","setNewPassword","newPasswordConfirmation","setNewPasswordConfirmation","AccountSettings","anchorElAccountSettings","openAccountSettings","handleCloseAccountSettings","setOpenLogIn","setOpenCreateAccount","setOpenChangePassword","Menu","anchorEl","MenuListProps","MenuItem","emptyCurrentUser","removeItem","NavBar","setAnchorElAccountSettings","Boolean","pages","pageName","Box","AppBar","Container","maxWidth","Toolbar","disableGutters","flexGrow","mr","textDecoration","marginRight","page","borderRadius","Tooltip","currentTarget","GlobalMessage","globalMessage","severityGlobalMessage","handleCloseGlobalMessage","openGlobalMessage","Snackbar","autoHideDuration","MyThreads","theme","createTheme","palette","primary","light","main","dark","contrastText","secondary","App","setOpenGlobalMessage","password_digest","getItem","Authorization","ThemeProvider","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e1af8fd.chunk.js","sourcesContent":["import React from 'react';\nimport { Grid, Chip, Typography } from '@material-ui/core';\nimport Avatar from '@mui/material/Avatar';\nimport moment from 'moment';\nimport Stack from '@mui/material/Stack';\n\ntype Props = {\n    tagged: boolean;\n    user: string;\n    time: Date;\n    tags: string;\n};\n\nconst AvatarUserTimeTags: React.FC<Props> = ({ tagged, user, time, tags }: Props) => {\n    if (tagged) {\n        const tagsArray= tags.split(\",\");\n        return (\n            <Grid container>\n                <Grid item xs={6}>\n                    <Stack direction='row' spacing={2}>\n                        <Avatar/>\n                        <Stack direction='column'>\n                            <Typography align='left' variant='h5'>{ user }</Typography>\n                            <Typography align='left' variant='subtitle1' color='textSecondary'>{moment(time).fromNow()}</Typography>\n                        </Stack>\n                    </Stack>\n                </Grid>\n                <Grid item container xs={6} direction='row' spacing={1} justifyContent='flex-end' alignItems='flex-start'>\n                    { tagsArray.map(tag =>\n                        <Grid item key={tag}>\n                            <Chip label={tag} />\n                        </Grid>\n                    )}\n                </Grid>\n            </Grid>\n        );\n    }\n\n    // Without tags\n    return (\n        <Grid container>\n            <Grid item xs={6}>\n                <Stack direction='row' spacing={2}>\n                    <Avatar/>\n                    <Stack direction='column'>\n                        <Typography align='left' variant='h5'>{ user }</Typography>\n                        <Typography align='left' variant='subtitle1' color='textSecondary'>{moment(time).fromNow()}</Typography>\n                    </Stack>\n                </Stack>\n            </Grid>\n            <Grid item xs={6}>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default AvatarUserTimeTags;","import Alert, { AlertColor } from '@mui/material/Alert';\n\nimport React from 'react';\n\ntype Props = {\n    severity: AlertColor | undefined;\n    message: string[];\n}\n\nconst AlertUser: React.FC<Props> = ({severity, message}: Props) => {\n    return (\n        <>\n            { message.map(error =>\n                <Alert severity={severity}>{error}</Alert>)  \n            }\n        </>\n    );\n};\n\nexport default AlertUser;","import { Button, TextField, Dialog, DialogActions, DialogContent, \n    DialogTitle } from '@material-ui/core';\nimport AlertUser from './AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\nimport CurrentUserState from '../types/CurrentUserState';\n\nimport React, { useState } from 'react';\n\ntype Props = {\n    openCreateComment: boolean;\n    handleCloseCreateComment: () => void;\n    thread_page_id: number;\n    currentUserState: CurrentUserState;\n    API: string;\n}\n\nconst CreateComment: React.FC<Props> = ({API, openCreateComment, handleCloseCreateComment, thread_page_id, currentUserState}: Props) => {\n    const [body, setBody] = useState<string>(\"\");\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n\n    const resetCreateComment = () => {\n        setBody(\"\");\n    }\n    \n    const handleSubmitCreateComment = () => {\n        const user_id = currentUserState.currentUser.id\n        let new_message: string[] = [];\n        if (body === \"\") {\n            new_message.push(\"Fill in all fields\");\n        }\n        if (new_message.length > 0) {\n            setSeverity('error');\n            setMessage(new_message);\n        } else {\n            fetch(API + \"/thread_pages/\" + thread_page_id.toString() + \"/comments\", {\n                method: 'POST',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                body: JSON.stringify({\n                    body,\n                    user_id,\n                    thread_page_id,\n                }),\n            })\n                .then((response) => {\n                    if (response.ok) {\n                        setSeverity('success');\n                        new_message.push(\"You have created a new comment!\")\n                        setMessage(new_message);\n                        resetCreateComment();\n                        setTimeout(() => window.location.reload(), 1000);\n                    } else {\n                        setSeverity('error');\n                        new_message.push(\"Some error occured\");\n                        setMessage(new_message);\n                    }\n                })\n                .catch((error) => console.log(error.message));\n        }\n    }\n\n    return (\n        <Dialog open={openCreateComment} onClose={handleCloseCreateComment} fullWidth>\n            <DialogTitle>What's on your mind?</DialogTitle>\n            <DialogContent>\n                <AlertUser severity={severity} message={message}/>\n                <TextField\n                    value = {body}\n                    autoFocus\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Say something here...\"\n                    fullWidth\n                    variant=\"standard\"\n                    multiline\n                    onChange={(event) => setBody(event.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseCreateComment}>Cancel</Button>\n                <Button onClick={handleSubmitCreateComment}>Comment</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default CreateComment;","import { Button, Dialog, DialogActions, DialogContent, \n    DialogTitle } from '@material-ui/core';\nimport AlertUser from './AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\n\nimport React, { useState } from 'react';\n\ntype Props = {\n    openDeleteThread: boolean;\n    handleCloseDeleteThread: () => void;\n    thread_page_id: number;\n    API: string;\n}\n\nconst DeleteThread: React.FC<Props> = ({API, openDeleteThread, handleCloseDeleteThread, thread_page_id}: Props) => {\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n    \n    const handleSubmitDeleteThread = () => {\n        let new_message: string[] = [];\n        fetch(API + \"/thread_pages/\" + thread_page_id.toString(), {\n            method: 'DELETE',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                },\n        })\n            .then((response) => {\n                if (response.ok) {\n                    setSeverity('success');\n                    new_message.push(\"You have deleted thread!\")\n                    setMessage(new_message);\n                    const url = window.location.href;\n                    setTimeout(url === window.location.protocol + \"//\" + window.location.host + \"/thread\"\n                        ? () => window.location.reload()\n                        : () => window.location.replace(window.location.protocol + \"//\" + window.location.host), 1000);\n                } else {\n                    setSeverity('error');\n                    new_message.push(\"Some error occured\");\n                    setMessage(new_message);\n                }\n            })\n            .catch((error) => console.log(error.message));\n    }\n\n    return (\n        <Dialog open={openDeleteThread} onClose={handleCloseDeleteThread} fullWidth>\n            <DialogTitle>Are you sure you want to delete this thread?</DialogTitle>\n            <DialogContent>\n                <AlertUser severity={severity} message={message}/>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseDeleteThread}>Cancel</Button>\n                <Button onClick={handleSubmitDeleteThread}>Delete Thread</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default DeleteThread;","import { Button, TextField, Dialog, DialogActions, DialogContent, \n    DialogTitle} from '@material-ui/core';\nimport AlertUser from './AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\n\nimport React, { useState } from 'react';\n\ntype Props = {\n    openUpdateThread: boolean;\n    handleCloseUpdateThread: () => void;\n    thread_page_id: number;\n    API: string;\n}\n\nconst UpdateThread: React.FC<Props> = ({API, openUpdateThread, handleCloseUpdateThread, thread_page_id}: Props) => {\n    const [title, setTitle] = useState<string>(\"\");\n    const [body, setBody] = useState<string>(\"\");\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n    \n    const resetUpdateThread = () => {\n        setTitle(\"\");\n        setBody(\"\");\n    }\n\n    const handleSubmitUpdateThread = () => {\n        let new_message: string[] = [];\n        if (title === \"\" || body === \"\") {\n            new_message.push(\"Fill in all fields\");\n        }\n        if (new_message.length > 0) {\n            setSeverity('error');\n            setMessage(new_message);\n        } else {\n            fetch(API + \"/thread_pages/\" + thread_page_id, {\n                method: 'PATCH',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                body: JSON.stringify({\n                    title,\n                    body,\n                }),\n            })\n                .then((response) => {\n                    if (response.ok) {\n                        setSeverity('success');\n                        new_message.push(\"Changes saved!\")\n                        setMessage(new_message);\n                        resetUpdateThread();\n                        setTimeout(() => window.location.reload(), 1000);\n                    } else {\n                        setSeverity('error');\n                        new_message.push(\"Some error occured\");\n                        setMessage(new_message);\n                    }\n                })\n                .catch((error) => console.log(error.message));\n        }\n    }\n\n    return (\n        <Dialog open={openUpdateThread} onClose={handleCloseUpdateThread} fullWidth>\n            <DialogTitle>What's on your mind?</DialogTitle>\n            <DialogContent>\n                <AlertUser severity={severity} message={message}/>\n                <TextField\n                    value={title}\n                    autoFocus\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Title\"\n                    fullWidth\n                    variant=\"standard\"\n                    onChange={event => setTitle(event.target.value)}\n                />\n                <TextField\n                    value={body}\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Say something here...\"\n                    fullWidth\n                    variant=\"standard\"\n                    multiline\n                    onChange={event => setBody(event.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseUpdateThread}>Cancel</Button>\n                <Button onClick={handleSubmitUpdateThread}>Edit Thread</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default UpdateThread;","import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport Stack from '@mui/material/Stack';\nimport CommentIcon from '@mui/icons-material/Comment';\nimport CreateComment from './CreateComment';\nimport DeleteThread from './DeleteThread';\nimport UpdateThread from './UpdateThread';\nimport CurrentUserState from '../types/CurrentUserState';\nimport {Thread} from '../types/Thread';\nimport GlobalMessageState from '../types/GlobalMessageState';\n\ntype Props = {\n    commentable: boolean;\n    thread: Thread;\n    currentUserState: CurrentUserState;\n    API: string;\n    globalMessageState: GlobalMessageState;\n};\n\nconst DeleteEditCommentOnThread: React.FC<Props> = ({ API, currentUserState, thread, globalMessageState }: Props) => {\n    const [openCreateComment, setOpenCreateComment] = React.useState<boolean>(false);\n    const handleClickOpenCreateComment = () => {\n      if (currentUserState.isLoggedIn) {\n        setOpenCreateComment(true);\n      } else {\n        globalMessageState.setSeverityGlobalMessage(\"info\");\n        globalMessageState.setGlobalMessage([\"Please login to comment\"]);\n        globalMessageState.handleOpenGlobalMessage();\n      }\n    };\n    const handleCloseCreateComment = () => {\n      setOpenCreateComment(false);\n    };\n\n    const [openDeleteThread, setOpenDeleteThread] = React.useState<boolean>(false);\n    const handleClickOpenDeleteThread = () => {\n      setOpenDeleteThread(true);\n    };\n    const handleCloseDeleteThread = () => {\n      setOpenDeleteThread(false);\n    };\n\n    const [openUpdateThread, setOpenUpdateThread] = React.useState<boolean>(false);\n    const handleClickOpenUpdateThread = () => {\n      setOpenUpdateThread(true);\n    };\n    const handleCloseUpdateThread = () => {\n      setOpenUpdateThread(false);\n    };\n    \n    return (\n        <Stack direction=\"row\" justifyContent='flex-end' alignItems=\"center\" spacing={1}>\n            <IconButton onClick={handleClickOpenCreateComment}>\n                <CommentIcon />\n            </IconButton>\n            <CreateComment API={API} thread_page_id={thread.id} openCreateComment={openCreateComment} handleCloseCreateComment={handleCloseCreateComment} currentUserState={currentUserState}/>\n            { thread.user_id === currentUserState.currentUser.id &&\n              <>\n                <IconButton onClick={handleClickOpenUpdateThread}>\n                  <EditIcon />\n                </IconButton>\n                <UpdateThread API={API} thread_page_id={thread.id} openUpdateThread={openUpdateThread} handleCloseUpdateThread={handleCloseUpdateThread} />\n              </>\n            }\n            { thread.user_id === currentUserState.currentUser.id &&\n              <>\n                <IconButton onClick={handleClickOpenDeleteThread}>\n                  <DeleteIcon />\n                </IconButton>\n                <DeleteThread API={API} thread_page_id={thread.id} openDeleteThread={openDeleteThread} handleCloseDeleteThread={handleCloseDeleteThread} />\n              </>\n            }\n        </Stack>\n    );\n};\n\nexport default DeleteEditCommentOnThread;","import { Typography } from '@material-ui/core';\nimport Stack from '@mui/material/Stack';\n\nimport React from 'react';\n\ntype Props = {\n    toOverflow: boolean;\n    body: string;\n}\n\nconst BodyAddHTML: React.FC<Props> = ({ body, toOverflow }: Props) => {\n    const body_array: string[] = body.split('\\n').filter(ele => ele !== \"\");\n\n    if (!toOverflow) {\n        return (\n            <Stack direction='column' spacing={0}>\n                { body_array.map((line, index) => (\n                    <div key={index}>\n                        <Typography align='left' variant=\"body1\">\n                            {line}\n                        </Typography>\n                        <br />\n                    </div>\n                ))}\n            </Stack>\n        );\n    }\n\n    const body_elipsis = body_array.join('...');\n    return (\n        <Typography noWrap={toOverflow} align='left' variant=\"body1\">\n            {body_elipsis}\n        </Typography>\n    );\n};\n\nexport default BodyAddHTML;","import React from 'react';\nimport { Card, CardContent, Typography, CardActionArea } from '@material-ui/core';\nimport Stack from '@mui/material/Stack';\nimport AvatarUserTimeTags from './AvatarUserTimeTags';\nimport DeleteEditCommentOnThread from './DeleteEditCommentOnThread';\nimport { Thread } from '../types/Thread';\nimport BodyAddHTML from './BodyAddHTML';\nimport CurrentUserState from '../types/CurrentUserState';\nimport GlobalMessageState from '../types/GlobalMessageState';\n\ntype Props = {\n    toOverflow: boolean;\n    thread: Thread;\n    currentUserState: CurrentUserState;\n    API: string;\n    globalMessageState: GlobalMessageState;\n}\n\nconst ThreadPost: React.FC<Props> = ( {API, toOverflow, thread, currentUserState, globalMessageState}: Props) => {\n    return (\n        <Card>\n            <CardActionArea style={{ padding: '20px' }} href={'/thread/' + thread.id}>\n                <Typography variant='h4' align='left'>\n                    {thread.title}\n                </Typography>\n            </CardActionArea>\n            <CardContent>\n                <Stack direction='column' spacing={3}>\n                    <AvatarUserTimeTags tagged={true} user={thread.user.username} time={new Date(thread.created_at)} tags={thread.tags}/>\n                    <BodyAddHTML body={thread.body} toOverflow={toOverflow} />\n                    <DeleteEditCommentOnThread globalMessageState={globalMessageState} API={API} commentable={true} thread={thread} currentUserState={currentUserState}/>\n                </Stack>\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default ThreadPost;","import '../App.css';\nimport ThreadMainPost from './ThreadMainPost';\nimport Stack from '@mui/material/Stack';\nimport { Thread } from '../types/Thread';\nimport CurrentUserState from '../types/CurrentUserState';\nimport GlobalMessageState from '../types/GlobalMessageState';\n\nimport React from 'react';\n\ntype Props = {\n    threads: Thread[];\n    currentUserState: CurrentUserState;\n    error: any;\n    isLoaded: boolean;\n    API: string;\n    globalMessageState: GlobalMessageState;\n}\n\nconst ThreadList: React.FC<Props> = ({ API, threads, error, isLoaded, currentUserState, globalMessageState }: Props) => {\n    if (error) {\n        return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div>Loading...</div>;\n    } else {\n        return (\n            <div style={{ width: '50vw', margin: 'auto', textAlign: 'center' }}>\n                <Stack spacing={2}>\n                    { threads.map(thread => (\n                        <ThreadMainPost globalMessageState={globalMessageState} API={API} toOverflow={true} thread={thread} key={thread.id} currentUserState={currentUserState}/>\n                    ))}\n                </Stack>\n            </div>\n        );\n    }\n};\n\nexport default ThreadList;\n","const strToArray = (str: string) => {\n    return str.replace(/\\s/g, \"\").toLowerCase().split(\"#\").filter(tag => tag !== \"\");\n}\n\nexport { strToArray };","import { Button, TextField, Dialog, DialogActions, DialogContent, \n    DialogTitle, Grid, Chip} from '@material-ui/core';\nimport AlertUser from './AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\nimport { strToArray } from '../actions/actions';\nimport CurrentUserState from '../types/CurrentUserState';\n\nimport React, { useState, useEffect } from 'react';\n\ntype Props = {\n    openCreateThread: boolean;\n    handleCloseCreateThread: () => void;\n    currentUserState: CurrentUserState;\n    API: string;\n}\n\nconst CreateThread: React.FC<Props> = ({API, openCreateThread, handleCloseCreateThread, currentUserState }: Props) => {\n    const [title, setTitle] = useState<string>(\"\");\n    const [body, setBody] = useState<string>(\"\");\n    const [tagsInput, setTagsInput] = useState<string>(\"\");\n    const [tagsArray, setTagsArray] = useState<string[]>([]);\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n\n    const resetCreateThread = () => {\n        setTitle(\"\");\n        setBody(\"\");\n        setTagsInput(\"\");\n    }\n\n    useEffect(() => {\n        setTagsArray(strToArray(tagsInput));\n    }, [tagsInput]);\n\n    const handleSubmitCreateThread = () => {\n        const user_id = currentUserState.currentUser.id;\n        const tags = tagsArray.toString();\n        let new_message: string[] = [];\n        if (title === \"\" || body === \"\") {\n            new_message.push(\"Fill in all fields\");\n        }\n        if (new_message.length > 0) {\n            setSeverity('error');\n            setMessage(new_message);\n        } else {\n            fetch(API + \"/thread_pages\", {\n                method: 'POST',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    title,\n                    body,\n                    user_id,\n                    tags,\n                }),\n            })\n                .then((response) => {\n                    if (response.ok) {\n                        setSeverity('success');\n                        new_message.push(\"You have created a new thread!\")\n                        setMessage(new_message);\n                        resetCreateThread();\n                        setTimeout(() => window.location.reload(), 1000);\n                    } else {\n                        setSeverity('error');\n                        new_message.push(\"Some error occured\");\n                        setMessage(new_message);\n                    }\n                })\n                .catch((error) => console.log(error.message));\n        }\n    }\n    \n    return (\n        <Dialog open={openCreateThread} onClose={handleCloseCreateThread} fullWidth>\n            <DialogTitle>What's on your mind?</DialogTitle>\n            <DialogContent>\n                <AlertUser severity={severity} message={message}/>\n                <TextField\n                    value={title}\n                    autoFocus\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Title\"\n                    fullWidth\n                    variant=\"standard\"\n                    onChange={event => setTitle(event.target.value)}\n                />\n                <TextField\n                    value={tagsInput}\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Tags\"\n                    fullWidth\n                    placeholder='#HawkerFood #Travel #School'\n                    variant=\"standard\"\n                    onChange={event => setTagsInput(event.target.value)}\n                />\n                <Grid container direction='row' spacing={1} justifyContent='flex-start' alignItems='flex-start'>\n                    { tagsArray.length > 0 && tagsArray.map(tag =>\n                        <Grid item>\n                            <Chip label={tag}/>\n                        </Grid>\n                    )}\n                </Grid>\n                <TextField\n                    value={body}\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Say something here...\"\n                    fullWidth\n                    variant=\"standard\"\n                    multiline\n                    onChange={event => setBody(event.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseCreateThread}>Cancel</Button>\n                <Button onClick={handleSubmitCreateThread}>Create Thread</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default CreateThread;","import React, { useEffect, useState } from 'react';\nimport Paper from '@mui/material/Paper';\nimport InputBase from '@mui/material/InputBase';\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport SearchIcon from '@mui/icons-material/Search';\nimport LibraryAddIcon from '@mui/icons-material/LibraryAdd';\nimport CreateThread from './CreateThread';\nimport ThreadSearch from '../types/ThreadSearch';\nimport { Typography, CardActionArea } from '@material-ui/core';\nimport Stack from '@mui/material/Stack';\nimport TagIcon from '@mui/icons-material/Tag';\nimport { strToArray } from '../actions/actions';\nimport { Thread } from '../types/Thread';\nimport CurrentUserState from '../types/CurrentUserState';\nimport GlobalMessageState from '../types/GlobalMessageState';\n\ntype Props = {\n    setThreadResults: React.Dispatch<React.SetStateAction<Thread[]>>;\n    currentUserState: CurrentUserState;\n    API: string;\n    globalMessageState: GlobalMessageState;\n}\n\nconst SearchBar: React.FC<Props> = ({setThreadResults, currentUserState, API, globalMessageState}: Props) => {\n    const handleRedirectToThreadPage = (threadID: number) => {\n        window.location.replace(\n            window.location.protocol + \"//\" + window.location.host + '/thread/' + threadID.toString()\n        );\n    }\n\n    const [openCreateThread, setOpenCreateThread] = React.useState<boolean>(false);\n\n    const handleClickOpenCreateThread = () => {\n        if (currentUserState.isLoggedIn) {\n            setOpenCreateThread(true);\n        } else {\n            globalMessageState.setSeverityGlobalMessage(\"info\");\n            globalMessageState.setGlobalMessage([\"Please login to create thread\"]);\n            globalMessageState.handleOpenGlobalMessage();\n        }\n    };\n  \n    const handleCloseCreateThread = () => {\n      setOpenCreateThread(false);\n    };\n\n    const [searchByTags, setSearchByTags] = useState<Boolean>(false);\n    const [search, setSearch] = useState<string>(\"\");\n    const [results, setResults] = useState<ThreadSearch[]>([]);\n\n    const handleClickSearch = () => {\n        if (search === \"\") {\n            return;\n        } else if (searchByTags) {\n            const tagsArray = strToArray(search);\n            fetch(API + \"/thread_pages/search/tags\", {\n                method: 'POST',\n                mode: 'cors',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    tagsArray,\n                }),\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setThreadResults(result);\n                    }\n                )\n        } else {\n            const title = search;\n            fetch(API + \"/thread_pages/search/title\", {\n                method: 'POST',\n                mode: 'cors',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    title,\n                }),\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setThreadResults(result);\n                    }\n                )\n        }\n    }\n\n    useEffect(() => {\n        if (search === \"\") {\n            setResults([]);\n        }\n        else if (searchByTags) {\n            const tagsArray = strToArray(search);\n            console.log(tagsArray);\n            fetch(API + \"/thread_pages/search/tags/autocomplete\", {\n                method: 'POST',\n                mode: 'cors',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    tagsArray,\n                }),\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setResults(result);\n                    }\n                )\n        } else {\n            const title = search;\n            fetch(API + \"/thread_pages/search/title/autocomplete\", {\n                method: 'POST',\n                mode: 'cors',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    title,\n                }),\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setResults(result);\n                    }\n                )\n        }\n    }, [search, searchByTags, API]);\n\n    return (\n        <div style={{paddingTop: '20px', paddingBottom: '20px', position: 'sticky', top: '50px', zIndex: '1100'}}>\n            <Paper\n            component=\"form\" \n            sx={{ display: 'flex', alignItems: 'center' }}\n            >\n                <InputBase\n                    sx={{ ml: 1, flex: 1 }}\n                    placeholder={\n                        searchByTags ? \"Search by Tags: #HawkerFood #Travel # School\" : \"Search by Title\"}\n                    value={search}\n                    onChange={event => setSearch(event.target.value)}\n                />\n                <IconButton onClick={handleClickSearch}>\n                    <SearchIcon />\n                </IconButton>\n                <IconButton onClick={() => setSearchByTags(!searchByTags)}>\n                    <TagIcon color={searchByTags ? 'primary' : \"disabled\"}/>\n                </IconButton>\n                <Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" />\n                <IconButton onClick={handleClickOpenCreateThread}>\n                    <LibraryAddIcon />\n                </IconButton>\n                <CreateThread API={API} openCreateThread={openCreateThread} handleCloseCreateThread={handleCloseCreateThread} currentUserState={currentUserState}/>\n            </Paper>\n            { results.length > 0 &&\n                <Paper sx={{justifyItems: \"flex-start\"}}>\n                    <Stack direction=\"column\" alignItems=\"flex-start\">\n                        { results.map(result =>\n                                <CardActionArea style={{paddingTop: 3, paddingBottom: 3, paddingLeft: 8}} \n                                    onClick={() => handleRedirectToThreadPage(result.id)}\n                                >\n                                    <Typography key={result.id} align=\"left\">{result.title}</Typography>\n                                </CardActionArea>\n                        )}\n                    </Stack>\n                </Paper>\n            }\n        </div>\n    );\n};\n\nexport default SearchBar;","import ThreadList from '../components/ThreadList';\nimport { Typography } from '@material-ui/core';\nimport Typewriter from 'typewriter-effect';\nimport SearchBar from '../components/SearchBar';\nimport { Thread } from '../types/Thread';\nimport CurrentUserState from '../types/CurrentUserState';\nimport GlobalMessageState from '../types/GlobalMessageState';\n\nimport React, {useState, useEffect} from 'react';\n\ntype Props = {\n    currentUserState: CurrentUserState;\n    API: string;\n    globalMessageState: GlobalMessageState;\n}\n\n// Root path directs to homepage\nconst Home: React.FC<Props> = ( {currentUserState, API, globalMessageState}: Props) => {\n    const [threadResults, setThreadResults] = useState<Thread[]>([]);\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [threads, setThreads] = useState<Thread[]>(threadResults);\n\n    // get json of latest threads from server\n    useEffect(() => {\n        if (threadResults.length > 0) {\n            setIsLoaded(true);\n            setThreads(threadResults);\n        } else {\n            fetch(API + \"/thread_pages\", {\n                method: 'GET',\n                mode: 'cors'\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        setIsLoaded(true);\n                        setThreads(result);\n                    },\n                    (error) => {\n                        setIsLoaded(true);\n                        setError(error);\n                    }\n                )\n        }\n    }, [threadResults, API]);\n\n    return (\n        <div style={{ width: '50vw', margin: 'auto', textAlign: 'center'}}>\n\n            {/* ChitChat animiation */}\n            <Typography variant='h3' style={{ paddingTop: '70px'}}>\n                <Typewriter\n                    onInit={(typewriter) => {\n                        typewriter\n                            .changeDelay(80)\n                            .typeString(\"ChitChat\")\n                            .pauseFor(1000)\n                            .start();\n                    }}\n                /> \n            </Typography>\n\n            {/* Search Bar: search by tags or title */}\n            <SearchBar setThreadResults={setThreadResults} currentUserState={currentUserState} API={API}\n                globalMessageState={globalMessageState}/>\n\n            {/* List of threads, starting from latest */}\n            <ThreadList globalMessageState={globalMessageState} API={API} threads={threads} currentUserState={currentUserState}\n                error={error} isLoaded={isLoaded}/>\n        </div>\n    );\n};\n\nexport default Home;","import Comment from './Comment';\nimport User from './User';\n\ntype Thread = {\n    id: number;\n    title: string;\n    body: string;\n    user_id: number;\n    tags: string;\n    created_at: string;\n    updated_at: string;\n    comments: Comment[];\n    user: User;\n};\n\nconst emptyThread: Thread = {\n    id: 0,\n    title: '',\n    body: '',\n    user_id: 0,\n    tags: \"\",\n    created_at: '',\n    updated_at: '',\n    comments: [],\n    user: {\n        username: '',\n    },\n}\n\nexport { type Thread, emptyThread };","import { Button, Dialog, DialogActions, DialogContent, \n    DialogTitle } from '@material-ui/core';\nimport AlertUser from './AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\nimport Comment from '../types/Comment';\n\nimport React, { useState } from 'react';\n\ntype Props = {\n    openDeleteComment: boolean;\n    handleCloseDeleteComment: () => void;\n    comment: Comment;\n    API: string;\n}\n\nconst DeleteComment: React.FC<Props> = ({API, openDeleteComment, handleCloseDeleteComment, comment}: Props) => {\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n    \n    const handleSubmitDeleteComment = () => {\n        let new_message: string[] = [];\n        fetch(API + \"/thread_pages/\" + comment.thread_page_id.toString() + \"/comments/\" + comment.id.toString(), {\n            method: 'DELETE',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                },\n        })\n            .then((response) => {\n                if (response.ok) {\n                    setSeverity('success');\n                    new_message.push(\"You have deleted comment!\")\n                    setMessage(new_message);\n                    setTimeout(() => window.location.reload(), 1000);\n                } else {\n                    setSeverity('error');\n                    new_message.push(\"Some error occured\");\n                    setMessage(new_message);\n                }\n            })\n            .catch((error) => console.log(error.message));\n    }\n\n    return (\n        <Dialog open={openDeleteComment} onClose={handleCloseDeleteComment} fullWidth>\n            <DialogTitle>Are you sure you want to delete this comment?</DialogTitle>\n            <DialogContent>\n                <AlertUser severity={severity} message={message}/>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseDeleteComment}>Cancel</Button>\n                <Button onClick={handleSubmitDeleteComment}>Delete Comment</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default DeleteComment;","import { Button, TextField, Dialog, DialogActions, DialogContent, \n    DialogTitle} from '@material-ui/core';\nimport AlertUser from './AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\nimport Comment from '../types/Comment';\n\nimport React, { useState } from 'react';\n\ntype Props = {\n    openUpdateComment: boolean;\n    handleCloseUpdateComment: () => void;\n    comment: Comment;\n    API: string;\n}\n\nconst UpdateComment: React.FC<Props> = ({API, openUpdateComment, handleCloseUpdateComment, comment}: Props) => {\n    const [body, setBody] = useState<string>(\"\");\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n    \n    const resetUpdateComment = () => {\n        setBody(\"\");\n    }\n\n    const handleSubmitUpdateComment = () => {\n        let new_message: string[] = [];\n        if (body === \"\") {\n            new_message.push(\"Fill in all fields\");\n        }\n        if (new_message.length > 0) {\n            setSeverity('error');\n            setMessage(new_message);\n        } else {\n            fetch(API + \"/thread_pages/\" + comment.thread_page_id + \"/comments/\" + comment.id, {\n                method: 'PATCH',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                body: JSON.stringify({\n                    body,\n                }),\n            })\n                .then((response) => {\n                    if (response.ok) {\n                        setSeverity('success');\n                        new_message.push(\"Changes saved!\")\n                        setMessage(new_message);\n                        resetUpdateComment();\n                        setTimeout(() => window.location.reload(), 1000);\n                    } else {\n                        setSeverity('error');\n                        new_message.push(\"Some error occured\");\n                        setMessage(new_message);\n                    }\n                })\n                .catch((error) => console.log(error.message));\n        }\n    }\n\n    return (\n        <Dialog open={openUpdateComment} onClose={handleCloseUpdateComment} fullWidth>\n            <DialogTitle>What's on your mind?</DialogTitle>\n            <DialogContent>\n                <AlertUser severity={severity} message={message}/>\n                <TextField\n                    value={body}\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Say something here...\"\n                    fullWidth\n                    variant=\"standard\"\n                    multiline\n                    onChange={event => setBody(event.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseUpdateComment}>Cancel</Button>\n                <Button onClick={handleSubmitUpdateComment}>Edit Comment</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default UpdateComment;","import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport Stack from '@mui/material/Stack';\nimport DeleteComment from './DeleteComment';\nimport Comment from '../types/Comment';\nimport UpdateComment from './UpdateComment';\nimport CurrentUserState from '../types/CurrentUserState';\n\ntype Props = {\n    comment: Comment;\n    currentUserState: CurrentUserState;\n    API: string;\n}\n\nconst DeleteEditOnComment: React.FC<Props> = ({API, comment, currentUserState}: Props) => {\n    const [openDeleteComment, setOpenDeleteComment] = React.useState<boolean>(false);\n    const handleClickOpenDeleteComment = () => {\n      setOpenDeleteComment(true);\n    };\n    const handleCloseDeleteComment = () => {\n      setOpenDeleteComment(false);\n    };\n\n    const [openUpdateComment, setOpenUpdateComment] = React.useState<boolean>(false);\n    const handleClickOpenUpdateComment = () => {\n      setOpenUpdateComment(true);\n    };\n    const handleCloseUpdateComment = () => {\n      setOpenUpdateComment(false);\n    };\n    \n    return (\n        <Stack direction=\"row\" justifyContent='flex-end' alignItems=\"center\" spacing={1}>\n          { comment.user_id === currentUserState.currentUser.id &&\n            <>\n              <IconButton onClick={handleClickOpenUpdateComment}>\n                  <EditIcon />\n              </IconButton>\n              <UpdateComment API={API} comment={comment} openUpdateComment={openUpdateComment} handleCloseUpdateComment={handleCloseUpdateComment} />\n            </>\n          }\n          { comment.user_id === currentUserState.currentUser.id &&\n            <>\n              <IconButton onClick={handleClickOpenDeleteComment}>\n                <DeleteIcon />\n              </IconButton>\n              <DeleteComment API={API} comment={comment} openDeleteComment={openDeleteComment} handleCloseDeleteComment={handleCloseDeleteComment} />\n            </>\n          }\n        </Stack>\n    );\n};\n\nexport default DeleteEditOnComment;","import Comment from '../types/Comment';\nimport React from 'react';\nimport { Card, CardContent, makeStyles } from '@material-ui/core';\nimport Stack from '@mui/material/Stack';\nimport AvatarUserTimeTags from './AvatarUserTimeTags';\nimport DeleteEditOnComment from './DeleteEditOnComment';\nimport BodyAddHTML from './BodyAddHTML';\nimport CurrentUserState from '../types/CurrentUserState';\n\ntype Props = {\n    comment: Comment;\n    currentUserState: CurrentUserState;\n    API: string;\n};\n\nconst useStyles = makeStyles({\n    commentBody: {\n        fontSize: 16,\n        whiteSpace: 'pre-wrap',\n        paddingBottom: '1em',\n    },\n    commentCard: {\n        marginBottom: '1em',\n    },\n    metadata: {\n        fontSize: 14,\n    },\n});\n\nconst CommentItem: React.FC<Props> = ({ API, comment, currentUserState }: Props) => {\n    const classes = useStyles();\n        return (\n            <Card className={classes.commentCard}>\n                <CardContent>\n                    <Stack direction='column' spacing={3}>\n                        <AvatarUserTimeTags tagged={false} user={comment.user.username} time={new Date(comment.created_at)} tags={\"\"}/>\n                        <BodyAddHTML body={comment.body} toOverflow={false}/>\n                        <DeleteEditOnComment API={API} comment={comment} currentUserState={currentUserState}/>\n                    </Stack>\n                </CardContent>\n            </Card>\n        );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport Comment from '../types/Comment';\nimport CurrentUserState from '../types/CurrentUserState';\n\nimport React from 'react';\n\ntype Props = {\n    comments: Comment[];\n    currentUserState: CurrentUserState;\n    API: string;\n}\n\nconst CommentList: React.FC<Props> = ({API, comments, currentUserState}: Props) => {\n    return (\n        <ul>\n            {comments.map(comment => (\n                <CommentItem API={API} comment={comment} key={comment.id} currentUserState={currentUserState}/>\n            ))}\n        </ul>\n    );\n};\n\nexport default CommentList;\n","import { Thread, emptyThread } from '../types/Thread';\nimport ThreadMainPost from './ThreadMainPost';\nimport CommentList from './CommentList';\nimport CurrentUserState from '../types/CurrentUserState';\nimport GlobalMessageState from '../types/GlobalMessageState';\n\nimport React, { useEffect, useState } from 'react';\n\ntype Props = {\n    threadID: string | undefined;\n    currentUserState: CurrentUserState;\n    API: string,\n    globalMessageState: GlobalMessageState;\n}\n\nconst ThreadView: React.FC<Props> = ({threadID, currentUserState, API, globalMessageState}: Props) => {\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [thread, setThread] = useState<Thread>(emptyThread);\n\n    useEffect(() => {\n        fetch(API + \"/thread_pages/\" + threadID, {\n            method: 'GET',\n            mode: 'cors'\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setThread(result);\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            )\n    }, [threadID, API])\n    \n    if (error) {\n        return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div>Loading...</div>;\n    } else {\n        return (\n            <>\n                <ThreadMainPost globalMessageState={globalMessageState} API={API} toOverflow={false} thread={thread} key={thread.id} currentUserState={currentUserState}/>\n                <CommentList API={API} comments={thread.comments} currentUserState={currentUserState}/>\n            </>\n        );\n    }\n};\n\nexport default ThreadView;\n","import ThreadView from '../components/ThreadView';\nimport { useParams } from \"react-router-dom\";\nimport CurrentUserState from '../types/CurrentUserState';\nimport GlobalMessageState from '../types/GlobalMessageState';\n\nimport React from 'react';\n\ntype Props = {\n    currentUserState: CurrentUserState,\n    API: string,\n    globalMessageState: GlobalMessageState\n}\n\nconst ThreadPage: React.FC<Props> = ({currentUserState, API, globalMessageState}: Props) => {\n    let { threadID }  = useParams();\n    return (\n        <div style={{ width: '50vw', margin: 'auto', textAlign: 'center', paddingTop: \"30px\" }}>\n            <ThreadView globalMessageState={globalMessageState} threadID={threadID} currentUserState={currentUserState} API={API}/>\n        </div>\n    );\n};\n\nexport default ThreadPage;\n","import { Button, TextField, Dialog, DialogActions, DialogContent, \n    DialogTitle, DialogContentText } from '@material-ui/core';\nimport AlertUser from './AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\nimport CurrentUserState from '../types/CurrentUserState';\n\nimport React, { useState } from 'react';\nimport GlobalMessageState from '../types/GlobalMessageState';\n\ntype Props = {\n    openLogIn: boolean;\n    handleCloseLogIn: () => void;\n    currentUserState: CurrentUserState;\n    globalMessageState: GlobalMessageState;\n    API: string;\n}\n\nconst LogIn: React.FC<Props> = ({API, openLogIn, handleCloseLogIn, currentUserState, globalMessageState}: Props) => {\n    const [username, setUsername] = useState<string>(\"\");\n    const [password, setPassword] = useState<string>(\"\");\n\n    const [severity, setSeverity] = useState<AlertColor | undefined>('success');\n    const [message, setMessage] = useState<string[]>([]);\n\n    const resetLogIn = () => {\n        setUsername(\"\");\n        setPassword(\"\");\n    }\n\n    const handleSubmitLogIn = () => {\n        let new_message: string[] = [];\n            fetch(API + \"/login\", {\n                method: 'POST',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                body: JSON.stringify({\n                    username,\n                    password,\n                }),\n            })\n                .then((response) => {\n                    return response.json();\n                })\n                .then((data) => {\n                    if (data.error) {\n                        setSeverity('error');\n                        data.error.map((error: string) =>\n                            new_message.push(error));\n                        setMessage(new_message);\n                    } else {\n                        currentUserState.setCurrentUser(data.user);\n                        localStorage.setItem(\"token\", data.token);\n                        setSeverity('success');\n                        new_message.push(\"Logged in successfully!\");\n                        setMessage(new_message);\n                        resetLogIn();\n                        setTimeout(() => window.location.reload(), 1000);\n                    }\n                })\n                .catch((error) => console.log(error.message));\n    }\n\n    return (\n        <Dialog open={openLogIn} onClose={handleCloseLogIn} fullWidth>\n            <DialogTitle>Welcome Back!</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Log in to create threads, comment and more...\n                </DialogContentText>\n                <DialogContentText>\n                    Dont have an account? Create one to do much more!\n                </DialogContentText>\n                <AlertUser severity={severity} message={message}/>\n                <TextField\n                    autoFocus\n                    value={username}\n                    type='text'\n                    margin=\"normal\"\n                    label=\"Username\"\n                    fullWidth\n                    variant=\"outlined\"\n                    onChange={event => setUsername(event.target.value)}\n                />\n                <TextField\n                    value={password}\n                    type='password'\n                    margin=\"normal\"\n                    label=\"Password\"\n                    fullWidth\n                    variant=\"outlined\"\n                    onChange={event => setPassword(event.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseLogIn}>Cancel</Button>\n                <Button onClick={handleSubmitLogIn}>Log In</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default LogIn;","import { Button, TextField, Dialog, DialogActions, DialogContent, \n    DialogTitle, DialogContentText } from '@material-ui/core';\nimport AlertUser from './AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\n\nimport React, { useState } from 'react';\n\ntype Props = {\n    openCreateAccount: boolean;\n    handleCloseCreateAccount: () => void;\n    API: string;\n}\n\nconst CreateAccount: React.FC<Props> = ({API, openCreateAccount, handleCloseCreateAccount}: Props) => {\n    const [username, setUsername] = useState<string>(\"\");\n    const [password, setPassword] = useState<string>(\"\");\n    const [password_confirmation, setPassword_confirmation] = useState<string>(\"\");\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n\n    const resetCreateAccount = () => {\n        setUsername(\"\");\n        setPassword(\"\");\n        setPassword_confirmation(\"\");\n    }\n\n    const handleSubmitCreateAccount = () => {\n        let new_message: string[] = [];\n        fetch(API + \"/users\", {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                },\n            body: JSON.stringify({\n                username,\n                password,\n                password_confirmation,\n            }),\n        })\n            .then((response) => {\n                if (response.ok) {\n                    setSeverity('success');\n                    new_message.push(\"Account created successfully. Log in to do more!\")\n                    setMessage(new_message);\n                    resetCreateAccount();\n                    setTimeout(() => window.location.reload(), 1000);\n                }\n                return response.json();\n            })\n            .then((data) => {\n                if (data.error) {\n                    setSeverity('error');\n                    data.error.map((error: string) =>\n                        new_message.push(error));\n                    setMessage(new_message);\n                }\n            })\n            .catch((error) => console.log(error.message));\n    }\n\n    return (\n        <Dialog open={openCreateAccount} onClose={handleCloseCreateAccount} fullWidth>\n            <DialogTitle>Join the ChitChat Community!</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Dont have an account? Create one to create threads, comment and more...\n                </DialogContentText>\n                <AlertUser severity={severity} message={message}/>\n                    <TextField\n                        autoFocus\n                        value={username}\n                        type='text'\n                        margin=\"normal\"\n                        label=\"Username\"\n                        fullWidth\n                        variant=\"outlined\"\n                        onChange={event => setUsername(event.target.value)}\n                    />\n                    <TextField\n                        value={password}\n                        type='password'\n                        margin=\"normal\"\n                        label=\"Password\"\n                        fullWidth\n                        variant=\"outlined\"\n                        onChange={event => setPassword(event.target.value)}\n                    />\n                    <TextField\n                        value={password_confirmation}\n                        type='password'\n                        margin=\"normal\"\n                        label=\"Confirm Password\"\n                        fullWidth\n                        variant=\"outlined\"\n                        onChange={event => setPassword_confirmation(event.target.value)}\n                    />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseCreateAccount}>Close</Button>\n                <Button onClick={handleSubmitCreateAccount}>Create Account</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default CreateAccount;","import { Button, TextField, Dialog, DialogActions, DialogContent, \n    DialogTitle } from '@material-ui/core';\nimport AlertUser from './AlertUser';\nimport { AlertColor } from '@mui/material/Alert';\nimport CurrentUserState from '../types/CurrentUserState';\n\nimport React, { useState } from 'react';\n\ntype Props = {\n    openChangePassword: boolean;\n    handleCloseChangePassword: () => void;\n    currentUserState: CurrentUserState;\n    API: string;\n}\n\nconst ChangePassword: React.FC<Props> = ({API, openChangePassword, handleCloseChangePassword, currentUserState}: Props) => {\n    const [newPassword, setNewPassword] = useState<string>(\"\");\n    const [newPasswordConfirmation, setNewPasswordConfirmation] = useState<string>(\"\");\n    const [severity, setSeverity] = useState<AlertColor | undefined>(undefined);\n    const [message, setMessage] = useState<string[]>([]);\n\n    const resetChangePassword = () => {\n        setNewPassword(\"\");\n        setNewPasswordConfirmation(\"\");\n    }\n\n    const handleSubmitChangePassword = () => {\n        const password = newPassword;\n        const password_confirmation = newPasswordConfirmation;\n        let new_message: string[] = [];\n            fetch(API + \"/users/\" + currentUserState.currentUser.id, {\n                method: 'PATCH',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                body: JSON.stringify({\n                    password,\n                    password_confirmation,\n                }),\n            })\n                .then((response) => {\n                    if (response.ok) {\n                        setSeverity('success');\n                        new_message.push(\"Password Changed!\")\n                        setMessage(new_message);\n                        resetChangePassword();\n                        setTimeout(() => window.location.reload(), 1000);\n                    }\n                    return response.json();\n                })\n                .then((data) => {\n                    if (data.error) {\n                        setSeverity('error');\n                        data.error.map((error: string) =>\n                            new_message.push(error));\n                        setMessage(new_message);\n                    }\n                })\n                .catch((error) => console.log(error.message));\n        // }\n    }\n\n    return (\n        <Dialog open={openChangePassword} onClose={handleCloseChangePassword} fullWidth>\n            <DialogTitle>Change Password</DialogTitle>\n            <DialogContent>\n                <AlertUser severity={severity} message={message}/>\n                    <TextField\n                        value={newPassword}\n                        type='password'\n                        margin=\"normal\"\n                        label=\"Password\"\n                        fullWidth\n                        variant=\"outlined\"\n                        onChange={event => setNewPassword(event.target.value)}\n                    />\n                    <TextField\n                        value={newPasswordConfirmation}\n                        type='password'\n                        margin=\"normal\"\n                        label=\"Confirm Password\"\n                        fullWidth\n                        variant=\"outlined\"\n                        onChange={event => setNewPasswordConfirmation(event.target.value)}\n                    />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCloseChangePassword}>Close</Button>\n                <Button onClick={handleSubmitChangePassword}>Change Password</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default ChangePassword;","import * as React from 'react';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport LogIn from './LogIn';\nimport CreateAccount from './CreateAccount';\nimport CurrentUserState from '../types/CurrentUserState';\nimport GlobalMessageState from '../types/GlobalMessageState';\nimport ChangePassword from './ChangePassword';\n\n// Sourced Menu component from https://mui.com/material-ui/react-menu/#main-content and modified for use\n\ntype Props = {\n    anchorElAccountSettings: HTMLElement | null,\n    openAccountSettings: boolean,\n    handleCloseAccountSettings: () => void,\n    currentUserState: CurrentUserState;\n    globalMessageState: GlobalMessageState;\n    API: string;\n}\n\nconst AccountSettings: React.FC<Props> = ({API, anchorElAccountSettings, openAccountSettings, handleCloseAccountSettings, currentUserState, globalMessageState}: Props) => {\n    const [openLogIn, setOpenLogIn] = React.useState<boolean>(false);\n    const handleClickOpenLogIn = () => {\n      setOpenLogIn(true);\n    };\n    const handleCloseLogIn = () => {\n      setOpenLogIn(false);\n    };\n\n    const [openCreateAccount, setOpenCreateAccount] = React.useState<boolean>(false);\n    const handleClickOpenCreateAccount = () => {\n      setOpenCreateAccount(true);\n    };\n    const handleCloseCreateAccount = () => {\n      setOpenCreateAccount(false);\n    };\n\n    const [openChangePassword, setOpenChangePassword] = React.useState<boolean>(false);\n    const handleClickOpenChangePassword = () => {\n      setOpenChangePassword(true);\n    };\n    const handleCloseChangePassword = () => {\n      setOpenChangePassword(false);\n    };\n\n    const handleLogOut = () => {\n      currentUserState.setCurrentUser(currentUserState.emptyCurrentUser);\n      localStorage.removeItem(\"token\");\n      window.location.reload();\n    }\n\n    return (\n        <div>\n          { currentUserState.isLoggedIn ? \n            <Menu\n                id=\"account-settings\"\n                anchorEl={anchorElAccountSettings}\n                open={openAccountSettings}\n                onClose={handleCloseAccountSettings}\n                MenuListProps={{\n                'aria-labelledby': 'basic-button',\n                }}\n            >            \n              <MenuItem onClick={handleClickOpenChangePassword}>Change Password</MenuItem>\n              <ChangePassword API={API} openChangePassword={openChangePassword} handleCloseChangePassword={handleCloseChangePassword} currentUserState={currentUserState}/>\n              <MenuItem onClick={handleLogOut}>Log Out</MenuItem>\n            </Menu> :\n            <Menu\n              id=\"account-settings\"\n              anchorEl={anchorElAccountSettings}\n              open={openAccountSettings}\n              onClose={handleCloseAccountSettings}\n              MenuListProps={{\n              'aria-labelledby': 'basic-button',\n              }}\n            >            \n              <MenuItem onClick={handleClickOpenLogIn}>Log In</MenuItem>\n              <LogIn API={API} openLogIn={openLogIn} handleCloseLogIn={handleCloseLogIn} currentUserState={currentUserState} globalMessageState={globalMessageState}/>\n              <MenuItem onClick={handleClickOpenCreateAccount}>Create Account</MenuItem>\n              <CreateAccount API={API} openCreateAccount={openCreateAccount} handleCloseCreateAccount={handleCloseCreateAccount}/>\n            </Menu>\n              }\n        </div>\n    );\n};\n\nexport default AccountSettings;","import { Typography, Box, AppBar, Container, Toolbar, Tooltip,\n  IconButton, Avatar, CardActionArea } from '@material-ui/core';\nimport ForumIcon from '@mui/icons-material/Forum';\nimport AccountSettings from './AccountSettings';\nimport CurrentUserState from '../types/CurrentUserState';\nimport GlobalMessageState from '../types/GlobalMessageState';\nimport Stack from '@mui/material/Stack';\n\nimport React from 'react';\n\ntype Props = {\n  currentUserState: CurrentUserState;\n  globalMessageState: GlobalMessageState;\n  API: string;\n}\n\nconst NavBar: React.FC<Props> = ({API, currentUserState, globalMessageState}: Props) => {\n  const [anchorElAccountSettings, setAnchorElAccountSettings] = React.useState<null | HTMLElement>(null);\n  const openAccountSettings = Boolean(anchorElAccountSettings);\n  const handleClickAccountSettings = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorElAccountSettings(event.currentTarget);\n  };\n  const handleCloseAccountSettings = () => {\n    setAnchorElAccountSettings(null);\n  };\n\n  type page = {\n    pageName: string;\n    href: string;\n  }\n  const myThreads: page = {\n    pageName: \"MyThreads\",\n    href: \"/mythreads\",\n  }\n  const pages:page[] = [myThreads];\n\n  return (\n    <Box marginBottom={'70px'}>\n      <AppBar position='fixed' style={{zIndex: '1200'}}>\n        <Container maxWidth='xl'>\n          <Toolbar disableGutters>\n            <Box flexGrow={1} display='flex' alignItems={'center'}>\n              <ForumIcon sx={{mr: 1}} />\n              <Typography variant='h6' component='a' href='/'\n                style={{\n                  color: 'inherit',\n                  textDecoration: 'none',\n                  marginRight: '40px',\n                }}\n              >\n                ChitChat\n              </Typography>\n              <Stack direction='row'>\n                {currentUserState.isLoggedIn && pages.map(page => (\n                  <CardActionArea key={page.pageName} style={{padding: '10px', borderRadius: '10px'}} href={page.href}>\n                    <Typography>{page.pageName}</Typography>\n                  </CardActionArea>\n                ))}\n              </Stack>\n            </Box>\n            <Tooltip title=\"Account Settings\">\n              <IconButton\n                id=\"basic-button\"\n                aria-controls={openAccountSettings ? 'account-settings' : undefined}\n                aria-haspopup=\"true\"\n                aria-expanded={openAccountSettings ? 'true' : undefined}\n                onClick={handleClickAccountSettings}\n              >\n                <Avatar/>\n              </IconButton>\n            </Tooltip>\n            <AccountSettings API={API} anchorElAccountSettings={anchorElAccountSettings} openAccountSettings={openAccountSettings} \n              handleCloseAccountSettings={handleCloseAccountSettings} currentUserState={currentUserState} globalMessageState={globalMessageState}/>\n          </Toolbar>\n        </Container>\n      </AppBar>\n    </Box>\n  );\n};\n\nexport default NavBar;","import React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert, { AlertColor } from '@mui/material/Alert';\nimport Stack from '@mui/material/Stack';\n\ntype Props = {\n    globalMessage: string[];\n    severityGlobalMessage: AlertColor | undefined;\n    handleCloseGlobalMessage: () => void;\n    openGlobalMessage: boolean;\n}\n\nconst GlobalMessage: React.FC<Props> = ({globalMessage, severityGlobalMessage, handleCloseGlobalMessage, openGlobalMessage}: Props) => {\n\n    return (\n        <Stack spacing={2}>\n            { globalMessage.map(message =>\n                <Snackbar open={openGlobalMessage} autoHideDuration={6000} onClose={handleCloseGlobalMessage}>\n                    <Alert onClose={handleCloseGlobalMessage} severity={severityGlobalMessage} sx={{ width: '100%' }}>\n                        {message}\n                    </Alert>\n                </Snackbar>\n            )}\n        </Stack>\n    );\n}\n\nexport default GlobalMessage;","import ThreadList from '../components/ThreadList';\nimport { Thread } from '../types/Thread';\nimport CurrentUserState from '../types/CurrentUserState';\nimport GlobalMessageState from '../types/GlobalMessageState';\n\nimport React, {useState, useEffect} from 'react';\n\ntype Props = {\n    currentUserState: CurrentUserState;\n    API: string;\n    globalMessageState: GlobalMessageState;\n}\n\nconst MyThreads: React.FC<Props> = ( {currentUserState, API, globalMessageState}: Props) => {\n    const [error, setError] = useState<any>(null);\n    const [isLoaded, setIsLoaded] = useState<boolean>(false);\n    const [threads, setThreads] = useState<Thread[]>([]);\n\n    useEffect(() => {\n        if (currentUserState.isLoggedIn) {\n        fetch(API + \"/mythreads/\" + currentUserState.currentUser.id, {\n            method: 'GET',\n            mode: 'cors'\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setThreads(result);\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            )\n        }\n    }, [currentUserState.isLoggedIn, currentUserState.currentUser.id, API]);\n\n    return (\n        <div style={{ width: '50vw', margin: 'auto', textAlign: 'center', paddingTop: '30px'}}>\n            <ThreadList globalMessageState={globalMessageState} API={API} threads={threads} error={error} isLoaded={isLoaded} currentUserState={currentUserState}/>\n        </div>\n    );\n};\n\nexport default MyThreads;","import Home from './pages/Home';\nimport ThreadPage from './pages/ThreadPage';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport NavBar from './components/NavBar';\nimport CurrentUser from './types/CurrentUser';\nimport GlobalMessage from './components/GlobalMessage';\nimport { AlertColor } from '@mui/material/Alert';\nimport MyThreads from './pages/MyThreads';\n\nconst API: string = \"https://chitchat-4uee.onrender.com/\";\n\nconst theme = createTheme({\n    palette: {\n      primary: {\n        light: '#757ce8',\n        main: '#3f50b5',\n        dark: '#002884',\n        contrastText: '#fff',\n      },\n      secondary: {\n        light: '#ff7961',\n        main: '#f44336',\n        dark: '#ba000d',\n        contrastText: '#000',\n      },\n    },\n  });\n\nconst App: React.FC = () => {\n  const [globalMessage, setGlobalMessage] = useState<string[]>([]);\n  const [severityGlobalMessage, setSeverityGlobalMessage] = useState<AlertColor | undefined>(undefined);\n  const [openGlobalMessage, setOpenGlobalMessage] = useState<boolean>(true);\n  const handleCloseGlobalMessage = () => {\n      setOpenGlobalMessage(false);\n      setSeverityGlobalMessage(undefined);\n      setGlobalMessage([]);\n  }\n  const handleOpenGlobalMessage = () => {\n    setOpenGlobalMessage(true);\n  }\n  const globalMessageState = {\n    setGlobalMessage: setGlobalMessage,\n    setSeverityGlobalMessage: setSeverityGlobalMessage,\n    handleOpenGlobalMessage: handleOpenGlobalMessage,\n  }\n\n  const emptyCurrentUser = {\n    id: 0,\n    username: \"\",\n    password_digest: \"\",\n    created_at: \"\",\n    updated_at: \"\",\n  }\n  const [currentUser, setCurrentUser] = useState<CurrentUser>(emptyCurrentUser);\n  const currentUserState = {\n    currentUser: currentUser,\n    setCurrentUser: setCurrentUser,\n    emptyCurrentUser: emptyCurrentUser,\n    isLoggedIn: currentUser.id !== 0,\n  }\n\n  useEffect(() => {\n    let new_message: string[] = [];\n    const token = localStorage.getItem(\"token\")\n    if (token) {\n      fetch(API + \"/login\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `${token}`\n        }\n      })\n      .then(response => response.json())\n      .then(data => {\n        if (data.error) {\n          setSeverityGlobalMessage('error');\n          data.error.map((error: string) =>\n              new_message.push(error));\n          setGlobalMessage(new_message);\n        } else {\n          setCurrentUser(data);\n        }\n      })\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n          <NavBar API={API} currentUserState={currentUserState} globalMessageState={globalMessageState}/>\n          < GlobalMessage globalMessage={globalMessage} severityGlobalMessage={severityGlobalMessage} openGlobalMessage={openGlobalMessage} handleCloseGlobalMessage={handleCloseGlobalMessage}/>\n          <BrowserRouter>\n            <Routes>\n                <Route path=\"/thread/:threadID\" element={<ThreadPage globalMessageState={globalMessageState} currentUserState={currentUserState} API={API}/>} />\n                <Route path=\"/\" element={<Home globalMessageState={globalMessageState} currentUserState={currentUserState} API={API}/>} />\n                <Route path=\"/mythreads\" element={<MyThreads globalMessageState={globalMessageState} currentUserState={currentUserState} API={API}/>} />\n            </Routes>\n         </BrowserRouter>\n      </ThemeProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}